{"ast":null,"code":"import { mapActions, mapState } from 'vuex';\nimport { cleanPaste } from '../utils';\nimport { Archived } from '../dictionaries/availableCaseStatuses';\nimport OpenSeadragon from 'openseadragon';\nwindow.OpenSeadragon = OpenSeadragon;\n\nrequire('../libs/openseadragon-svg-overlay'); // const viewer = new OpenSeadragon.Viewer();\n\n\nwindow.OpenSeadragon.Point = OpenSeadragon.Point;\nexport default {\n  name: 'Note',\n  props: {\n    object: {\n      type: Object,\n      required: true\n    },\n    type: {\n      type: String,\n      required: true\n    },\n    caseId: {\n      type: String,\n      requied: true\n    },\n    fileId: {\n      type: String,\n      required: true\n    },\n    $store: {\n      type: Object,\n      required: true\n    },\n    $bus: {\n      type: Object,\n      required: true\n    },\n    isWebinar: {\n      type: Boolean\n    },\n    ableToAct: {\n      type: Boolean\n    },\n    primary: {\n      type: Boolean\n    },\n    viewer: {\n      type: Object\n    },\n    openOnCreate: {\n      type: Boolean,\n      default: false\n    }\n  },\n\n  data() {\n    return {\n      openedComment: false,\n      opened: false,\n      empty: true,\n      focused: false,\n      commentStyles: {\n        top: `20px`,\n        left: `-320px`,\n        transform: 'rotate(' + this.viewer.viewport.getRotation() * -1 + 'deg)'\n      },\n      Archived: Archived\n    };\n  },\n\n  computed: { ...mapState({\n      caseOwnerId: state => state.case.id && state.case.owner ? state.case.owner.id : null,\n      accountId: state => state.account.id,\n      isArchived: state => state.case.status === Archived\n    }),\n\n    // accountAvatar() {\n    //    const avatar = {\n    //         'background-image': `url(/images/button_hover.png)`\n    //     }\n    //     return avatar ? {\n    //         'background-image': `url(/images/button_hover.png)`\n    //     } : {}\n    // },\n    noteType() {\n      return this.type === 'mark' ? 'отметку' : 'линейку';\n    },\n\n    isEditable() {\n      return this.status !== Archived; // return (this.object.author.id === this.accountId || this.caseOwnerId === this.accountId) && this.status !== Archived\n    },\n\n    parent() {\n      return this.$el.parentNode;\n    },\n\n    isNoteOwner() {\n      return true; // return this.accountId === this.object.author.id\n    },\n\n    commentPlaceholder() {\n      return \"Добавьте коментарий\"; // this.$t('case.viewer.note.write_comment', { type: this.type === 'mark' ? this.$tc('case.viewer.note.mark', 1) : this.$tc('case.viewer.note.ruler', 1) }) :\n      // \"case.viewer.note.write_comment\" :\n      // this.$t('case.viewer.note.no_comment', { type: this.type === 'mark' ? this.$tc('case.viewer.note.mark', 1) : this.$tc('case.viewer.note.ruler', 1) })\n    }\n\n  },\n  methods: {\n    cleanPaste(e) {\n      cleanPaste(e);\n    },\n\n    openComment() {\n      if (!this.openedComment) {\n        this.viewer.addHandler('canvas-click', this.commentClickHandler);\n        this.openedComment = true;\n      } else {\n        this.openedComment = false;\n      }\n    },\n\n    commentClickHandler(e) {\n      this.$refs.comment.classList += ' visible';\n      this.$nextTick(() => {\n        if (this.opened) this.noteBoundsCheck();\n      });\n    },\n\n    // eslint-disable-next-line no-unused-vars\n    onKeyUp(e) {\n      if (this.$refs.text.textContent.length) {\n        this.empty = false;\n      } else {\n        this.empty = true;\n      }\n    },\n\n    deleteNote() {\n      const actionType = this.type === 'mark' ? 'deleteMark' : 'deleteRuler';\n      this[actionType]({\n        caseId: this.caseId,\n        fileId: this.fileId,\n        itemId: this.object.id,\n        webinarId: this.isWebinar ? this.$store.state.webinar.id : null\n      }).then(() => {\n        this.clearComponent();\n\n        if (this.isWebinar && this.ableToAct) {\n          const action = this.type === 'mark' ? 'deleteMark' : 'deleteRuler';\n          this.$bus.$emit('sendMessage', {\n            action: action,\n            data: {\n              id: this.object.id\n            }\n          });\n        }\n      }).catch(console.error);\n    },\n\n    editNote() {\n      const actionType = this.type === 'mark' ? 'editMark' : 'editRuler';\n      const item = { ...this.object\n      };\n      let text = this.$refs.text.textContent.trim();\n      item.text = text;\n      this.$refs.text.textContent = text;\n      this[actionType]({\n        caseId: this.caseId,\n        fileId: this.fileId,\n        itemId: this.object.id,\n        item,\n        webinarId: this.isWebinar ? this.$store.state.webinar.id : null\n      }).then(() => {\n        // eslint-disable-next-line vue/no-mutating-props\n        this.object.text = text;\n        this.$bus.$emit('sendMessage', {\n          action: actionType,\n          data: {\n            id: this.object.id,\n            text\n          }\n        });\n      }).catch(console.error);\n    },\n\n    editMark() {\n      this.$emit('noteOpened', this.object.id);\n      this.opened = true;\n      this.$nextTick(() => {\n        if (this.opened) this.noteBoundsCheck();\n      });\n    },\n\n    toggleOpened(sendBusMessage = true) {\n      console.log(this.parent, 'toggleOpened'); // hack with loosing z-index context during rotation\n\n      this.opened ? this.parent.style.zIndex = '' : this.parent.style.zIndex = 1;\n      this.opened = !this.opened;\n      this.opened ? this.parent.style.zIndex = 2 : this.parent.style.zIndex = 1;\n      this.$nextTick(() => {\n        if (this.opened) this.noteBoundsCheck();\n      }); // this.$emit('noteOpened', this.object.id)\n\n      if (sendBusMessage) this.$bus.$emit('noteOpened', this.object.id);\n      const action = this.type === 'mark' ? 'toggleMark' : 'toggleRuler';\n      this.$bus.$emit('sendMessage', {\n        action: action,\n        data: {\n          primary: this.primary,\n          id: this.object.id,\n          opened: true,\n          isNewInterface: true\n        }\n      });\n    },\n\n    // eslint-disable-next-line no-unused-vars\n    downHandler(e) {\n      if (this.ableToAct) {\n        this.viewer.addHandler('canvas-drag', this.moveHandler);\n        this.viewer.addHandler('canvas-release', this.upHandler);\n      }\n    },\n\n    upHandler(e) {\n      if (this.$refs.comment && !this.$refs.comment.contains(e.originalEvent.target)) {\n        this.opened = false;\n        this.parent.style.zIndex = 1;\n        const action = this.type === 'mark' ? 'toggleMark' : 'toggleRuler';\n        this.$bus.$emit('sendMessage', {\n          action: action,\n          data: {\n            primary: this.primary,\n            id: this.object.id,\n            opened: false\n          }\n        });\n      }\n    },\n\n    // eslint-disable-next-line no-unused-vars\n    moveHandler(e) {\n      this.viewer.removeHandler('canvas-release', this.upHandler);\n    },\n\n    clearComponent() {\n      this.$el.remove();\n      this.$destroy();\n\n      if (this.type === 'ruler') {\n        let rulerPoints = Array.from(document.querySelectorAll(`.ruler-point[data-id=\"${this.object.id}\"]`));\n        rulerPoints.forEach(point => this.viewer.removeOverlay(point));\n        const line = document.getElementById(this.object.id);\n        line.remove();\n      }\n    },\n\n    noteBoundsCheck() {\n      // data prepare\n      console.log(this.object);\n      const coords = this.object.endPoint ? {\n        x: this.object.endPoint.ip.x,\n        y: this.object.endPoint.ip.y\n      } : {\n        x: this.object.x,\n        y: this.object.y\n      };\n      console.log(coords);\n      console.log(this.viewer.viewport);\n      const pointOpensea = new OpenSeadragon.Point({\n        x: coords.x,\n        y: coords.y\n      });\n      const point = this.viewer.viewport.imageToWindowCoordinates(pointOpensea);\n      const viewerBounds = this.viewer.container.getBoundingClientRect();\n      const formBounds = {\n        width: 300 + 20,\n        height: 250 + 20\n      }; // replace comment form\n\n      const defaultStyles = {\n        top: `20px`,\n        left: `-320px`,\n        transform: 'rotate(' + this.viewer.viewport.getRotation() * -1 + 'deg)'\n      };\n\n      if (point.x - formBounds.width < viewerBounds.left && point.y + formBounds.height > viewerBounds.bottom) {\n        defaultStyles.top = `${-formBounds.height}px`;\n        defaultStyles.left = `30px`;\n      } else if (point.x - formBounds.width < viewerBounds.left) {\n        defaultStyles.top = `40px`;\n        defaultStyles.left = `40px`;\n      } else if (point.y + formBounds.height > viewerBounds.bottom) {\n        defaultStyles.top = `${-formBounds.height}px`;\n      }\n\n      this.commentStyles = defaultStyles;\n      if (this.$refs.ruler) this.$refs.ruler.style.transform = defaultStyles.transform;\n    },\n\n    busToggleNote(msg) {\n      if (this.primary === msg.primary && this.object.id === msg.id) {\n        this.opened = msg.opened;\n        this.$nextTick(() => {\n          if (this.opened) this.noteBoundsCheck();\n        });\n      }\n    },\n\n    busDeleteNote(msg) {\n      if (this.object.id === msg.id) {\n        const mutationName = msg.type === 'mark' ? 'DELETE_MARK' : 'DELETE_RULER';\n        this.clearComponent();\n        this.$store.commit(mutationName, {\n          fileId: this.fileId,\n          itemId: msg.id\n        });\n      }\n    },\n\n    busEditNote(msg) {\n      if (this.object.id === msg.id) {\n        const mutationName = msg.type === 'mark' ? 'EDIT_MARK' : 'EDIT_RULER';\n        const item = { ...this.object\n        };\n        item.text = msg.text;\n        this.$store.commit(mutationName, {\n          fileId: this.fileId,\n          item\n        });\n      }\n    },\n\n    closeOnOtherOpen(id) {\n      if (this.opened && this.object.id !== id || !this.opened && this.object.id === id) this.toggleOpened(false);\n    },\n\n    // eslint-disable-next-line no-unused-vars\n    preventHandler(e) {},\n\n    ...mapActions(['deleteMark', 'deleteRuler', 'editMark', 'editRuler'])\n  },\n\n  mounted() {\n    // document.getElementsByClassName('comment-form').addEventListener('click')\n    // const rulerLength = document.getElementById(`${this.object.id}`)[0]\n    // rulerLength.addEventListener('click', this.toggleOpened(true))\n    // this.viewer.addHandler('canvas-click', this.toggleOpened(true))\n    // 'canvas-click'\n    // document.getElementsByClassName(`${this.object.id}`).addHandler('click', this.toggleOpened(true))\n    // detects if clicked on another note container or canvas\n    this.$nextTick(() => {\n      this.viewer.addHandler('canvas-press', this.downHandler);\n      this.parent.style.zIndex = 1;\n      if (this.openOnCreate) this.toggleOpened();\n      this.$nextTick(() => {\n        if (this.opened) this.noteBoundsCheck();\n      }); // this.$emit('noteOpened', this.closeOnOtherOpen)\n\n      this.$bus.$on('toggleNote', this.busToggleNote);\n      this.$bus.$on('deleteNote', this.busDeleteNote);\n      this.$bus.$on('editNote', this.busEditNote);\n      this.$bus.$on('noteOpened', this.closeOnOtherOpen);\n    });\n  },\n\n  beforeDestroy() {\n    this.viewer.removeHandler('canvas-press', this.downHandler);\n    this.viewer.removeHandler('canvas-release', this.upHandler);\n    this.$bus.$off('toggleNote', this.busToggleNote);\n    this.$bus.$off('deleteNote', this.busDeleteNote);\n    this.$bus.$off('editNote', this.busEditNote);\n    this.$bus.$off('noteOpened', this.closeOnOtherOpen);\n  }\n\n};","map":{"version":3,"mappings":"AA6BA;AACA;AACA;AACA;AACAA;;AACAC,6C,CACA;;;AACAD;AAIA;EACAE,YADA;EAEAC;IACAC;MACAC,YADA;MAEAC;IAFA,CADA;IAKAD;MACAA,YADA;MAEAC;IAFA,CALA;IASAC;MACAF,YADA;MAEAG;IAFA,CATA;IAaAC;MACAJ,YADA;MAEAC;IAFA,CAbA;IAiBAI;MACAL,YADA;MAEAC;IAFA,CAjBA;IAqBAK;MACAN,YADA;MAEAC;IAFA,CArBA;IAyBAM;MACAP;IADA,CAzBA;IA4BAQ;MACAR;IADA,CA5BA;IA+BAS;MACAT;IADA,CA/BA;IAkCAU;MACAV;IADA,CAlCA;IAqCAW;MACAX,aADA;MAEAY;IAFA;EArCA,CAFA;;EA4CAC;IACA;MACAC,oBADA;MAEAC,aAFA;MAGAC,WAHA;MAIAC,cAJA;MAKAC;QACAC,WADA;QAEAC,cAFA;QAGAC;MAHA,CALA;MAUAC;IAVA;EAYA,CAzDA;;EA0DAC,YACA;MACAC,oFADA;MAEAC,oCAFA;MAGAC;IAHA,EADA;;IAMA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACAC;MACA;IACA,CAhBA;;IAiBAC;MACA,gCADA,CAEA;IACA,CApBA;;IAqBAC;MACA;IACA,CAvBA;;IAwBAC;MACA,YADA,CAEA;IACA,CA3BA;;IA4BAC;MACA,6BADA,CAEA;MACA;MAEA;IACA;;EAlCA,CA1DA;EA8FAC;IACAC;MAAAA;IAAA,CADA;;IAEAC;MACA;QACA;QACA;MACA,CAHA,MAGA;QACA;MACA;IACA,CATA;;IAUAC;MACA;MACA;QACA;MACA,CAFA;IAGA,CAfA;;IAgBA;IACAC;MACA;QACA;MACA,CAFA,MAEA;QACA;MACA;IACA,CAvBA;;IAwBAC;MACA;MACA;QACAnC,mBADA;QAEAE,mBAFA;QAGAkC,sBAHA;QAIAC;MAJA,GAMAC,IANA,CAMA;QACA;;QACA;UACA;UACA;YACAC,cADA;YAEA5B;cACA6B;YADA;UAFA;QAMA;MACA,CAjBA,EAkBAC,KAlBA,CAkBAC,aAlBA;IAmBA,CA7CA;;IA8CAC;MACA;MACA;MAAA;MACA;MACAC;MACA;MACA;QACA5C,mBADA;QAEAE,mBAFA;QAGAkC,sBAHA;QAIAQ,IAJA;QAKAP;MALA,GAOAC,IAPA,CAOA;QACA;QACA;QAEA;UACAC,kBADA;UAEA5B;YACA6B,kBADA;YAEAK;UAFA;QAFA;MAQA,CAnBA,EAoBAJ,KApBA,CAoBAC,aApBA;IAqBA,CAzEA;;IA0EAI;MACA;MACA;MACA;QACA;MACA,CAFA;IAGA,CAhFA;;IAiFAC;MACAL,yCADA,CACA;;MACA;MACA;MACA;MACA;QACA;MACA,CAFA,EALA,CAQA;;MACA;MAEA;MACA;QACAH,cADA;QAEA5B;UACAJ,qBADA;UAEAiC,kBAFA;UAGA3B,YAHA;UAIAmC;QAJA;MAFA;IAUA,CAvGA;;IAwGA;IACAC;MACA;QACA;QACA;MACA;IACA,CA9GA;;IA+GAC;MACA;QACA;QACA;QAEA;QACA;UACAX,cADA;UAEA5B;YACAJ,qBADA;YAEAiC,kBAFA;YAGA3B;UAHA;QAFA;MASA;IACA,CA/HA;;IAgIA;IACAsC;MACA;IACA,CAnIA;;IAoIAC;MACA;MACA;;MACA;QACA;QACAC;QACA;QACAC;MACA;IACA,CA7IA;;IA8IAC;MACA;MACAb;MACA,sCACA;QAAAc;QAAAC;MAAA,CADA,GAEA;QAAAD;QAAAC;MAAA,CAFA;MAGAf;MACAA;MACA;QAAAc;QAAAC;MAAA;MACA;MACA;MACA;QACAC,eADA;QAEAC;MAFA,EAXA,CAgBA;;MACA;QACA1C,WADA;QAEAC,cAFA;QAGAC;MAHA;;MAKA;QACAyC;QACAA;MACA,CAHA,MAGA;QACAA;QACAA;MACA,CAHA,MAGA;QACAA;MACA;;MACA;MACA;IACA,CA/KA;;IAgLAC;MACA;QACA;QACA;UACA;QACA,CAFA;MAGA;IACA,CAvLA;;IAwLAC;MACA;QACA;QACA;QACA;UACA5D,mBADA;UAEAkC;QAFA;MAIA;IACA,CAjMA;;IAkMA2B;MACA;QACA;QACA;QAAA;QACAnB;QACA;UACA1C,mBADA;UAEA0C;QAFA;MAIA;IACA,CA5MA;;IA6MAoB;MACA;IACA,CA/MA;;IAgNA;IACAC,mBAEA,CAnNA;;IAoNA;EApNA,CA9FA;;EAoTAC;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;MACA;MACA;MACA;MACA;QACA;MACA,CAFA,EAJA,CAOA;;MACA;MACA;MACA;MACA;IACA,CAZA;EAaA,CA1UA;;EA2UAC;IACA;IACA;IAEA;IACA;IACA;IACA;EACA;;AAnVA","names":["window","require","name","props","object","type","required","caseId","requied","fileId","$store","$bus","isWebinar","ableToAct","primary","viewer","openOnCreate","default","data","openedComment","opened","empty","focused","commentStyles","top","left","transform","Archived","computed","caseOwnerId","accountId","isArchived","noteType","isEditable","parent","isNoteOwner","commentPlaceholder","methods","cleanPaste","openComment","commentClickHandler","onKeyUp","deleteNote","itemId","webinarId","then","action","id","catch","console","editNote","item","text","editMark","toggleOpened","isNewInterface","downHandler","upHandler","moveHandler","clearComponent","rulerPoints","line","noteBoundsCheck","x","y","width","height","defaultStyles","busToggleNote","busDeleteNote","busEditNote","closeOnOtherOpen","preventHandler","mounted","beforeDestroy"],"sourceRoot":"src/components","sources":["Note.vue"],"sourcesContent":["<template lang=\"html\">\r\n    <div class=\"note-container\" :id=\"object.id\">\r\n     <div v-if=\"type === 'mark'\" :class=\"{'mark': true, 'selected': opened}\" @touchstart.stop=\"ableToAct ? toggleOpened() : null\" @click=\"ableToAct ? toggleOpened() : null\" ref=\"mark\"></div>\r\n        <div v-else :class=\"{'ruler-length': true, 'selected': opened}\" style=\"visibility:visible\" @touchstart.stop=\"ableToAct ? toggleOpened() : null\" @click=\"toggleOpened()\" ref=\"ruler\">{{ object.length }}</div>\r\n        <div :class=\"{'comment-form': true, 'visible': opened}\" :style=\"commentStyles\" ref=\"comment\" @click.stop @pointerdown.stop @mousedown.stop>\r\n            <div class=\"comment-author\">\r\n                <!-- <div :class=\"{'avatar': true, 'default': !object.author.photo}\" :style=\"accountAvatar\"></div> -->\r\n                <p class=\"name\">{{ object.author.name }}</p>\r\n            </div>\r\n            <div class=\"editor-container\">\r\n                <div class=\"editor\" :class=\"{'center-placeholder': !isNoteOwner && (!object.text || !object.text.length) && empty}\" @touchstart.stop=\"$refs.text.focus(); focused = true;\" @click=\"$refs.text.focus(); focused = true;\">\r\n                    <span class=\"text multiline\" :class=\"{'focused':focused}\" :contenteditable=\"isEditable && isNoteOwner\" ref=\"text\" @paste=\"cleanPaste\" @keyup=\"onKeyUp\" @blur=\"editNote\">{{ object.text }}</span>\r\n                    <span class=\"placeholder\" v-if=\"(!object.text || !object.text.length) && empty && !focused\">{{ commentPlaceholder }}</span>\r\n                </div>\r\n            </div>\r\n            <div class=\"date\">\r\n                {{ object.date | momentRelative }}\r\n            </div>\r\n            <button v-if=\"isEditable\" @touchstart.stop=\"deleteNote\" @click=\"deleteNote\" class=\"delete-comment\">\r\n            <!-- {{ $t('case.viewer.note.delete_comment', { type: type === 'mark' ? $tc('case.viewer.note.mark', 1) : $tc('case.viewer.note.ruler', 1) }) }} -->\r\n            delete\r\n          </button>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<!-- eslint-disable vue/multi-word-component-names -->\r\n\r\n<script>\r\nimport { mapActions, mapState } from 'vuex'\r\nimport { cleanPaste } from '../utils'\r\nimport { Archived } from '../dictionaries/availableCaseStatuses'\r\nimport OpenSeadragon from 'openseadragon'\r\nwindow.OpenSeadragon = OpenSeadragon\r\nrequire('../libs/openseadragon-svg-overlay')\r\n// const viewer = new OpenSeadragon.Viewer();\r\nwindow.OpenSeadragon.Point = OpenSeadragon.Point\r\n\r\n\r\n\r\nexport default {\r\n    name: 'Note',\r\n    props: {\r\n        object: {\r\n            type: Object,\r\n            required: true\r\n        },\r\n        type: {\r\n            type: String,\r\n            required: true\r\n        },\r\n        caseId: {\r\n            type: String,\r\n            requied: true\r\n        },\r\n        fileId: {\r\n            type: String,\r\n            required: true\r\n        },\r\n        $store: {\r\n            type: Object,\r\n            required: true\r\n        },\r\n        $bus: {\r\n            type: Object,\r\n            required: true\r\n        },\r\n        isWebinar: {\r\n            type: Boolean\r\n        },\r\n        ableToAct: {\r\n            type: Boolean\r\n        },\r\n        primary: {\r\n            type: Boolean\r\n        },\r\n        viewer: {\r\n            type: Object\r\n        },\r\n        openOnCreate: {\r\n            type: Boolean,\r\n            default: false\r\n        }\r\n    },\r\n    data() {\r\n        return {\r\n            openedComment: false,\r\n            opened: false,\r\n            empty: true,\r\n            focused: false,\r\n            commentStyles: {\r\n                top: `20px`,\r\n                left: `-320px`,\r\n                transform: 'rotate(' + (this.viewer.viewport.getRotation() * -1) + 'deg)'\r\n            },\r\n            Archived: Archived\r\n        }\r\n    },\r\n    computed: {\r\n        ...mapState({\r\n            caseOwnerId: state => state.case.id && state.case.owner ? state.case.owner.id : null,\r\n            accountId: state => state.account.id,\r\n            isArchived: state => state.case.status === Archived\r\n        }),\r\n        // accountAvatar() {\r\n        //    const avatar = {\r\n        //         'background-image': `url(/images/button_hover.png)`\r\n        //     }\r\n        //     return avatar ? {\r\n        //         'background-image': `url(/images/button_hover.png)`\r\n        //     } : {}\r\n        // },\r\n        noteType() {\r\n            return this.type === 'mark' ? 'отметку' : 'линейку'\r\n        },\r\n        isEditable() {\r\n            return this.status !== Archived\r\n            // return (this.object.author.id === this.accountId || this.caseOwnerId === this.accountId) && this.status !== Archived\r\n        },\r\n        parent() {\r\n            return this.$el.parentNode\r\n        },\r\n        isNoteOwner() {\r\n            return true\r\n            // return this.accountId === this.object.author.id\r\n        },\r\n        commentPlaceholder() {\r\n            return \"Добавьте коментарий\"\r\n                // this.$t('case.viewer.note.write_comment', { type: this.type === 'mark' ? this.$tc('case.viewer.note.mark', 1) : this.$tc('case.viewer.note.ruler', 1) }) :\r\n                // \"case.viewer.note.write_comment\" :\r\n                \r\n                // this.$t('case.viewer.note.no_comment', { type: this.type === 'mark' ? this.$tc('case.viewer.note.mark', 1) : this.$tc('case.viewer.note.ruler', 1) })\r\n        }\r\n    },\r\n    methods: {\r\n        cleanPaste(e) { cleanPaste(e) },\r\n        openComment(){\r\n            if (!this.openedComment) {\r\n                this.viewer.addHandler('canvas-click', this.commentClickHandler)\r\n                this.openedComment = true\r\n            } else {\r\n                                this.openedComment = false\r\n            }\r\n        },\r\n        commentClickHandler(e) {\r\n            this.$refs.comment.classList += ' visible'\r\n                        this.$nextTick(() => {\r\n                if (this.opened) this.noteBoundsCheck()\r\n            })\r\n        },\r\n        // eslint-disable-next-line no-unused-vars\r\n        onKeyUp(e) {\r\n            if (this.$refs.text.textContent.length) {\r\n                this.empty = false\r\n            } else {\r\n                this.empty = true\r\n            }\r\n        },\r\n        deleteNote() {\r\n            const actionType = this.type === 'mark' ? 'deleteMark' : 'deleteRuler'\r\n            this[actionType]({\r\n                    caseId: this.caseId,\r\n                    fileId: this.fileId,\r\n                    itemId: this.object.id,\r\n                    webinarId: this.isWebinar ? this.$store.state.webinar.id : null\r\n                })\r\n                .then(() => {\r\n                    this.clearComponent()\r\n                    if (this.isWebinar && this.ableToAct) {\r\n                        const action = this.type === 'mark' ? 'deleteMark' : 'deleteRuler'\r\n                        this.$bus.$emit('sendMessage', {\r\n                            action: action,\r\n                            data: {\r\n                                id: this.object.id\r\n                            }\r\n                        })\r\n                    }\r\n                })\r\n                .catch(console.error)\r\n        },\r\n        editNote() {\r\n            const actionType = this.type === 'mark' ? 'editMark' : 'editRuler'\r\n            const item = { ...this.object }\r\n            let text = this.$refs.text.textContent.trim()\r\n            item.text = text\r\n            this.$refs.text.textContent = text\r\n            this[actionType]({\r\n                    caseId: this.caseId,\r\n                    fileId: this.fileId,\r\n                    itemId: this.object.id,\r\n                    item,\r\n                    webinarId: this.isWebinar ? this.$store.state.webinar.id : null\r\n                })\r\n                .then(() => {\r\n                    // eslint-disable-next-line vue/no-mutating-props\r\n                    this.object.text = text\r\n                    \r\n                        this.$bus.$emit('sendMessage', {\r\n                            action: actionType,\r\n                            data: {\r\n                                id: this.object.id,\r\n                                text\r\n                            }\r\n                        })\r\n                    \r\n                })\r\n                .catch(console.error)\r\n        },\r\n        editMark() {\r\n            this.$emit('noteOpened', this.object.id)\r\n            this.opened = true\r\n            this.$nextTick(() => {\r\n                if (this.opened) this.noteBoundsCheck()\r\n            })\r\n        },\r\n        toggleOpened(sendBusMessage = true) {\r\n            console.log(this.parent, 'toggleOpened')            // hack with loosing z-index context during rotation\r\n            this.opened ? this.parent.style.zIndex = '' : this.parent.style.zIndex = 1\r\n            this.opened = !this.opened\r\n            this.opened ? this.parent.style.zIndex = 2 : this.parent.style.zIndex = 1\r\n            this.$nextTick(() => {\r\n                if (this.opened) this.noteBoundsCheck()\r\n            })\r\n            // this.$emit('noteOpened', this.object.id)\r\n            if (sendBusMessage) this.$bus.$emit('noteOpened', this.object.id)\r\n\r\n                const action = this.type === 'mark' ? 'toggleMark' : 'toggleRuler'\r\n                this.$bus.$emit('sendMessage', {\r\n                    action: action,\r\n                    data: {\r\n                        primary: this.primary,\r\n                        id: this.object.id,\r\n                        opened: true,\r\n                        isNewInterface: true\r\n                    }\r\n                })\r\n            \r\n        },\r\n        // eslint-disable-next-line no-unused-vars\r\n        downHandler(e) {\r\n            if (this.ableToAct) {\r\n                this.viewer.addHandler('canvas-drag', this.moveHandler)\r\n                this.viewer.addHandler('canvas-release', this.upHandler)\r\n            }\r\n        },\r\n        upHandler(e) {\r\n            if (this.$refs.comment && !this.$refs.comment.contains(e.originalEvent.target)) {\r\n                this.opened = false\r\n                this.parent.style.zIndex = 1\r\n\r\n                    const action = this.type === 'mark' ? 'toggleMark' : 'toggleRuler'\r\n                    this.$bus.$emit('sendMessage', {\r\n                        action: action,\r\n                        data: {\r\n                            primary: this.primary,\r\n                            id: this.object.id,\r\n                            opened: false\r\n                        }\r\n                    })\r\n                \r\n            }\r\n        },\r\n        // eslint-disable-next-line no-unused-vars\r\n        moveHandler(e) {\r\n            this.viewer.removeHandler('canvas-release', this.upHandler)\r\n        },\r\n        clearComponent() {\r\n            this.$el.remove()\r\n            this.$destroy()\r\n            if (this.type === 'ruler') {\r\n                let rulerPoints = Array.from(document.querySelectorAll(`.ruler-point[data-id=\"${this.object.id}\"]`))\r\n                rulerPoints.forEach(point => this.viewer.removeOverlay(point))\r\n                const line = document.getElementById(this.object.id)\r\n                line.remove()\r\n            }\r\n        },\r\n        noteBoundsCheck() {\r\n            // data prepare\r\n            console.log(this.object)\r\n            const coords = this.object.endPoint ?\r\n                { x: this.object.endPoint.ip.x, y: this.object.endPoint.ip.y } :\r\n                { x: this.object.x, y: this.object.y }\r\n                console.log(coords)\r\n                                console.log(this.viewer.viewport)\r\n            const pointOpensea = new OpenSeadragon.Point({x: coords.x, y: coords.y})\r\n            const point = this.viewer.viewport.imageToWindowCoordinates(pointOpensea)\r\n            const viewerBounds = this.viewer.container.getBoundingClientRect()\r\n            const formBounds = {\r\n                width: 300 + 20,\r\n                height: 250 + 20\r\n            }\r\n\r\n            // replace comment form\r\n            const defaultStyles = {\r\n                top: `20px`,\r\n                left: `-320px`,\r\n                transform: 'rotate(' + (this.viewer.viewport.getRotation() * -1) + 'deg)'\r\n            }\r\n            if ((point.x - formBounds.width < viewerBounds.left) && (point.y + formBounds.height > viewerBounds.bottom)) {\r\n                defaultStyles.top = `${-formBounds.height}px`\r\n                defaultStyles.left = `30px`\r\n            } else if (point.x - formBounds.width < viewerBounds.left) {\r\n                defaultStyles.top = `40px`\r\n                defaultStyles.left = `40px`\r\n            } else if (point.y + formBounds.height > viewerBounds.bottom) {\r\n                defaultStyles.top = `${-formBounds.height}px`\r\n            }\r\n            this.commentStyles = defaultStyles\r\n            if (this.$refs.ruler) this.$refs.ruler.style.transform = defaultStyles.transform\r\n        },\r\n        busToggleNote(msg) {\r\n            if (this.primary === msg.primary && this.object.id === msg.id) {\r\n                this.opened = msg.opened\r\n                this.$nextTick(() => {\r\n                    if (this.opened) this.noteBoundsCheck()\r\n                })\r\n            }\r\n        },\r\n        busDeleteNote(msg) {\r\n            if (this.object.id === msg.id) {\r\n                const mutationName = msg.type === 'mark' ? 'DELETE_MARK' : 'DELETE_RULER'\r\n                this.clearComponent()\r\n                this.$store.commit(mutationName, {\r\n                    fileId: this.fileId,\r\n                    itemId: msg.id\r\n                })\r\n            }\r\n        },\r\n        busEditNote(msg) {\r\n            if (this.object.id === msg.id) {\r\n                const mutationName = msg.type === 'mark' ? 'EDIT_MARK' : 'EDIT_RULER'\r\n                const item = { ...this.object }\r\n                item.text = msg.text\r\n                this.$store.commit(mutationName, {\r\n                    fileId: this.fileId,\r\n                    item\r\n                })\r\n            }\r\n        },\r\n        closeOnOtherOpen(id) {\r\n            if ((this.opened && this.object.id !== id) || (!this.opened && this.object.id === id)) this.toggleOpened(false)\r\n        },\r\n        // eslint-disable-next-line no-unused-vars\r\n        preventHandler(e) {\r\n\r\n        },\r\n        ...mapActions(['deleteMark', 'deleteRuler', 'editMark', 'editRuler'])\r\n    },\r\n    mounted() {\r\n\r\n        // document.getElementsByClassName('comment-form').addEventListener('click')\r\n        // const rulerLength = document.getElementById(`${this.object.id}`)[0]\r\n        // rulerLength.addEventListener('click', this.toggleOpened(true))\r\n        // this.viewer.addHandler('canvas-click', this.toggleOpened(true))\r\n        // 'canvas-click'\r\n        // document.getElementsByClassName(`${this.object.id}`).addHandler('click', this.toggleOpened(true))\r\n        // detects if clicked on another note container or canvas\r\n        this.$nextTick(() => {\r\n            this.viewer.addHandler('canvas-press', this.downHandler)\r\n            this.parent.style.zIndex = 1\r\n            if (this.openOnCreate) this.toggleOpened()\r\n            this.$nextTick(() => {\r\n                if (this.opened) this.noteBoundsCheck()\r\n            })\r\n// this.$emit('noteOpened', this.closeOnOtherOpen)\r\n            this.$bus.$on('toggleNote', this.busToggleNote)\r\n            this.$bus.$on('deleteNote', this.busDeleteNote)\r\n            this.$bus.$on('editNote', this.busEditNote)\r\n            this.$bus.$on('noteOpened', this.closeOnOtherOpen)\r\n        })\r\n    },\r\n    beforeDestroy() {\r\n        this.viewer.removeHandler('canvas-press', this.downHandler)\r\n        this.viewer.removeHandler('canvas-release', this.upHandler)\r\n\r\n        this.$bus.$off('toggleNote', this.busToggleNote)\r\n        this.$bus.$off('deleteNote', this.busDeleteNote)\r\n        this.$bus.$off('editNote', this.busEditNote)\r\n        this.$bus.$off('noteOpened', this.closeOnOtherOpen)\r\n    }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n// @import \"src/globals.scss\";\r\n.note-container {\r\n    position: relative;\r\n        top: 32px;\r\n    width: 40px;\r\n    height: 40px;\r\n    background: transparent;\r\n    border-radius: 30px;\r\n    opacity: 1;\r\n    color: white;\r\n    font-weight: 900;\r\n    text-align: center;\r\n    border: white 5px solid;\r\n    border-style: solid;\r\n    cursor: grab;\r\n    z-index: 4;\r\n}\r\n\r\n.comment-form {\r\ndisplay: none;\r\n    background-color: rgb(255, 255, 255);\r\n    border-radius: 20px;\r\n    width: 350px;\r\n    position: absolute;\r\n    pointer-events: all;\r\n    z-index: 2;\r\n    overflow: hidden;\r\n    color: black;\r\n    font-weight: 600;\r\n    border: 4px solid;\r\n    border-style: double;\r\n}\r\n\r\n.comment-form.visible {\r\n    display: block;\r\n}\r\n\r\n.comment-author {\r\n    display: inline-flex;\r\n    justify-content: flex-start;\r\n    align-items: center;\r\n    width: 100%;\r\n    padding: 0 15px;\r\n    padding-top: 10px;\r\n    margin-bottom: 10px;\r\n    width: 100%;\r\n}\r\n\r\n.comment-author .avatar {\r\n    background-repeat: no-repeat;\r\n    background-size: contain;\r\n}\r\n\r\n.comment-author .avatar.default {\r\n    // background-image: url(/static/icons/default_avatar.svg);\r\n    background-color: #d6d6d6;\r\n    background-size: contain;\r\n}\r\n\r\n.comment-author .name {\r\n    margin-left: 10px;\r\n    color: #000000;\r\n}\r\n\r\n.editor-container {\r\n    padding: 0 15px;\r\n    width: 100%;\r\n}\r\n\r\n.comment-form .editor {\r\n    width: 100%;\r\n    margin-bottom: 10px;\r\n    min-height: 21px;\r\n}\r\n\r\n.editor.center-placeholder {\r\n    text-align: center;\r\n}\r\n\r\n.editor .text[contenteditable] {\r\n    outline: 0;\r\n    white-space: pre-wrap;\r\n}\r\n\r\n.editor .focused {\r\n    display: block;\r\n}\r\n\r\n.editor .placeholder {\r\n    color: #ABB5BB;\r\n    pointer-events: none;\r\n}\r\n\r\n.comment-form .date {\r\n    // // include fontCaption;\r\n    width: 100%;\r\n    text-align: right;\r\n    color: #041823;\r\n    padding: 0 0;\r\n    margin-bottom: 10px;\r\n}\r\n\r\n.comment-form .delete-comment {\r\n    width: 30%;\r\n    padding: 10px;\r\n    opacity: .7;\r\n    transition: opacity .3s ease;\r\n}\r\n\r\n.comment-form .delete-comment:hover {\r\n    opacity: 1;\r\n}\r\n</style>\r\n\r\n"]},"metadata":{},"sourceType":"module"}