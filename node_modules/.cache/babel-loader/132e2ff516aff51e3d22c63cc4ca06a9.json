{"ast":null,"code":"'use strict';\n\nconst mqtt = require('mqtt');\n\nclass AsyncClient {\n  constructor(client) {\n    this._client = client;\n  }\n\n  set handleMessage(newHandler) {\n    this._client.handleMessage = newHandler;\n  }\n\n  get handleMessage() {\n    return this._client.handleMessage;\n  }\n\n  get connected() {\n    return this._client.connected;\n  }\n\n  get reconnecting() {\n    return this._client.reconnecting;\n  }\n\n  publish(...args) {\n    return new Promise((resolve, reject) => {\n      this._client.publish(...args, (err, result) => {\n        if (err) reject(err);else resolve(result);\n      });\n    });\n  }\n\n  subscribe(...args) {\n    return new Promise((resolve, reject) => {\n      this._client.subscribe(...args, (err, result) => {\n        if (err) reject(err);else resolve(result);\n      });\n    });\n  }\n\n  unsubscribe(...args) {\n    return new Promise((resolve, reject) => {\n      this._client.unsubscribe(...args, (err, result) => {\n        if (err) reject(err);else resolve(result);\n      });\n    });\n  }\n\n  end(...args) {\n    return new Promise((resolve, reject) => {\n      this._client.end(...args, (err, result) => {\n        if (err) reject(err);else resolve(result);\n      });\n    });\n  }\n\n  reconnect(...args) {\n    return this._client.reconnect(...args);\n  }\n\n  addListener(...args) {\n    return this._client.addListener(...args);\n  }\n\n  emit(...args) {\n    return this._client.emit(...args);\n  }\n\n  eventNames(...args) {\n    return this._client.eventNames(...args);\n  }\n\n  getLastMessageId(...args) {\n    return this._client.getLastMessageId(...args);\n  }\n\n  getMaxListeners(...args) {\n    return this._client.getMaxListeners(...args);\n  }\n\n  listenerCount(...args) {\n    return this._client.listenerCount(...args);\n  }\n\n  listeners(...args) {\n    return this._client.listeners(...args);\n  }\n\n  off(...args) {\n    return this._client.off(...args);\n  }\n\n  on(...args) {\n    return this._client.on(...args);\n  }\n\n  once(...args) {\n    return this._client.once(...args);\n  }\n\n  prependListener(...args) {\n    return this._client.prependListener(...args);\n  }\n\n  prependOnceListener(...args) {\n    return this._client.prependOnceListener(...args);\n  }\n\n  rawListeners(...args) {\n    return this._client.rawListeners(...args);\n  }\n\n  removeAllListeners(...args) {\n    return this._client.removeAllListeners(...args);\n  }\n\n  removeListener(...args) {\n    return this._client.removeListener(...args);\n  }\n\n  removeOutgoingMessage(...args) {\n    return this._client.removeOutgoingMessage(...args);\n  }\n\n  setMaxListeners(...args) {\n    return this._client.setMaxListeners(...args);\n  }\n\n}\n\nmodule.exports = {\n  connect(brokerURL, opts) {\n    const client = mqtt.connect(brokerURL, opts);\n    const asyncClient = new AsyncClient(client);\n    return asyncClient;\n  },\n\n  connectAsync(brokerURL, opts, allowRetries = true) {\n    const client = mqtt.connect(brokerURL, opts);\n    const asyncClient = new AsyncClient(client);\n    return new Promise((resolve, reject) => {\n      // Listeners added to client to trigger promise resolution\n      const promiseResolutionListeners = {\n        connect: connack => {\n          removePromiseResolutionListeners();\n          resolve(asyncClient); // Resolve on connect\n        },\n        end: () => {\n          removePromiseResolutionListeners();\n          resolve(asyncClient); // Resolve on end\n        },\n        error: err => {\n          removePromiseResolutionListeners();\n          client.end();\n          reject(err); // Reject on error\n        }\n      }; // If retries are not allowed, reject on close\n\n      if (false === allowRetries) {\n        promiseResolutionListeners.close = () => {\n          promiseResolutionListeners.error('Couldn\\'t connect to server');\n        };\n      } // Remove listeners added to client by this promise\n\n\n      function removePromiseResolutionListeners() {\n        Object.keys(promiseResolutionListeners).forEach(eventName => {\n          client.removeListener(eventName, promiseResolutionListeners[eventName]);\n        });\n      }\n\n      ; // Add listeners to client\n\n      Object.keys(promiseResolutionListeners).forEach(eventName => {\n        client.on(eventName, promiseResolutionListeners[eventName]);\n      });\n    });\n  },\n\n  AsyncClient\n};","map":{"version":3,"names":["mqtt","require","AsyncClient","constructor","client","_client","handleMessage","newHandler","connected","reconnecting","publish","args","Promise","resolve","reject","err","result","subscribe","unsubscribe","end","reconnect","addListener","emit","eventNames","getLastMessageId","getMaxListeners","listenerCount","listeners","off","on","once","prependListener","prependOnceListener","rawListeners","removeAllListeners","removeListener","removeOutgoingMessage","setMaxListeners","module","exports","connect","brokerURL","opts","asyncClient","connectAsync","allowRetries","promiseResolutionListeners","connack","removePromiseResolutionListeners","error","close","Object","keys","forEach","eventName"],"sources":["C:/Users/Danil/Desktop/project1/node_modules/async-mqtt/index.js"],"sourcesContent":["'use strict'\n\nconst mqtt = require('mqtt');\n\nclass AsyncClient {\n  constructor (client) {\n    this._client = client;\n  }\n\n  set handleMessage (newHandler) {\n    this._client.handleMessage = newHandler;\n  }\n\n  get handleMessage () {\n    return this._client.handleMessage;\n  }\n\n  get connected () {\n    return this._client.connected;\n  }\n\n  get reconnecting () {\n    return this._client.reconnecting;\n  }\n\n  publish (...args) {\n    return new Promise((resolve, reject) => {\n      this._client.publish(...args, (err, result) => {\n        if (err) reject(err)\n        else resolve(result)\n      })\n    })\n  }\n\n  subscribe (...args) {\n    return new Promise((resolve, reject) => {\n      this._client.subscribe(...args, (err, result) => {\n        if (err) reject(err)\n        else resolve(result)\n      })\n    })\n  }\n\n  unsubscribe (...args) {\n    return new Promise((resolve, reject) => {\n      this._client.unsubscribe(...args, (err, result) => {\n        if (err) reject(err)\n        else resolve(result)\n      })\n    })\n  }\n\n  end (...args) {\n    return new Promise((resolve, reject) => {\n      this._client.end(...args, (err, result) => {\n        if (err) reject(err)\n        else resolve(result)\n      })\n    })\n  }\n\n  reconnect (...args) {\n    return this._client.reconnect(...args);\n  }\n\n  addListener (...args) {\n    return this._client.addListener(...args);\n  }\n\n  emit (...args) {\n    return this._client.emit(...args);\n  }\n\n  eventNames (...args) {\n    return this._client.eventNames(...args);\n  }\n\n  getLastMessageId (...args) {\n    return this._client.getLastMessageId(...args);\n  }\n\n  getMaxListeners (...args) {\n    return this._client.getMaxListeners(...args);\n  }\n\n  listenerCount (...args) {\n    return this._client.listenerCount(...args);\n  }\n\n  listeners (...args) {\n    return this._client.listeners(...args);\n  }\n\n  off (...args) {\n    return this._client.off(...args);\n  }\n\n  on (...args) {\n    return this._client.on(...args);\n  }\n\n  once (...args) {\n    return this._client.once(...args);\n  }\n\n  prependListener (...args) {\n    return this._client.prependListener(...args);\n  }\n\n  prependOnceListener (...args) {\n    return this._client.prependOnceListener(...args);\n  }\n\n  rawListeners (...args) {\n    return this._client.rawListeners(...args);\n  }\n\n  removeAllListeners (...args) {\n    return this._client.removeAllListeners(...args);\n  }\n\n  removeListener (...args) {\n    return this._client.removeListener(...args);\n  }\n\n  removeOutgoingMessage (...args) {\n    return this._client.removeOutgoingMessage(...args);\n  }\n\n  setMaxListeners (...args) {\n    return this._client.setMaxListeners(...args);\n  }\n\n}\n\n\nmodule.exports = {\n  connect (brokerURL, opts) {\n    const client = mqtt.connect(brokerURL, opts);\n    const asyncClient = new AsyncClient(client);\n  \n    return asyncClient;\n  },\n  connectAsync (brokerURL, opts, allowRetries=true) {\n    const client = mqtt.connect(brokerURL, opts);\n    const asyncClient = new AsyncClient(client);\n\n    return new Promise((resolve, reject) => {\n      // Listeners added to client to trigger promise resolution\n      const promiseResolutionListeners = {\n        connect: (connack) => {\n          removePromiseResolutionListeners();\n          resolve(asyncClient);   // Resolve on connect\n        },\n        end: () => {\n          removePromiseResolutionListeners();\n          resolve(asyncClient);   // Resolve on end\n        },\n        error: (err) => {\n          removePromiseResolutionListeners();\n          client.end();\n          reject(err);            // Reject on error\n        }\n      };\n\n      // If retries are not allowed, reject on close\n      if (false === allowRetries) {\n        promiseResolutionListeners.close = () => {\n          promiseResolutionListeners.error('Couldn\\'t connect to server');\n        }\n      }\n\n      // Remove listeners added to client by this promise\n      function removePromiseResolutionListeners () {\n        Object.keys(promiseResolutionListeners).forEach((eventName) => {\n          client.removeListener(eventName, promiseResolutionListeners[eventName]);\n        });\n      };\n\n      // Add listeners to client\n      Object.keys(promiseResolutionListeners).forEach((eventName) => {\n        client.on(eventName, promiseResolutionListeners[eventName]);\n      });\n    });\n  },\n  AsyncClient\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}