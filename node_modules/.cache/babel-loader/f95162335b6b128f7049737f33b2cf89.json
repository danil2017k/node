{"ast":null,"code":"require(\"core-js/modules/es.error.cause.js\");\n\n/* eslint-disable */\n\n/*\r\n * This software was developed at the National Institute of Standards and\r\n * Technology by employees of the Federal Government in the course of\r\n * their official duties. Pursuant to title 17 Section 105 of the United\r\n * States Code this software is not subject to copyright protection and is\r\n * in the public domain. This software is an experimental system. NIST assumes\r\n * no responsibility whatsoever for its use by other parties, and makes no\r\n * guarantees, expressed or implied, about its quality, reliability, or\r\n * any other characteristic. We would appreciate acknowledgement if the\r\n * software is used.\r\n */\n\n/**\r\n *\r\n * @author Antoine Vandecreme <antoine.vandecreme@nist.gov>\r\n */\n(function ($) {\n  if (!$.version || $.version.major < 2) {\n    throw new Error('This version of OpenSeadragonScalebar requires ' + 'OpenSeadragon version 2.0.0+');\n  }\n\n  $.Viewer.prototype.scalebar = function (options) {\n    if (!this.scalebarInstance) {\n      options = options || {};\n      options.viewer = this;\n      this.scalebarInstance = new $.Scalebar(options);\n    } else {\n      this.scalebarInstance.refresh(options);\n    }\n  };\n\n  $.ScalebarType = {\n    NONE: 0,\n    MICROSCOPY: 1,\n    MAP: 2\n  };\n  $.ScalebarLocation = {\n    NONE: 0,\n    TOP_LEFT: 1,\n    TOP_RIGHT: 2,\n    BOTTOM_RIGHT: 3,\n    BOTTOM_LEFT: 4\n  };\n  /**\r\n   *\r\n   * @class Scalebar\r\n   * @param {Object} options\r\n   * @param {OpenSeadragon.Viewer} options.viewer The viewer to attach this\r\n   * Scalebar to.\r\n   * @param {OpenSeadragon.ScalebarType} options.type The scale bar type.\r\n   * Default: microscopy\r\n   * @param {Integer} options.pixelsPerMeter The pixels per meter of the\r\n   * zoomable image at the original image size. If null, the scale bar is not\r\n   * displayed. default: null\r\n   * @param {Integer} options.referenceItemIdx Specify the item from\r\n   * viewer.world to which options.pixelsPerMeter is refering.\r\n   * default: 0\r\n   * @param (String} options.minWidth The minimal width of the scale bar as a\r\n   * CSS string (ex: 100px, 1em, 1% etc...) default: 150px\r\n   * @param {OpenSeadragon.ScalebarLocation} options.location The location\r\n   * of the scale bar inside the viewer. default: bottom left\r\n   * @param {Integer} options.xOffset Offset location of the scale bar along x.\r\n   * default: 5\r\n   * @param {Integer} options.yOffset Offset location of the scale bar along y.\r\n   * default: 5\r\n   * @param {Boolean} options.stayInsideImage When set to true, keep the\r\n   * scale bar inside the image when zooming out. default: true\r\n   * @param {String} options.color The color of the scale bar using a color\r\n   * name or the hexadecimal format (ex: black or #000000) default: black\r\n   * @param {String} options.fontColor The font color. default: black\r\n   * @param {String} options.backgroundColor The background color. default: none\r\n   * @param {String} options.fontSize The font size. default: not set\r\n   * @param {String} options.barThickness The thickness of the scale bar in px.\r\n   * default: 2\r\n   * @param {function} options.sizeAndTextRenderer A function which will be\r\n   * called to determine the size of the scale bar and it's text content.\r\n   * The function must have 2 parameters: the PPM at the current zoom level\r\n   * and the minimum size of the scale bar. It must return an object containing\r\n   * 2 attributes: size and text containing the size of the scale bar and the text.\r\n   * default: $.ScalebarSizeAndTextRenderer.METRIC_LENGTH\r\n   */\n\n  $.Scalebar = function (options) {\n    options = options || {};\n\n    if (!options.viewer) {\n      throw new Error(\"A viewer must be specified.\");\n    }\n\n    this.viewer = options.viewer;\n    this.divElt = document.createElement(\"div\");\n    this.viewer.container.appendChild(this.divElt);\n    this.divElt.style.position = \"relative\";\n    this.divElt.style.margin = \"0\";\n    this.divElt.style.pointerEvents = \"none\";\n    this.setMinWidth(options.minWidth || \"150px\");\n    this.setDrawScalebarFunction(options.type || $.ScalebarType.MICROSCOPY);\n    this.color = options.color || \"black\";\n    this.fontColor = options.fontColor || \"black\";\n    this.backgroundColor = options.backgroundColor || \"none\";\n    this.fontSize = options.fontSize || \"\";\n    this.barThickness = options.barThickness || 2;\n    this.pixelsPerMeter = options.pixelsPerMeter || null;\n    this.referenceItemIdx = options.referenceItemIdx || 0;\n    this.location = options.location || $.ScalebarLocation.BOTTOM_LEFT;\n    this.xOffset = options.xOffset || 5;\n    this.yOffset = options.yOffset || 5;\n    this.stayInsideImage = isDefined(options.stayInsideImage) ? options.stayInsideImage : true;\n    this.sizeAndTextRenderer = options.sizeAndTextRenderer || $.ScalebarSizeAndTextRenderer.METRIC_LENGTH;\n    var self = this;\n    this.viewer.addHandler(\"open\", function () {\n      self.refresh();\n    });\n    this.viewer.addHandler(\"animation\", function () {\n      self.refresh();\n    });\n    this.viewer.addHandler(\"resize\", function () {\n      self.refresh();\n    });\n  };\n\n  $.Scalebar.prototype = {\n    updateOptions: function (options) {\n      if (!options) {\n        return;\n      }\n\n      if (isDefined(options.type)) {\n        this.setDrawScalebarFunction(options.type);\n      }\n\n      if (isDefined(options.minWidth)) {\n        this.setMinWidth(options.minWidth);\n      }\n\n      if (isDefined(options.color)) {\n        this.color = options.color;\n      }\n\n      if (isDefined(options.fontColor)) {\n        this.fontColor = options.fontColor;\n      }\n\n      if (isDefined(options.backgroundColor)) {\n        this.backgroundColor = options.backgroundColor;\n      }\n\n      if (isDefined(options.fontSize)) {\n        this.fontSize = options.fontSize;\n      }\n\n      if (isDefined(options.barThickness)) {\n        this.barThickness = options.barThickness;\n      }\n\n      if (isDefined(options.pixelsPerMeter)) {\n        this.pixelsPerMeter = options.pixelsPerMeter;\n      }\n\n      if (isDefined(options.referenceItemIdx)) {\n        this.referenceItemIdx = options.referenceItemIdx;\n      }\n\n      if (isDefined(options.location)) {\n        this.location = options.location;\n      }\n\n      if (isDefined(options.xOffset)) {\n        this.xOffset = options.xOffset;\n      }\n\n      if (isDefined(options.yOffset)) {\n        this.yOffset = options.yOffset;\n      }\n\n      if (isDefined(options.stayInsideImage)) {\n        this.stayInsideImage = options.stayInsideImage;\n      }\n\n      if (isDefined(options.sizeAndTextRenderer)) {\n        this.sizeAndTextRenderer = options.sizeAndTextRenderer;\n      }\n    },\n    setDrawScalebarFunction: function (type) {\n      if (!type) {\n        this.drawScalebar = null;\n      } else if (type === $.ScalebarType.MAP) {\n        this.drawScalebar = this.drawMapScalebar;\n      } else {\n        this.drawScalebar = this.drawMicroscopyScalebar;\n      }\n    },\n    setMinWidth: function (minWidth) {\n      this.divElt.style.width = minWidth; // Make sure to display the element before getting is width\n\n      this.divElt.style.display = \"\";\n      this.minWidth = this.divElt.offsetWidth;\n    },\n\n    /**\r\n     * Refresh the scalebar with the options submitted.\r\n     * @param {Object} options\r\n     * @param {OpenSeadragon.ScalebarType} options.type The scale bar type.\r\n     * Default: microscopy\r\n     * @param {Integer} options.pixelsPerMeter The pixels per meter of the\r\n     * zoomable image at the original image size. If null, the scale bar is not\r\n     * displayed. default: null\r\n     * @param {Integer} options.referenceItemIdx Specify the item from\r\n     * viewer.world to which options.pixelsPerMeter is refering.\r\n     * default: 0\r\n     * @param (String} options.minWidth The minimal width of the scale bar as a\r\n     * CSS string (ex: 100px, 1em, 1% etc...) default: 150px\r\n     * @param {OpenSeadragon.ScalebarLocation} options.location The location\r\n     * of the scale bar inside the viewer. default: bottom left\r\n     * @param {Integer} options.xOffset Offset location of the scale bar along x.\r\n     * default: 5\r\n     * @param {Integer} options.yOffset Offset location of the scale bar along y.\r\n     * default: 5\r\n     * @param {Boolean} options.stayInsideImage When set to true, keep the\r\n     * scale bar inside the image when zooming out. default: true\r\n     * @param {String} options.color The color of the scale bar using a color\r\n     * name or the hexadecimal format (ex: black or #000000) default: black\r\n     * @param {String} options.fontColor The font color. default: black\r\n     * @param {String} options.backgroundColor The background color. default: none\r\n     * @param {String} options.fontSize The font size. default: not set\r\n     * @param {String} options.barThickness The thickness of the scale bar in px.\r\n     * default: 2\r\n     * @param {function} options.sizeAndTextRenderer A function which will be\r\n     * called to determine the size of the scale bar and it's text content.\r\n     * The function must have 2 parameters: the PPM at the current zoom level\r\n     * and the minimum size of the scale bar. It must return an object containing\r\n     * 2 attributes: size and text containing the size of the scale bar and the text.\r\n     * default: $.ScalebarSizeAndTextRenderer.METRIC_LENGTH\r\n     */\n    refresh: function (options) {\n      this.updateOptions(options);\n\n      if (!this.viewer.isOpen() || !this.drawScalebar || !this.pixelsPerMeter || !this.location) {\n        this.divElt.style.display = \"none\";\n        return;\n      }\n\n      this.divElt.style.display = \"\";\n      var viewport = this.viewer.viewport;\n      var tiledImage = this.viewer.world.getItemAt(this.referenceItemIdx);\n      var zoom = tiledImageViewportToImageZoom(tiledImage, viewport.getZoom(true));\n      var currentPPM = zoom * this.pixelsPerMeter;\n      var props = this.sizeAndTextRenderer(currentPPM, this.minWidth);\n      this.drawScalebar(props.size, props.text);\n      var location = this.getScalebarLocation();\n      this.divElt.style.left = location.x + \"px\";\n      this.divElt.style.top = location.y + \"px\";\n    },\n    drawMicroscopyScalebar: function (size, text) {\n      this.divElt.style.fontSize = this.fontSize;\n      this.divElt.style.textAlign = \"center\";\n      this.divElt.style.color = this.fontColor;\n      this.divElt.style.border = \"none\";\n      this.divElt.style.borderBottom = this.barThickness + \"px solid \" + this.color;\n      this.divElt.style.backgroundColor = this.backgroundColor;\n      this.divElt.innerHTML = text;\n      this.divElt.style.width = size + \"px\";\n    },\n    drawMapScalebar: function (size, text) {\n      this.divElt.style.fontSize = this.fontSize;\n      this.divElt.style.textAlign = \"center\";\n      this.divElt.style.color = this.fontColor;\n      this.divElt.style.border = this.barThickness + \"px solid \" + this.color;\n      this.divElt.style.borderTop = \"none\";\n      this.divElt.style.backgroundColor = this.backgroundColor;\n      this.divElt.innerHTML = text;\n      this.divElt.style.width = size + \"px\";\n    },\n\n    /**\r\n     * Compute the location of the scale bar.\r\n     * @returns {OpenSeadragon.Point}\r\n     */\n    getScalebarLocation: function () {\n      if (this.location === $.ScalebarLocation.TOP_LEFT) {\n        var x = 0;\n        var y = 0;\n\n        if (this.stayInsideImage) {\n          var pixel = this.viewer.viewport.pixelFromPoint(new $.Point(0, 0), true);\n\n          if (!this.viewer.wrapHorizontal) {\n            x = Math.max(pixel.x, 0);\n          }\n\n          if (!this.viewer.wrapVertical) {\n            y = Math.max(pixel.y, 0);\n          }\n        }\n\n        return new $.Point(x + this.xOffset, y + this.yOffset);\n      }\n\n      if (this.location === $.ScalebarLocation.TOP_RIGHT) {\n        var barWidth = this.divElt.offsetWidth;\n        var container = this.viewer.container;\n        var x = container.offsetWidth - barWidth;\n        var y = 0;\n\n        if (this.stayInsideImage) {\n          var pixel = this.viewer.viewport.pixelFromPoint(new $.Point(1, 0), true);\n\n          if (!this.viewer.wrapHorizontal) {\n            x = Math.min(x, pixel.x - barWidth);\n          }\n\n          if (!this.viewer.wrapVertical) {\n            y = Math.max(y, pixel.y);\n          }\n        }\n\n        return new $.Point(x - this.xOffset, y + this.yOffset);\n      }\n\n      if (this.location === $.ScalebarLocation.BOTTOM_RIGHT) {\n        var barWidth = this.divElt.offsetWidth;\n        var barHeight = this.divElt.offsetHeight;\n        var container = this.viewer.container;\n        var x = container.offsetWidth - barWidth;\n        var y = container.offsetHeight - barHeight;\n\n        if (this.stayInsideImage) {\n          var pixel = this.viewer.viewport.pixelFromPoint(new $.Point(1, 1 / this.viewer.source.aspectRatio), true);\n\n          if (!this.viewer.wrapHorizontal) {\n            x = Math.min(x, pixel.x - barWidth);\n          }\n\n          if (!this.viewer.wrapVertical) {\n            y = Math.min(y, pixel.y - barHeight);\n          }\n        }\n\n        return new $.Point(x - this.xOffset, y - this.yOffset);\n      }\n\n      if (this.location === $.ScalebarLocation.BOTTOM_LEFT) {\n        var barHeight = this.divElt.offsetHeight;\n        var container = this.viewer.container;\n        var x = 0;\n        var y = container.offsetHeight - barHeight;\n\n        if (this.stayInsideImage) {\n          var pixel = this.viewer.viewport.pixelFromPoint(new $.Point(0, 1 / this.viewer.source.aspectRatio), true);\n\n          if (!this.viewer.wrapHorizontal) {\n            x = Math.max(x, pixel.x);\n          }\n\n          if (!this.viewer.wrapVertical) {\n            y = Math.min(y, pixel.y - barHeight);\n          }\n        }\n\n        return new $.Point(x + this.xOffset, y - this.yOffset);\n      }\n    },\n\n    /**\r\n     * Get the rendered scalebar in a canvas.\r\n     * @returns {Element} A canvas containing the scalebar representation\r\n     */\n    getAsCanvas: function () {\n      var canvas = document.createElement(\"canvas\");\n      canvas.width = this.divElt.offsetWidth;\n      canvas.height = this.divElt.offsetHeight;\n      var context = canvas.getContext(\"2d\");\n      context.fillStyle = this.backgroundColor;\n      context.fillRect(0, 0, canvas.width, canvas.height);\n      context.fillStyle = this.color;\n      context.fillRect(0, canvas.height - this.barThickness, canvas.width, canvas.height);\n\n      if (this.drawScalebar === this.drawMapScalebar) {\n        context.fillRect(0, 0, this.barThickness, canvas.height);\n        context.fillRect(canvas.width - this.barThickness, 0, this.barThickness, canvas.height);\n      }\n\n      context.font = window.getComputedStyle(this.divElt).font;\n      context.textAlign = \"center\";\n      context.textBaseline = \"middle\";\n      context.fillStyle = this.fontColor;\n      var hCenter = canvas.width / 2;\n      var vCenter = canvas.height / 2;\n      context.fillText(this.divElt.textContent, hCenter, vCenter);\n      return canvas;\n    },\n\n    /**\r\n     * Get a copy of the current OpenSeadragon canvas with the scalebar.\r\n     * @returns {Element} A canvas containing a copy of the current OpenSeadragon canvas with the scalebar\r\n     */\n    getImageWithScalebarAsCanvas: function () {\n      var imgCanvas = this.viewer.drawer.canvas;\n      var newCanvas = document.createElement(\"canvas\");\n      newCanvas.width = imgCanvas.width;\n      newCanvas.height = imgCanvas.height;\n      var newCtx = newCanvas.getContext(\"2d\");\n      newCtx.drawImage(imgCanvas, 0, 0);\n      var scalebarCanvas = this.getAsCanvas();\n      var location = this.getScalebarLocation();\n      newCtx.drawImage(scalebarCanvas, location.x, location.y);\n      return newCanvas;\n    }\n  };\n  $.ScalebarSizeAndTextRenderer = {\n    /**\r\n     * Metric length. From nano meters to kilometers.\r\n     */\n    METRIC_LENGTH: function (ppm, minSize) {\n      return getScalebarSizeAndTextForMetric(ppm, minSize, \"m\");\n    },\n\n    /**\r\n     * Imperial length. Choosing the best unit from thou, inch, foot and mile.\r\n     */\n    IMPERIAL_LENGTH: function (ppm, minSize) {\n      var maxSize = minSize * 2;\n      var ppi = ppm * 0.0254;\n\n      if (maxSize < ppi * 12) {\n        if (maxSize < ppi) {\n          var ppt = ppi / 1000;\n          return getScalebarSizeAndText(ppt, minSize, \"th\");\n        }\n\n        return getScalebarSizeAndText(ppi, minSize, \"in\");\n      }\n\n      var ppf = ppi * 12;\n\n      if (maxSize < ppf * 2000) {\n        return getScalebarSizeAndText(ppf, minSize, \"ft\");\n      }\n\n      var ppmi = ppf * 5280;\n      return getScalebarSizeAndText(ppmi, minSize, \"mi\");\n    },\n\n    /**\r\n     * Standard time. Choosing the best unit from second (and metric divisions),\r\n     * minute, hour, day and year.\r\n     */\n    STANDARD_TIME: function (pps, minSize) {\n      var maxSize = minSize * 2;\n\n      if (maxSize < pps * 60) {\n        return getScalebarSizeAndTextForMetric(pps, minSize, \"s\", false);\n      }\n\n      var ppminutes = pps * 60;\n\n      if (maxSize < ppminutes * 60) {\n        return getScalebarSizeAndText(ppminutes, minSize, \"minute\", true);\n      }\n\n      var pph = ppminutes * 60;\n\n      if (maxSize < pph * 24) {\n        return getScalebarSizeAndText(pph, minSize, \"hour\", true);\n      }\n\n      var ppd = pph * 24;\n\n      if (maxSize < ppd * 365.25) {\n        return getScalebarSizeAndText(ppd, minSize, \"day\", true);\n      }\n\n      var ppy = ppd * 365.25;\n      return getScalebarSizeAndText(ppy, minSize, \"year\", true);\n    },\n\n    /**\r\n     * Generic metric unit. One can use this function to create a new metric\r\n     * scale. For example, here is an implementation of energy levels:\r\n     * function(ppeV, minSize) {\r\n     *   return OpenSeadragon.ScalebarSizeAndTextRenderer.METRIC_GENERIC(\r\n     *           ppeV, minSize, \"eV\");\r\n     * }\r\n     */\n    METRIC_GENERIC: getScalebarSizeAndTextForMetric\n  }; // Missing TiledImage.viewportToImageZoom function in OSD 2.0.0\n\n  function tiledImageViewportToImageZoom(tiledImage, viewportZoom) {\n    var ratio = tiledImage._scaleSpring.current.value * tiledImage.viewport._containerInnerSize.x / tiledImage.source.dimensions.x;\n    return ratio * viewportZoom;\n  }\n\n  function getScalebarSizeAndText(ppm, minSize, unitSuffix, handlePlural) {\n    var value = normalize(ppm, minSize);\n    var factor = roundSignificand(value / ppm * minSize, 3);\n    var size = value * minSize;\n    var plural = handlePlural && factor > 1 ? \"s\" : \"\";\n    return {\n      size: size,\n      text: factor + \" \" + unitSuffix + plural\n    };\n  }\n\n  function getScalebarSizeAndTextForMetric(ppm, minSize, unitSuffix) {\n    var value = normalize(ppm, minSize);\n    var factor = roundSignificand(value / ppm * minSize, 3);\n    var size = value * minSize;\n    var valueWithUnit = getWithUnit(factor, unitSuffix);\n    return {\n      size: size,\n      text: valueWithUnit\n    };\n  }\n\n  function normalize(value, minSize) {\n    var significand = getSignificand(value);\n    var minSizeSign = getSignificand(minSize);\n    var result = getSignificand(significand / minSizeSign);\n\n    if (result >= 5) {\n      result /= 5;\n    }\n\n    if (result >= 4) {\n      result /= 4;\n    }\n\n    if (result >= 2) {\n      result /= 2;\n    }\n\n    return result;\n  }\n\n  function getSignificand(x) {\n    return x * Math.pow(10, Math.ceil(-log10(x)));\n  }\n\n  function roundSignificand(x, decimalPlaces) {\n    var exponent = -Math.ceil(-log10(x));\n    var power = decimalPlaces - exponent;\n    var significand = x * Math.pow(10, power); // To avoid rounding problems, always work with integers\n\n    if (power < 0) {\n      return Math.round(significand) * Math.pow(10, -power);\n    }\n\n    return Math.round(significand) / Math.pow(10, power);\n  }\n\n  function log10(x) {\n    return Math.log(x) / Math.log(10);\n  }\n\n  function getWithUnit(value, unitSuffix) {\n    if (value < 0.000001) {\n      return value * 1000000000 + \" n\" + unitSuffix;\n    }\n\n    if (value < 0.001) {\n      return value * 1000000 + \" μ\" + unitSuffix;\n    }\n\n    if (value < 1) {\n      return value * 1000 + \" m\" + unitSuffix;\n    }\n\n    if (value >= 1000) {\n      return value / 1000 + \" k\" + unitSuffix;\n    }\n\n    return value + \" \" + unitSuffix;\n  }\n\n  function isDefined(variable) {\n    return typeof variable !== \"undefined\";\n  }\n})(OpenSeadragon); // WEBPACK FOOTER //\n// ./src/libs/openseadragon-scalebar.js","map":{"version":3,"names":["$","version","major","Error","Viewer","prototype","scalebar","options","scalebarInstance","viewer","Scalebar","refresh","ScalebarType","NONE","MICROSCOPY","MAP","ScalebarLocation","TOP_LEFT","TOP_RIGHT","BOTTOM_RIGHT","BOTTOM_LEFT","divElt","document","createElement","container","appendChild","style","position","margin","pointerEvents","setMinWidth","minWidth","setDrawScalebarFunction","type","color","fontColor","backgroundColor","fontSize","barThickness","pixelsPerMeter","referenceItemIdx","location","xOffset","yOffset","stayInsideImage","isDefined","sizeAndTextRenderer","ScalebarSizeAndTextRenderer","METRIC_LENGTH","self","addHandler","updateOptions","drawScalebar","drawMapScalebar","drawMicroscopyScalebar","width","display","offsetWidth","isOpen","viewport","tiledImage","world","getItemAt","zoom","tiledImageViewportToImageZoom","getZoom","currentPPM","props","size","text","getScalebarLocation","left","x","top","y","textAlign","border","borderBottom","innerHTML","borderTop","pixel","pixelFromPoint","Point","wrapHorizontal","Math","max","wrapVertical","barWidth","min","barHeight","offsetHeight","source","aspectRatio","getAsCanvas","canvas","height","context","getContext","fillStyle","fillRect","font","window","getComputedStyle","textBaseline","hCenter","vCenter","fillText","textContent","getImageWithScalebarAsCanvas","imgCanvas","drawer","newCanvas","newCtx","drawImage","scalebarCanvas","ppm","minSize","getScalebarSizeAndTextForMetric","IMPERIAL_LENGTH","maxSize","ppi","ppt","getScalebarSizeAndText","ppf","ppmi","STANDARD_TIME","pps","ppminutes","pph","ppd","ppy","METRIC_GENERIC","viewportZoom","ratio","_scaleSpring","current","value","_containerInnerSize","dimensions","unitSuffix","handlePlural","normalize","factor","roundSignificand","plural","valueWithUnit","getWithUnit","significand","getSignificand","minSizeSign","result","pow","ceil","log10","decimalPlaces","exponent","power","round","log","variable","OpenSeadragon"],"sources":["C:/Users/Danil/Desktop/project1/src/libs/openseadragon-scalebar.js"],"sourcesContent":["/* eslint-disable */\r\n/*\r\n * This software was developed at the National Institute of Standards and\r\n * Technology by employees of the Federal Government in the course of\r\n * their official duties. Pursuant to title 17 Section 105 of the United\r\n * States Code this software is not subject to copyright protection and is\r\n * in the public domain. This software is an experimental system. NIST assumes\r\n * no responsibility whatsoever for its use by other parties, and makes no\r\n * guarantees, expressed or implied, about its quality, reliability, or\r\n * any other characteristic. We would appreciate acknowledgement if the\r\n * software is used.\r\n */\r\n\r\n/**\r\n *\r\n * @author Antoine Vandecreme <antoine.vandecreme@nist.gov>\r\n */\r\n(function($) {\r\n\r\n    if (!$.version || $.version.major < 2) {\r\n        throw new Error('This version of OpenSeadragonScalebar requires ' +\r\n                'OpenSeadragon version 2.0.0+');\r\n    }\r\n\r\n    $.Viewer.prototype.scalebar = function(options) {\r\n        if (!this.scalebarInstance) {\r\n            options = options || {};\r\n            options.viewer = this;\r\n            this.scalebarInstance = new $.Scalebar(options);\r\n        } else {\r\n            this.scalebarInstance.refresh(options);\r\n        }\r\n    };\r\n\r\n    $.ScalebarType = {\r\n        NONE: 0,\r\n        MICROSCOPY: 1,\r\n        MAP: 2\r\n    };\r\n\r\n    $.ScalebarLocation = {\r\n        NONE: 0,\r\n        TOP_LEFT: 1,\r\n        TOP_RIGHT: 2,\r\n        BOTTOM_RIGHT: 3,\r\n        BOTTOM_LEFT: 4\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @class Scalebar\r\n     * @param {Object} options\r\n     * @param {OpenSeadragon.Viewer} options.viewer The viewer to attach this\r\n     * Scalebar to.\r\n     * @param {OpenSeadragon.ScalebarType} options.type The scale bar type.\r\n     * Default: microscopy\r\n     * @param {Integer} options.pixelsPerMeter The pixels per meter of the\r\n     * zoomable image at the original image size. If null, the scale bar is not\r\n     * displayed. default: null\r\n     * @param {Integer} options.referenceItemIdx Specify the item from\r\n     * viewer.world to which options.pixelsPerMeter is refering.\r\n     * default: 0\r\n     * @param (String} options.minWidth The minimal width of the scale bar as a\r\n     * CSS string (ex: 100px, 1em, 1% etc...) default: 150px\r\n     * @param {OpenSeadragon.ScalebarLocation} options.location The location\r\n     * of the scale bar inside the viewer. default: bottom left\r\n     * @param {Integer} options.xOffset Offset location of the scale bar along x.\r\n     * default: 5\r\n     * @param {Integer} options.yOffset Offset location of the scale bar along y.\r\n     * default: 5\r\n     * @param {Boolean} options.stayInsideImage When set to true, keep the\r\n     * scale bar inside the image when zooming out. default: true\r\n     * @param {String} options.color The color of the scale bar using a color\r\n     * name or the hexadecimal format (ex: black or #000000) default: black\r\n     * @param {String} options.fontColor The font color. default: black\r\n     * @param {String} options.backgroundColor The background color. default: none\r\n     * @param {String} options.fontSize The font size. default: not set\r\n     * @param {String} options.barThickness The thickness of the scale bar in px.\r\n     * default: 2\r\n     * @param {function} options.sizeAndTextRenderer A function which will be\r\n     * called to determine the size of the scale bar and it's text content.\r\n     * The function must have 2 parameters: the PPM at the current zoom level\r\n     * and the minimum size of the scale bar. It must return an object containing\r\n     * 2 attributes: size and text containing the size of the scale bar and the text.\r\n     * default: $.ScalebarSizeAndTextRenderer.METRIC_LENGTH\r\n     */\r\n    $.Scalebar = function(options) {\r\n        options = options || {};\r\n        if (!options.viewer) {\r\n            throw new Error(\"A viewer must be specified.\");\r\n        }\r\n        this.viewer = options.viewer;\r\n\r\n        this.divElt = document.createElement(\"div\");\r\n        this.viewer.container.appendChild(this.divElt);\r\n        this.divElt.style.position = \"relative\";\r\n        this.divElt.style.margin = \"0\";\r\n        this.divElt.style.pointerEvents = \"none\";\r\n\r\n        this.setMinWidth(options.minWidth || \"150px\");\r\n\r\n        this.setDrawScalebarFunction(options.type || $.ScalebarType.MICROSCOPY);\r\n        this.color = options.color || \"black\";\r\n        this.fontColor = options.fontColor || \"black\";\r\n        this.backgroundColor = options.backgroundColor || \"none\";\r\n        this.fontSize = options.fontSize || \"\";\r\n        this.barThickness = options.barThickness || 2;\r\n        this.pixelsPerMeter = options.pixelsPerMeter || null;\r\n        this.referenceItemIdx = options.referenceItemIdx || 0;\r\n        this.location = options.location || $.ScalebarLocation.BOTTOM_LEFT;\r\n        this.xOffset = options.xOffset || 5;\r\n        this.yOffset = options.yOffset || 5;\r\n        this.stayInsideImage = isDefined(options.stayInsideImage) ?\r\n                options.stayInsideImage : true;\r\n        this.sizeAndTextRenderer = options.sizeAndTextRenderer ||\r\n                $.ScalebarSizeAndTextRenderer.METRIC_LENGTH;\r\n\r\n        var self = this;\r\n        this.viewer.addHandler(\"open\", function() {\r\n            self.refresh();\r\n        });\r\n        this.viewer.addHandler(\"animation\", function() {\r\n            self.refresh();\r\n        });\r\n        this.viewer.addHandler(\"resize\", function() {\r\n            self.refresh();\r\n        });\r\n    };\r\n\r\n    $.Scalebar.prototype = {\r\n        updateOptions: function(options) {\r\n            if (!options) {\r\n                return;\r\n            }\r\n            if (isDefined(options.type)) {\r\n                this.setDrawScalebarFunction(options.type);\r\n            }\r\n            if (isDefined(options.minWidth)) {\r\n                this.setMinWidth(options.minWidth);\r\n            }\r\n            if (isDefined(options.color)) {\r\n                this.color = options.color;\r\n            }\r\n            if (isDefined(options.fontColor)) {\r\n                this.fontColor = options.fontColor;\r\n            }\r\n            if (isDefined(options.backgroundColor)) {\r\n                this.backgroundColor = options.backgroundColor;\r\n            }\r\n            if (isDefined(options.fontSize)) {\r\n                this.fontSize = options.fontSize;\r\n            }\r\n            if (isDefined(options.barThickness)) {\r\n                this.barThickness = options.barThickness;\r\n            }\r\n            if (isDefined(options.pixelsPerMeter)) {\r\n                this.pixelsPerMeter = options.pixelsPerMeter;\r\n            }\r\n            if (isDefined(options.referenceItemIdx)) {\r\n                this.referenceItemIdx = options.referenceItemIdx;\r\n            }\r\n            if (isDefined(options.location)) {\r\n                this.location = options.location;\r\n            }\r\n            if (isDefined(options.xOffset)) {\r\n                this.xOffset = options.xOffset;\r\n            }\r\n            if (isDefined(options.yOffset)) {\r\n                this.yOffset = options.yOffset;\r\n            }\r\n            if (isDefined(options.stayInsideImage)) {\r\n                this.stayInsideImage = options.stayInsideImage;\r\n            }\r\n            if (isDefined(options.sizeAndTextRenderer)) {\r\n                this.sizeAndTextRenderer = options.sizeAndTextRenderer;\r\n            }\r\n        },\r\n        setDrawScalebarFunction: function(type) {\r\n            if (!type) {\r\n                this.drawScalebar = null;\r\n            }\r\n            else if (type === $.ScalebarType.MAP) {\r\n                this.drawScalebar = this.drawMapScalebar;\r\n            } else {\r\n                this.drawScalebar = this.drawMicroscopyScalebar;\r\n            }\r\n        },\r\n        setMinWidth: function(minWidth) {\r\n            this.divElt.style.width = minWidth;\r\n            // Make sure to display the element before getting is width\r\n            this.divElt.style.display = \"\";\r\n            this.minWidth = this.divElt.offsetWidth;\r\n        },\r\n        /**\r\n         * Refresh the scalebar with the options submitted.\r\n         * @param {Object} options\r\n         * @param {OpenSeadragon.ScalebarType} options.type The scale bar type.\r\n         * Default: microscopy\r\n         * @param {Integer} options.pixelsPerMeter The pixels per meter of the\r\n         * zoomable image at the original image size. If null, the scale bar is not\r\n         * displayed. default: null\r\n         * @param {Integer} options.referenceItemIdx Specify the item from\r\n         * viewer.world to which options.pixelsPerMeter is refering.\r\n         * default: 0\r\n         * @param (String} options.minWidth The minimal width of the scale bar as a\r\n         * CSS string (ex: 100px, 1em, 1% etc...) default: 150px\r\n         * @param {OpenSeadragon.ScalebarLocation} options.location The location\r\n         * of the scale bar inside the viewer. default: bottom left\r\n         * @param {Integer} options.xOffset Offset location of the scale bar along x.\r\n         * default: 5\r\n         * @param {Integer} options.yOffset Offset location of the scale bar along y.\r\n         * default: 5\r\n         * @param {Boolean} options.stayInsideImage When set to true, keep the\r\n         * scale bar inside the image when zooming out. default: true\r\n         * @param {String} options.color The color of the scale bar using a color\r\n         * name or the hexadecimal format (ex: black or #000000) default: black\r\n         * @param {String} options.fontColor The font color. default: black\r\n         * @param {String} options.backgroundColor The background color. default: none\r\n         * @param {String} options.fontSize The font size. default: not set\r\n         * @param {String} options.barThickness The thickness of the scale bar in px.\r\n         * default: 2\r\n         * @param {function} options.sizeAndTextRenderer A function which will be\r\n         * called to determine the size of the scale bar and it's text content.\r\n         * The function must have 2 parameters: the PPM at the current zoom level\r\n         * and the minimum size of the scale bar. It must return an object containing\r\n         * 2 attributes: size and text containing the size of the scale bar and the text.\r\n         * default: $.ScalebarSizeAndTextRenderer.METRIC_LENGTH\r\n         */\r\n        refresh: function(options) {\r\n            this.updateOptions(options);\r\n\r\n            if (!this.viewer.isOpen() ||\r\n                    !this.drawScalebar ||\r\n                    !this.pixelsPerMeter ||\r\n                    !this.location) {\r\n                this.divElt.style.display = \"none\";\r\n                return;\r\n            }\r\n            this.divElt.style.display = \"\";\r\n\r\n            var viewport = this.viewer.viewport;\r\n            var tiledImage = this.viewer.world.getItemAt(this.referenceItemIdx);\r\n            var zoom = tiledImageViewportToImageZoom(tiledImage,\r\n                    viewport.getZoom(true));\r\n            var currentPPM = zoom * this.pixelsPerMeter;\r\n            var props = this.sizeAndTextRenderer(currentPPM, this.minWidth);\r\n\r\n            this.drawScalebar(props.size, props.text);\r\n            var location = this.getScalebarLocation();\r\n            this.divElt.style.left = location.x + \"px\";\r\n            this.divElt.style.top = location.y + \"px\";\r\n        },\r\n        drawMicroscopyScalebar: function(size, text) {\r\n            this.divElt.style.fontSize = this.fontSize;\r\n            this.divElt.style.textAlign = \"center\";\r\n            this.divElt.style.color = this.fontColor;\r\n            this.divElt.style.border = \"none\";\r\n            this.divElt.style.borderBottom = this.barThickness + \"px solid \" + this.color;\r\n            this.divElt.style.backgroundColor = this.backgroundColor;\r\n            this.divElt.innerHTML = text;\r\n            this.divElt.style.width = size + \"px\";\r\n        },\r\n        drawMapScalebar: function(size, text) {\r\n            this.divElt.style.fontSize = this.fontSize;\r\n            this.divElt.style.textAlign = \"center\";\r\n            this.divElt.style.color = this.fontColor;\r\n            this.divElt.style.border = this.barThickness + \"px solid \" + this.color;\r\n            this.divElt.style.borderTop = \"none\";\r\n            this.divElt.style.backgroundColor = this.backgroundColor;\r\n            this.divElt.innerHTML = text;\r\n            this.divElt.style.width = size + \"px\";\r\n        },\r\n        /**\r\n         * Compute the location of the scale bar.\r\n         * @returns {OpenSeadragon.Point}\r\n         */\r\n        getScalebarLocation: function() {\r\n            if (this.location === $.ScalebarLocation.TOP_LEFT) {\r\n                var x = 0;\r\n                var y = 0;\r\n                if (this.stayInsideImage) {\r\n                    var pixel = this.viewer.viewport.pixelFromPoint(\r\n                            new $.Point(0, 0), true);\r\n                    if (!this.viewer.wrapHorizontal) {\r\n                        x = Math.max(pixel.x, 0);\r\n                    }\r\n                    if (!this.viewer.wrapVertical) {\r\n                        y = Math.max(pixel.y, 0);\r\n                    }\r\n                }\r\n                return new $.Point(x + this.xOffset, y + this.yOffset);\r\n            }\r\n            if (this.location === $.ScalebarLocation.TOP_RIGHT) {\r\n                var barWidth = this.divElt.offsetWidth;\r\n                var container = this.viewer.container;\r\n                var x = container.offsetWidth - barWidth;\r\n                var y = 0;\r\n                if (this.stayInsideImage) {\r\n                    var pixel = this.viewer.viewport.pixelFromPoint(\r\n                            new $.Point(1, 0), true);\r\n                    if (!this.viewer.wrapHorizontal) {\r\n                        x = Math.min(x, pixel.x - barWidth);\r\n                    }\r\n                    if (!this.viewer.wrapVertical) {\r\n                        y = Math.max(y, pixel.y);\r\n                    }\r\n                }\r\n                return new $.Point(x - this.xOffset, y + this.yOffset);\r\n            }\r\n            if (this.location === $.ScalebarLocation.BOTTOM_RIGHT) {\r\n                var barWidth = this.divElt.offsetWidth;\r\n                var barHeight = this.divElt.offsetHeight;\r\n                var container = this.viewer.container;\r\n                var x = container.offsetWidth - barWidth;\r\n                var y = container.offsetHeight - barHeight;\r\n                if (this.stayInsideImage) {\r\n                    var pixel = this.viewer.viewport.pixelFromPoint(\r\n                            new $.Point(1, 1 / this.viewer.source.aspectRatio),\r\n                            true);\r\n                    if (!this.viewer.wrapHorizontal) {\r\n                        x = Math.min(x, pixel.x - barWidth);\r\n                    }\r\n                    if (!this.viewer.wrapVertical) {\r\n                        y = Math.min(y, pixel.y - barHeight);\r\n                    }\r\n                }\r\n                return new $.Point(x - this.xOffset, y - this.yOffset);\r\n            }\r\n            if (this.location === $.ScalebarLocation.BOTTOM_LEFT) {\r\n                var barHeight = this.divElt.offsetHeight;\r\n                var container = this.viewer.container;\r\n                var x = 0;\r\n                var y = container.offsetHeight - barHeight;\r\n                if (this.stayInsideImage) {\r\n                    var pixel = this.viewer.viewport.pixelFromPoint(\r\n                            new $.Point(0, 1 / this.viewer.source.aspectRatio),\r\n                            true);\r\n                    if (!this.viewer.wrapHorizontal) {\r\n                        x = Math.max(x, pixel.x);\r\n                    }\r\n                    if (!this.viewer.wrapVertical) {\r\n                        y = Math.min(y, pixel.y - barHeight);\r\n                    }\r\n                }\r\n                return new $.Point(x + this.xOffset, y - this.yOffset);\r\n            }\r\n        },\r\n        /**\r\n         * Get the rendered scalebar in a canvas.\r\n         * @returns {Element} A canvas containing the scalebar representation\r\n         */\r\n        getAsCanvas: function() {\r\n            var canvas = document.createElement(\"canvas\");\r\n            canvas.width = this.divElt.offsetWidth;\r\n            canvas.height = this.divElt.offsetHeight;\r\n            var context = canvas.getContext(\"2d\");\r\n            context.fillStyle = this.backgroundColor;\r\n            context.fillRect(0, 0, canvas.width, canvas.height);\r\n            context.fillStyle = this.color;\r\n            context.fillRect(0, canvas.height - this.barThickness,\r\n                    canvas.width, canvas.height);\r\n            if (this.drawScalebar === this.drawMapScalebar) {\r\n                context.fillRect(0, 0, this.barThickness, canvas.height);\r\n                context.fillRect(canvas.width - this.barThickness, 0,\r\n                        this.barThickness, canvas.height);\r\n            }\r\n            context.font = window.getComputedStyle(this.divElt).font;\r\n            context.textAlign = \"center\";\r\n            context.textBaseline = \"middle\";\r\n            context.fillStyle = this.fontColor;\r\n            var hCenter = canvas.width / 2;\r\n            var vCenter = canvas.height / 2;\r\n            context.fillText(this.divElt.textContent, hCenter, vCenter);\r\n            return canvas;\r\n        },\r\n        /**\r\n         * Get a copy of the current OpenSeadragon canvas with the scalebar.\r\n         * @returns {Element} A canvas containing a copy of the current OpenSeadragon canvas with the scalebar\r\n         */\r\n        getImageWithScalebarAsCanvas: function() {\r\n            var imgCanvas = this.viewer.drawer.canvas;\r\n            var newCanvas = document.createElement(\"canvas\");\r\n            newCanvas.width = imgCanvas.width;\r\n            newCanvas.height = imgCanvas.height;\r\n            var newCtx = newCanvas.getContext(\"2d\");\r\n            newCtx.drawImage(imgCanvas, 0, 0);\r\n            var scalebarCanvas = this.getAsCanvas();\r\n            var location = this.getScalebarLocation();\r\n            newCtx.drawImage(scalebarCanvas, location.x, location.y);\r\n            return newCanvas;\r\n        }\r\n    };\r\n\r\n    $.ScalebarSizeAndTextRenderer = {\r\n        /**\r\n         * Metric length. From nano meters to kilometers.\r\n         */\r\n        METRIC_LENGTH: function(ppm, minSize) {\r\n            return getScalebarSizeAndTextForMetric(ppm, minSize, \"m\");\r\n        },\r\n        /**\r\n         * Imperial length. Choosing the best unit from thou, inch, foot and mile.\r\n         */\r\n        IMPERIAL_LENGTH: function(ppm, minSize) {\r\n            var maxSize = minSize * 2;\r\n            var ppi = ppm * 0.0254;\r\n            if (maxSize < ppi * 12) {\r\n                if (maxSize < ppi) {\r\n                    var ppt = ppi / 1000;\r\n                    return getScalebarSizeAndText(ppt, minSize, \"th\");\r\n                }\r\n                return getScalebarSizeAndText(ppi, minSize, \"in\");\r\n            }\r\n            var ppf = ppi * 12;\r\n            if (maxSize < ppf * 2000) {\r\n                return getScalebarSizeAndText(ppf, minSize, \"ft\");\r\n            }\r\n            var ppmi = ppf * 5280;\r\n            return getScalebarSizeAndText(ppmi, minSize, \"mi\");\r\n        },\r\n        /**\r\n         * Standard time. Choosing the best unit from second (and metric divisions),\r\n         * minute, hour, day and year.\r\n         */\r\n        STANDARD_TIME: function(pps, minSize) {\r\n            var maxSize = minSize * 2;\r\n            if (maxSize < pps * 60) {\r\n                return getScalebarSizeAndTextForMetric(pps, minSize, \"s\", false);\r\n            }\r\n            var ppminutes = pps * 60;\r\n            if (maxSize < ppminutes * 60) {\r\n                return getScalebarSizeAndText(ppminutes, minSize, \"minute\", true);\r\n            }\r\n            var pph = ppminutes * 60;\r\n            if (maxSize < pph * 24) {\r\n                return getScalebarSizeAndText(pph, minSize, \"hour\", true);\r\n            }\r\n            var ppd = pph * 24;\r\n            if (maxSize < ppd * 365.25) {\r\n                return getScalebarSizeAndText(ppd, minSize, \"day\", true);\r\n            }\r\n            var ppy = ppd * 365.25;\r\n            return getScalebarSizeAndText(ppy, minSize, \"year\", true);\r\n        },\r\n        /**\r\n         * Generic metric unit. One can use this function to create a new metric\r\n         * scale. For example, here is an implementation of energy levels:\r\n         * function(ppeV, minSize) {\r\n         *   return OpenSeadragon.ScalebarSizeAndTextRenderer.METRIC_GENERIC(\r\n         *           ppeV, minSize, \"eV\");\r\n         * }\r\n         */\r\n        METRIC_GENERIC: getScalebarSizeAndTextForMetric\r\n    };\r\n\r\n    // Missing TiledImage.viewportToImageZoom function in OSD 2.0.0\r\n    function tiledImageViewportToImageZoom(tiledImage, viewportZoom) {\r\n        var ratio = tiledImage._scaleSpring.current.value *\r\n                tiledImage.viewport._containerInnerSize.x /\r\n                tiledImage.source.dimensions.x;\r\n        return ratio * viewportZoom;\r\n    }\r\n\r\n    function getScalebarSizeAndText(ppm, minSize, unitSuffix, handlePlural) {\r\n        var value = normalize(ppm, minSize);\r\n        var factor = roundSignificand(value / ppm * minSize, 3);\r\n        var size = value * minSize;\r\n        var plural = handlePlural && factor > 1 ? \"s\" : \"\";\r\n        return {\r\n            size: size,\r\n            text: factor + \" \" + unitSuffix + plural\r\n        };\r\n    }\r\n\r\n    function getScalebarSizeAndTextForMetric(ppm, minSize, unitSuffix) {\r\n        var value = normalize(ppm, minSize);\r\n        var factor = roundSignificand(value / ppm * minSize, 3);\r\n        var size = value * minSize;\r\n        var valueWithUnit = getWithUnit(factor, unitSuffix);\r\n        return {\r\n            size: size,\r\n            text: valueWithUnit\r\n        };\r\n    }\r\n\r\n    function normalize(value, minSize) {\r\n        var significand = getSignificand(value);\r\n        var minSizeSign = getSignificand(minSize);\r\n        var result = getSignificand(significand / minSizeSign);\r\n        if (result >= 5) {\r\n            result /= 5;\r\n        }\r\n        if (result >= 4) {\r\n            result /= 4;\r\n        }\r\n        if (result >= 2) {\r\n            result /= 2;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function getSignificand(x) {\r\n        return x * Math.pow(10, Math.ceil(-log10(x)));\r\n    }\r\n\r\n    function roundSignificand(x, decimalPlaces) {\r\n        var exponent = -Math.ceil(-log10(x));\r\n        var power = decimalPlaces - exponent;\r\n        var significand = x * Math.pow(10, power);\r\n        // To avoid rounding problems, always work with integers\r\n        if (power < 0) {\r\n            return Math.round(significand) * Math.pow(10, -power);\r\n        }\r\n        return Math.round(significand) / Math.pow(10, power);\r\n    }\r\n\r\n    function log10(x) {\r\n        return Math.log(x) / Math.log(10);\r\n    }\r\n\r\n    function getWithUnit(value, unitSuffix) {\r\n        if (value < 0.000001) {\r\n            return value * 1000000000 + \" n\" + unitSuffix;\r\n        }\r\n        if (value < 0.001) {\r\n            return value * 1000000 + \" μ\" + unitSuffix;\r\n        }\r\n        if (value < 1) {\r\n            return value * 1000 + \" m\" + unitSuffix;\r\n        }\r\n        if (value >= 1000) {\r\n            return value / 1000 + \" k\" + unitSuffix;\r\n        }\r\n        return value + \" \" + unitSuffix;\r\n    }\r\n\r\n    function isDefined(variable) {\r\n        return typeof (variable) !== \"undefined\";\r\n    }\r\n}(OpenSeadragon));\r\n\r\n\r\n// WEBPACK FOOTER //\r\n// ./src/libs/openseadragon-scalebar.js"],"mappings":"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"},"metadata":{},"sourceType":"script"}