{"ast":null,"code":"'use strict';\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\nconst {\n  Buffer\n} = require('buffer');\n\nconst WS = require('ws');\n\nconst debug = require('debug')('mqttjs:ws');\n\nconst duplexify = require('duplexify');\n\nconst Transform = require('readable-stream').Transform;\n\nconst WSS_OPTIONS = ['rejectUnauthorized', 'ca', 'cert', 'key', 'pfx', 'passphrase']; // eslint-disable-next-line camelcase\n\nconst IS_BROWSER = typeof process !== 'undefined' && process.title === 'browser' || typeof __webpack_require__ === 'function';\n\nfunction buildUrl(opts, client) {\n  let url = opts.protocol + '://' + opts.hostname + ':' + opts.port + opts.path;\n\n  if (typeof opts.transformWsUrl === 'function') {\n    url = opts.transformWsUrl(url, opts, client);\n  }\n\n  return url;\n}\n\nfunction setDefaultOpts(opts) {\n  const options = opts;\n\n  if (!opts.hostname) {\n    options.hostname = 'localhost';\n  }\n\n  if (!opts.port) {\n    if (opts.protocol === 'wss') {\n      options.port = 443;\n    } else {\n      options.port = 80;\n    }\n  }\n\n  if (!opts.path) {\n    options.path = '/';\n  }\n\n  if (!opts.wsOptions) {\n    options.wsOptions = {};\n  }\n\n  if (!IS_BROWSER && opts.protocol === 'wss') {\n    // Add cert/key/ca etc options\n    WSS_OPTIONS.forEach(function (prop) {\n      if (Object.prototype.hasOwnProperty.call(opts, prop) && !Object.prototype.hasOwnProperty.call(opts.wsOptions, prop)) {\n        options.wsOptions[prop] = opts[prop];\n      }\n    });\n  }\n\n  return options;\n}\n\nfunction setDefaultBrowserOpts(opts) {\n  const options = setDefaultOpts(opts);\n\n  if (!options.hostname) {\n    options.hostname = options.host;\n  }\n\n  if (!options.hostname) {\n    // Throwing an error in a Web Worker if no `hostname` is given, because we\n    // can not determine the `hostname` automatically.  If connecting to\n    // localhost, please supply the `hostname` as an argument.\n    if (typeof document === 'undefined') {\n      throw new Error('Could not determine host. Specify host manually.');\n    }\n\n    const parsed = new URL(document.URL);\n    options.hostname = parsed.hostname;\n\n    if (!options.port) {\n      options.port = parsed.port;\n    }\n  } // objectMode should be defined for logic\n\n\n  if (options.objectMode === undefined) {\n    options.objectMode = !(options.binary === true || options.binary === undefined);\n  }\n\n  return options;\n}\n\nfunction createWebSocket(client, url, opts) {\n  debug('createWebSocket');\n  debug('protocol: ' + opts.protocolId + ' ' + opts.protocolVersion);\n  const websocketSubProtocol = opts.protocolId === 'MQIsdp' && opts.protocolVersion === 3 ? 'mqttv3.1' : 'mqtt';\n  debug('creating new Websocket for url: ' + url + ' and protocol: ' + websocketSubProtocol);\n  const socket = new WS(url, [websocketSubProtocol], opts.wsOptions);\n  return socket;\n}\n\nfunction createBrowserWebSocket(client, opts) {\n  const websocketSubProtocol = opts.protocolId === 'MQIsdp' && opts.protocolVersion === 3 ? 'mqttv3.1' : 'mqtt';\n  const url = buildUrl(opts, client);\n  /* global WebSocket */\n\n  const socket = new WebSocket(url, [websocketSubProtocol]);\n  socket.binaryType = 'arraybuffer';\n  return socket;\n}\n\nfunction streamBuilder(client, opts) {\n  debug('streamBuilder');\n  const options = setDefaultOpts(opts);\n  const url = buildUrl(options, client);\n  const socket = createWebSocket(client, url, options);\n  const webSocketStream = WS.createWebSocketStream(socket, options.wsOptions);\n  webSocketStream.url = url;\n  socket.on('close', () => {\n    webSocketStream.destroy();\n  });\n  return webSocketStream;\n}\n\nfunction browserStreamBuilder(client, opts) {\n  debug('browserStreamBuilder');\n  let stream;\n  const options = setDefaultBrowserOpts(opts); // sets the maximum socket buffer size before throttling\n\n  const bufferSize = options.browserBufferSize || 1024 * 512;\n  const bufferTimeout = opts.browserBufferTimeout || 1000;\n  const coerceToBuffer = !opts.objectMode;\n  const socket = createBrowserWebSocket(client, opts);\n  const proxy = buildProxy(opts, socketWriteBrowser, socketEndBrowser);\n\n  if (!opts.objectMode) {\n    proxy._writev = writev;\n  }\n\n  proxy.on('close', () => {\n    socket.close();\n  });\n  const eventListenerSupport = typeof socket.addEventListener !== 'undefined'; // was already open when passed in\n\n  if (socket.readyState === socket.OPEN) {\n    stream = proxy;\n  } else {\n    stream = stream = duplexify(undefined, undefined, opts);\n\n    if (!opts.objectMode) {\n      stream._writev = writev;\n    }\n\n    if (eventListenerSupport) {\n      socket.addEventListener('open', onopen);\n    } else {\n      socket.onopen = onopen;\n    }\n  }\n\n  stream.socket = socket;\n\n  if (eventListenerSupport) {\n    socket.addEventListener('close', onclose);\n    socket.addEventListener('error', onerror);\n    socket.addEventListener('message', onmessage);\n  } else {\n    socket.onclose = onclose;\n    socket.onerror = onerror;\n    socket.onmessage = onmessage;\n  } // methods for browserStreamBuilder\n\n\n  function buildProxy(options, socketWrite, socketEnd) {\n    const proxy = new Transform({\n      objectModeMode: options.objectMode\n    });\n    proxy._write = socketWrite;\n    proxy._flush = socketEnd;\n    return proxy;\n  }\n\n  function onopen() {\n    stream.setReadable(proxy);\n    stream.setWritable(proxy);\n    stream.emit('connect');\n  }\n\n  function onclose() {\n    stream.end();\n    stream.destroy();\n  }\n\n  function onerror(err) {\n    stream.destroy(err);\n  }\n\n  function onmessage(event) {\n    let data = event.data;\n    if (data instanceof ArrayBuffer) data = Buffer.from(data);else data = Buffer.from(data, 'utf8');\n    proxy.push(data);\n  } // this is to be enabled only if objectMode is false\n\n\n  function writev(chunks, cb) {\n    const buffers = new Array(chunks.length);\n\n    for (let i = 0; i < chunks.length; i++) {\n      if (typeof chunks[i].chunk === 'string') {\n        buffers[i] = Buffer.from(chunks[i], 'utf8');\n      } else {\n        buffers[i] = chunks[i].chunk;\n      }\n    }\n\n    this._write(Buffer.concat(buffers), 'binary', cb);\n  }\n\n  function socketWriteBrowser(chunk, enc, next) {\n    if (socket.bufferedAmount > bufferSize) {\n      // throttle data until buffered amount is reduced.\n      setTimeout(socketWriteBrowser, bufferTimeout, chunk, enc, next);\n    }\n\n    if (coerceToBuffer && typeof chunk === 'string') {\n      chunk = Buffer.from(chunk, 'utf8');\n    }\n\n    try {\n      socket.send(chunk);\n    } catch (err) {\n      return next(err);\n    }\n\n    next();\n  }\n\n  function socketEndBrowser(done) {\n    socket.close();\n    done();\n  } // end methods for browserStreamBuilder\n\n\n  return stream;\n}\n\nif (IS_BROWSER) {\n  module.exports = browserStreamBuilder;\n} else {\n  module.exports = streamBuilder;\n}","map":{"version":3,"names":["Buffer","require","WS","debug","duplexify","Transform","WSS_OPTIONS","IS_BROWSER","process","title","__webpack_require__","buildUrl","opts","client","url","protocol","hostname","port","path","transformWsUrl","setDefaultOpts","options","wsOptions","forEach","prop","Object","prototype","hasOwnProperty","call","setDefaultBrowserOpts","host","document","Error","parsed","URL","objectMode","undefined","binary","createWebSocket","protocolId","protocolVersion","websocketSubProtocol","socket","createBrowserWebSocket","WebSocket","binaryType","streamBuilder","webSocketStream","createWebSocketStream","on","destroy","browserStreamBuilder","stream","bufferSize","browserBufferSize","bufferTimeout","browserBufferTimeout","coerceToBuffer","proxy","buildProxy","socketWriteBrowser","socketEndBrowser","_writev","writev","close","eventListenerSupport","addEventListener","readyState","OPEN","onopen","onclose","onerror","onmessage","socketWrite","socketEnd","objectModeMode","_write","_flush","setReadable","setWritable","emit","end","err","event","data","ArrayBuffer","from","push","chunks","cb","buffers","Array","length","i","chunk","concat","enc","next","bufferedAmount","setTimeout","send","done","module","exports"],"sources":["C:/Users/Danil/Desktop/122/node_modules/mqtt/lib/connect/ws.js"],"sourcesContent":["'use strict'\n\nconst { Buffer } = require('buffer')\nconst WS = require('ws')\nconst debug = require('debug')('mqttjs:ws')\nconst duplexify = require('duplexify')\nconst Transform = require('readable-stream').Transform\n\nconst WSS_OPTIONS = [\n  'rejectUnauthorized',\n  'ca',\n  'cert',\n  'key',\n  'pfx',\n  'passphrase'\n]\n// eslint-disable-next-line camelcase\nconst IS_BROWSER = (typeof process !== 'undefined' && process.title === 'browser') || typeof __webpack_require__ === 'function'\nfunction buildUrl (opts, client) {\n  let url = opts.protocol + '://' + opts.hostname + ':' + opts.port + opts.path\n  if (typeof (opts.transformWsUrl) === 'function') {\n    url = opts.transformWsUrl(url, opts, client)\n  }\n  return url\n}\n\nfunction setDefaultOpts (opts) {\n  const options = opts\n  if (!opts.hostname) {\n    options.hostname = 'localhost'\n  }\n  if (!opts.port) {\n    if (opts.protocol === 'wss') {\n      options.port = 443\n    } else {\n      options.port = 80\n    }\n  }\n  if (!opts.path) {\n    options.path = '/'\n  }\n\n  if (!opts.wsOptions) {\n    options.wsOptions = {}\n  }\n  if (!IS_BROWSER && opts.protocol === 'wss') {\n    // Add cert/key/ca etc options\n    WSS_OPTIONS.forEach(function (prop) {\n      if (Object.prototype.hasOwnProperty.call(opts, prop) && !Object.prototype.hasOwnProperty.call(opts.wsOptions, prop)) {\n        options.wsOptions[prop] = opts[prop]\n      }\n    })\n  }\n\n  return options\n}\n\nfunction setDefaultBrowserOpts (opts) {\n  const options = setDefaultOpts(opts)\n\n  if (!options.hostname) {\n    options.hostname = options.host\n  }\n\n  if (!options.hostname) {\n    // Throwing an error in a Web Worker if no `hostname` is given, because we\n    // can not determine the `hostname` automatically.  If connecting to\n    // localhost, please supply the `hostname` as an argument.\n    if (typeof (document) === 'undefined') {\n      throw new Error('Could not determine host. Specify host manually.')\n    }\n    const parsed = new URL(document.URL)\n    options.hostname = parsed.hostname\n\n    if (!options.port) {\n      options.port = parsed.port\n    }\n  }\n\n  // objectMode should be defined for logic\n  if (options.objectMode === undefined) {\n    options.objectMode = !(options.binary === true || options.binary === undefined)\n  }\n\n  return options\n}\n\nfunction createWebSocket (client, url, opts) {\n  debug('createWebSocket')\n  debug('protocol: ' + opts.protocolId + ' ' + opts.protocolVersion)\n  const websocketSubProtocol =\n    (opts.protocolId === 'MQIsdp') && (opts.protocolVersion === 3)\n      ? 'mqttv3.1'\n      : 'mqtt'\n\n  debug('creating new Websocket for url: ' + url + ' and protocol: ' + websocketSubProtocol)\n  const socket = new WS(url, [websocketSubProtocol], opts.wsOptions)\n  return socket\n}\n\nfunction createBrowserWebSocket (client, opts) {\n  const websocketSubProtocol =\n  (opts.protocolId === 'MQIsdp') && (opts.protocolVersion === 3)\n    ? 'mqttv3.1'\n    : 'mqtt'\n\n  const url = buildUrl(opts, client)\n  /* global WebSocket */\n  const socket = new WebSocket(url, [websocketSubProtocol])\n  socket.binaryType = 'arraybuffer'\n  return socket\n}\n\nfunction streamBuilder (client, opts) {\n  debug('streamBuilder')\n  const options = setDefaultOpts(opts)\n  const url = buildUrl(options, client)\n  const socket = createWebSocket(client, url, options)\n  const webSocketStream = WS.createWebSocketStream(socket, options.wsOptions)\n  webSocketStream.url = url\n  socket.on('close', () => { webSocketStream.destroy() })\n  return webSocketStream\n}\n\nfunction browserStreamBuilder (client, opts) {\n  debug('browserStreamBuilder')\n  let stream\n  const options = setDefaultBrowserOpts(opts)\n  // sets the maximum socket buffer size before throttling\n  const bufferSize = options.browserBufferSize || 1024 * 512\n\n  const bufferTimeout = opts.browserBufferTimeout || 1000\n\n  const coerceToBuffer = !opts.objectMode\n\n  const socket = createBrowserWebSocket(client, opts)\n\n  const proxy = buildProxy(opts, socketWriteBrowser, socketEndBrowser)\n\n  if (!opts.objectMode) {\n    proxy._writev = writev\n  }\n  proxy.on('close', () => { socket.close() })\n\n  const eventListenerSupport = (typeof socket.addEventListener !== 'undefined')\n\n  // was already open when passed in\n  if (socket.readyState === socket.OPEN) {\n    stream = proxy\n  } else {\n    stream = stream = duplexify(undefined, undefined, opts)\n    if (!opts.objectMode) {\n      stream._writev = writev\n    }\n\n    if (eventListenerSupport) {\n      socket.addEventListener('open', onopen)\n    } else {\n      socket.onopen = onopen\n    }\n  }\n\n  stream.socket = socket\n\n  if (eventListenerSupport) {\n    socket.addEventListener('close', onclose)\n    socket.addEventListener('error', onerror)\n    socket.addEventListener('message', onmessage)\n  } else {\n    socket.onclose = onclose\n    socket.onerror = onerror\n    socket.onmessage = onmessage\n  }\n\n  // methods for browserStreamBuilder\n\n  function buildProxy (options, socketWrite, socketEnd) {\n    const proxy = new Transform({\n      objectModeMode: options.objectMode\n    })\n\n    proxy._write = socketWrite\n    proxy._flush = socketEnd\n\n    return proxy\n  }\n\n  function onopen () {\n    stream.setReadable(proxy)\n    stream.setWritable(proxy)\n    stream.emit('connect')\n  }\n\n  function onclose () {\n    stream.end()\n    stream.destroy()\n  }\n\n  function onerror (err) {\n    stream.destroy(err)\n  }\n\n  function onmessage (event) {\n    let data = event.data\n    if (data instanceof ArrayBuffer) data = Buffer.from(data)\n    else data = Buffer.from(data, 'utf8')\n    proxy.push(data)\n  }\n\n  // this is to be enabled only if objectMode is false\n  function writev (chunks, cb) {\n    const buffers = new Array(chunks.length)\n    for (let i = 0; i < chunks.length; i++) {\n      if (typeof chunks[i].chunk === 'string') {\n        buffers[i] = Buffer.from(chunks[i], 'utf8')\n      } else {\n        buffers[i] = chunks[i].chunk\n      }\n    }\n\n    this._write(Buffer.concat(buffers), 'binary', cb)\n  }\n\n  function socketWriteBrowser (chunk, enc, next) {\n    if (socket.bufferedAmount > bufferSize) {\n      // throttle data until buffered amount is reduced.\n      setTimeout(socketWriteBrowser, bufferTimeout, chunk, enc, next)\n    }\n\n    if (coerceToBuffer && typeof chunk === 'string') {\n      chunk = Buffer.from(chunk, 'utf8')\n    }\n\n    try {\n      socket.send(chunk)\n    } catch (err) {\n      return next(err)\n    }\n\n    next()\n  }\n\n  function socketEndBrowser (done) {\n    socket.close()\n    done()\n  }\n\n  // end methods for browserStreamBuilder\n\n  return stream\n}\n\nif (IS_BROWSER) {\n  module.exports = browserStreamBuilder\n} else {\n  module.exports = streamBuilder\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}