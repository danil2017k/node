{"ast":null,"code":"\"use strict\";\n\nconst {\n  removeLeadingAndTrailingHTTPWhitespace,\n  removeTrailingHTTPWhitespace,\n  isHTTPWhitespaceChar,\n  solelyContainsHTTPTokenCodePoints,\n  soleyContainsHTTPQuotedStringTokenCodePoints,\n  asciiLowercase,\n  collectAnHTTPQuotedString\n} = require(\"./utils.js\");\n\nmodule.exports = input => {\n  input = removeLeadingAndTrailingHTTPWhitespace(input);\n  let position = 0;\n  let type = \"\";\n\n  while (position < input.length && input[position] !== \"/\") {\n    type += input[position];\n    ++position;\n  }\n\n  if (type.length === 0 || !solelyContainsHTTPTokenCodePoints(type)) {\n    return null;\n  }\n\n  if (position >= input.length) {\n    return null;\n  } // Skips past \"/\"\n\n\n  ++position;\n  let subtype = \"\";\n\n  while (position < input.length && input[position] !== \";\") {\n    subtype += input[position];\n    ++position;\n  }\n\n  subtype = removeTrailingHTTPWhitespace(subtype);\n\n  if (subtype.length === 0 || !solelyContainsHTTPTokenCodePoints(subtype)) {\n    return null;\n  }\n\n  const mimeType = {\n    type: asciiLowercase(type),\n    subtype: asciiLowercase(subtype),\n    parameters: new Map()\n  };\n\n  while (position < input.length) {\n    // Skip past \";\"\n    ++position;\n\n    while (isHTTPWhitespaceChar(input[position])) {\n      ++position;\n    }\n\n    let parameterName = \"\";\n\n    while (position < input.length && input[position] !== \";\" && input[position] !== \"=\") {\n      parameterName += input[position];\n      ++position;\n    }\n\n    parameterName = asciiLowercase(parameterName);\n\n    if (position < input.length) {\n      if (input[position] === \";\") {\n        continue;\n      } // Skip past \"=\"\n\n\n      ++position;\n    }\n\n    let parameterValue = null;\n\n    if (input[position] === \"\\\"\") {\n      [parameterValue, position] = collectAnHTTPQuotedString(input, position);\n\n      while (position < input.length && input[position] !== \";\") {\n        ++position;\n      }\n    } else {\n      parameterValue = \"\";\n\n      while (position < input.length && input[position] !== \";\") {\n        parameterValue += input[position];\n        ++position;\n      }\n\n      parameterValue = removeTrailingHTTPWhitespace(parameterValue);\n\n      if (parameterValue === \"\") {\n        continue;\n      }\n    }\n\n    if (parameterName.length > 0 && solelyContainsHTTPTokenCodePoints(parameterName) && soleyContainsHTTPQuotedStringTokenCodePoints(parameterValue) && !mimeType.parameters.has(parameterName)) {\n      mimeType.parameters.set(parameterName, parameterValue);\n    }\n  }\n\n  return mimeType;\n};","map":{"version":3,"names":["removeLeadingAndTrailingHTTPWhitespace","removeTrailingHTTPWhitespace","isHTTPWhitespaceChar","solelyContainsHTTPTokenCodePoints","soleyContainsHTTPQuotedStringTokenCodePoints","asciiLowercase","collectAnHTTPQuotedString","require","module","exports","input","position","type","length","subtype","mimeType","parameters","Map","parameterName","parameterValue","has","set"],"sources":["C:/Users/Danil/Desktop/project1/node_modules/whatwg-mimetype/lib/parser.js"],"sourcesContent":["\"use strict\";\nconst {\n  removeLeadingAndTrailingHTTPWhitespace,\n  removeTrailingHTTPWhitespace,\n  isHTTPWhitespaceChar,\n  solelyContainsHTTPTokenCodePoints,\n  soleyContainsHTTPQuotedStringTokenCodePoints,\n  asciiLowercase,\n  collectAnHTTPQuotedString\n} = require(\"./utils.js\");\n\nmodule.exports = input => {\n  input = removeLeadingAndTrailingHTTPWhitespace(input);\n\n  let position = 0;\n  let type = \"\";\n  while (position < input.length && input[position] !== \"/\") {\n    type += input[position];\n    ++position;\n  }\n\n  if (type.length === 0 || !solelyContainsHTTPTokenCodePoints(type)) {\n    return null;\n  }\n\n  if (position >= input.length) {\n    return null;\n  }\n\n  // Skips past \"/\"\n  ++position;\n\n  let subtype = \"\";\n  while (position < input.length && input[position] !== \";\") {\n    subtype += input[position];\n    ++position;\n  }\n\n  subtype = removeTrailingHTTPWhitespace(subtype);\n\n  if (subtype.length === 0 || !solelyContainsHTTPTokenCodePoints(subtype)) {\n    return null;\n  }\n\n  const mimeType = {\n    type: asciiLowercase(type),\n    subtype: asciiLowercase(subtype),\n    parameters: new Map()\n  };\n\n  while (position < input.length) {\n    // Skip past \";\"\n    ++position;\n\n    while (isHTTPWhitespaceChar(input[position])) {\n      ++position;\n    }\n\n    let parameterName = \"\";\n    while (position < input.length && input[position] !== \";\" && input[position] !== \"=\") {\n      parameterName += input[position];\n      ++position;\n    }\n    parameterName = asciiLowercase(parameterName);\n\n    if (position < input.length) {\n      if (input[position] === \";\") {\n        continue;\n      }\n\n      // Skip past \"=\"\n      ++position;\n    }\n\n    let parameterValue = null;\n    if (input[position] === \"\\\"\") {\n      [parameterValue, position] = collectAnHTTPQuotedString(input, position);\n\n      while (position < input.length && input[position] !== \";\") {\n        ++position;\n      }\n    } else {\n      parameterValue = \"\";\n      while (position < input.length && input[position] !== \";\") {\n        parameterValue += input[position];\n        ++position;\n      }\n\n      parameterValue = removeTrailingHTTPWhitespace(parameterValue);\n\n      if (parameterValue === \"\") {\n        continue;\n      }\n    }\n\n    if (parameterName.length > 0 &&\n        solelyContainsHTTPTokenCodePoints(parameterName) &&\n        soleyContainsHTTPQuotedStringTokenCodePoints(parameterValue) &&\n        !mimeType.parameters.has(parameterName)) {\n      mimeType.parameters.set(parameterName, parameterValue);\n    }\n  }\n\n  return mimeType;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}