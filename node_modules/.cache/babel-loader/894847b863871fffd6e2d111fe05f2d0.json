{"ast":null,"code":"\"use strict\";\n\nconst whatwgURL = require(\"whatwg-url\");\n\nconst notImplemented = require(\"../../browser/not-implemented.js\");\n\nconst reportException = require(\"../helpers/runtime-script-errors.js\");\n\nconst idlUtils = require(\"../generated/utils.js\");\n\nexports.evaluateJavaScriptURL = (window, urlRecord) => {\n  const urlString = whatwgURL.serializeURL(urlRecord);\n  const encodedScriptSource = urlString.substring(\"javascript:\".length);\n  const scriptSource = Buffer.from(whatwgURL.percentDecodeString(encodedScriptSource)).toString();\n\n  if (window._runScripts === \"dangerously\") {\n    try {\n      return window.eval(scriptSource);\n    } catch (e) {\n      reportException(window, e, urlString);\n    }\n  }\n\n  return undefined;\n}; // https://html.spec.whatwg.org/#navigating-across-documents\n\n\nexports.navigate = (window, newURL, flags) => {\n  // This is NOT a spec-compliant implementation of navigation in any way. It implements a few selective steps that\n  // are nice for jsdom users, regarding hash changes and JavaScript URLs. Full navigation support is being worked on\n  // and will likely require some additional hooks to be implemented.\n  if (!window._document) {\n    return;\n  }\n\n  const document = idlUtils.implForWrapper(window._document);\n  const currentURL = document._URL;\n\n  if (!flags.reloadTriggered && urlEquals(currentURL, newURL, {\n    excludeFragments: true\n  })) {\n    if (newURL.fragment !== currentURL.fragment) {\n      navigateToFragment(window, newURL, flags);\n    }\n\n    return;\n  } // NOT IMPLEMENTED: Prompt to unload the active document of browsingContext.\n  // NOT IMPLEMENTED: form submission algorithm\n  // const navigationType = 'other';\n  // NOT IMPLEMENTED: if resource is a response...\n\n\n  if (newURL.scheme === \"javascript\") {\n    setTimeout(() => {\n      const result = exports.evaluateJavaScriptURL(window, newURL);\n\n      if (typeof result === \"string\") {\n        notImplemented(\"string results from 'javascript:' URLs\", window);\n      }\n    }, 0);\n    return;\n  }\n\n  navigateFetch(window);\n}; // https://html.spec.whatwg.org/#scroll-to-fragid\n\n\nfunction navigateToFragment(window, newURL, flags) {\n  const document = idlUtils.implForWrapper(window._document);\n\n  window._sessionHistory.clearHistoryTraversalTasks();\n\n  if (!flags.replacement) {\n    // handling replacement=true here deviates from spec, but matches real browser behaviour\n    // see https://github.com/whatwg/html/issues/2796 for spec bug\n    window._sessionHistory.removeAllEntriesAfterCurrentEntry();\n  }\n\n  const newEntry = {\n    document,\n    url: newURL\n  };\n\n  window._sessionHistory.addEntryAfterCurrentEntry(newEntry);\n\n  window._sessionHistory.traverseHistory(newEntry, {\n    nonBlockingEvents: true,\n    replacement: flags.replacement\n  });\n} // https://html.spec.whatwg.org/#process-a-navigate-fetch\n\n\nfunction navigateFetch(window) {\n  // TODO:\n  notImplemented(\"navigation (except hash changes)\", window);\n} // https://url.spec.whatwg.org/#concept-url-equals\n\n\nfunction urlEquals(a, b, flags) {\n  const serializedA = whatwgURL.serializeURL(a, flags.excludeFragments);\n  const serializedB = whatwgURL.serializeURL(b, flags.excludeFragments);\n  return serializedA === serializedB;\n}","map":{"version":3,"names":["whatwgURL","require","notImplemented","reportException","idlUtils","exports","evaluateJavaScriptURL","window","urlRecord","urlString","serializeURL","encodedScriptSource","substring","length","scriptSource","Buffer","from","percentDecodeString","toString","_runScripts","eval","e","undefined","navigate","newURL","flags","_document","document","implForWrapper","currentURL","_URL","reloadTriggered","urlEquals","excludeFragments","fragment","navigateToFragment","scheme","setTimeout","result","navigateFetch","_sessionHistory","clearHistoryTraversalTasks","replacement","removeAllEntriesAfterCurrentEntry","newEntry","url","addEntryAfterCurrentEntry","traverseHistory","nonBlockingEvents","a","b","serializedA","serializedB"],"sources":["C:/Users/Danil/Desktop/project1/node_modules/jsdom/lib/jsdom/living/window/navigation.js"],"sourcesContent":["\"use strict\";\nconst whatwgURL = require(\"whatwg-url\");\nconst notImplemented = require(\"../../browser/not-implemented.js\");\nconst reportException = require(\"../helpers/runtime-script-errors.js\");\nconst idlUtils = require(\"../generated/utils.js\");\n\nexports.evaluateJavaScriptURL = (window, urlRecord) => {\n  const urlString = whatwgURL.serializeURL(urlRecord);\n  const encodedScriptSource = urlString.substring(\"javascript:\".length);\n  const scriptSource = Buffer.from(whatwgURL.percentDecodeString(encodedScriptSource)).toString();\n  if (window._runScripts === \"dangerously\") {\n    try {\n      return window.eval(scriptSource);\n    } catch (e) {\n      reportException(window, e, urlString);\n    }\n  }\n  return undefined;\n};\n\n// https://html.spec.whatwg.org/#navigating-across-documents\nexports.navigate = (window, newURL, flags) => {\n  // This is NOT a spec-compliant implementation of navigation in any way. It implements a few selective steps that\n  // are nice for jsdom users, regarding hash changes and JavaScript URLs. Full navigation support is being worked on\n  // and will likely require some additional hooks to be implemented.\n  if (!window._document) {\n    return;\n  }\n\n  const document = idlUtils.implForWrapper(window._document);\n  const currentURL = document._URL;\n\n  if (!flags.reloadTriggered && urlEquals(currentURL, newURL, { excludeFragments: true })) {\n    if (newURL.fragment !== currentURL.fragment) {\n      navigateToFragment(window, newURL, flags);\n    }\n    return;\n  }\n\n  // NOT IMPLEMENTED: Prompt to unload the active document of browsingContext.\n\n  // NOT IMPLEMENTED: form submission algorithm\n  // const navigationType = 'other';\n\n  // NOT IMPLEMENTED: if resource is a response...\n  if (newURL.scheme === \"javascript\") {\n    setTimeout(() => {\n      const result = exports.evaluateJavaScriptURL(window, newURL);\n      if (typeof result === \"string\") {\n        notImplemented(\"string results from 'javascript:' URLs\", window);\n      }\n    }, 0);\n    return;\n  }\n  navigateFetch(window);\n};\n\n// https://html.spec.whatwg.org/#scroll-to-fragid\nfunction navigateToFragment(window, newURL, flags) {\n  const document = idlUtils.implForWrapper(window._document);\n\n  window._sessionHistory.clearHistoryTraversalTasks();\n\n  if (!flags.replacement) {\n    // handling replacement=true here deviates from spec, but matches real browser behaviour\n    // see https://github.com/whatwg/html/issues/2796 for spec bug\n    window._sessionHistory.removeAllEntriesAfterCurrentEntry();\n  }\n  const newEntry = { document, url: newURL };\n  window._sessionHistory.addEntryAfterCurrentEntry(newEntry);\n  window._sessionHistory.traverseHistory(newEntry, { nonBlockingEvents: true, replacement: flags.replacement });\n}\n\n// https://html.spec.whatwg.org/#process-a-navigate-fetch\nfunction navigateFetch(window) {\n  // TODO:\n  notImplemented(\"navigation (except hash changes)\", window);\n}\n\n// https://url.spec.whatwg.org/#concept-url-equals\nfunction urlEquals(a, b, flags) {\n  const serializedA = whatwgURL.serializeURL(a, flags.excludeFragments);\n  const serializedB = whatwgURL.serializeURL(b, flags.excludeFragments);\n  return serializedA === serializedB;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}