{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\nconst {\n  asciiLowercase,\n  solelyContainsHTTPTokenCodePoints,\n  soleyContainsHTTPQuotedStringTokenCodePoints\n} = require(\"./utils.js\");\n\nmodule.exports = class MIMETypeParameters {\n  constructor(map) {\n    this._map = map;\n  }\n\n  get size() {\n    return this._map.size;\n  }\n\n  get(name) {\n    name = asciiLowercase(String(name));\n    return this._map.get(name);\n  }\n\n  has(name) {\n    name = asciiLowercase(String(name));\n    return this._map.has(name);\n  }\n\n  set(name, value) {\n    name = asciiLowercase(String(name));\n    value = String(value);\n\n    if (!solelyContainsHTTPTokenCodePoints(name)) {\n      throw new Error(`Invalid MIME type parameter name \"${name}\": only HTTP token code points are valid.`);\n    }\n\n    if (!soleyContainsHTTPQuotedStringTokenCodePoints(value)) {\n      throw new Error(`Invalid MIME type parameter value \"${value}\": only HTTP quoted-string token code points are ` + `valid.`);\n    }\n\n    return this._map.set(name, value);\n  }\n\n  clear() {\n    this._map.clear();\n  }\n\n  delete(name) {\n    name = asciiLowercase(String(name));\n    return this._map.delete(name);\n  }\n\n  forEach(callbackFn, thisArg) {\n    this._map.forEach(callbackFn, thisArg);\n  }\n\n  keys() {\n    return this._map.keys();\n  }\n\n  values() {\n    return this._map.values();\n  }\n\n  entries() {\n    return this._map.entries();\n  }\n\n  [Symbol.iterator]() {\n    return this._map[Symbol.iterator]();\n  }\n\n};","map":{"version":3,"names":["asciiLowercase","solelyContainsHTTPTokenCodePoints","soleyContainsHTTPQuotedStringTokenCodePoints","require","module","exports","MIMETypeParameters","constructor","map","_map","size","get","name","String","has","set","value","Error","clear","delete","forEach","callbackFn","thisArg","keys","values","entries","Symbol","iterator"],"sources":["C:/Users/Danil/Desktop/project1/node_modules/whatwg-mimetype/lib/mime-type-parameters.js"],"sourcesContent":["\"use strict\";\nconst {\n  asciiLowercase,\n  solelyContainsHTTPTokenCodePoints,\n  soleyContainsHTTPQuotedStringTokenCodePoints\n} = require(\"./utils.js\");\n\nmodule.exports = class MIMETypeParameters {\n  constructor(map) {\n    this._map = map;\n  }\n\n  get size() {\n    return this._map.size;\n  }\n\n  get(name) {\n    name = asciiLowercase(String(name));\n    return this._map.get(name);\n  }\n\n  has(name) {\n    name = asciiLowercase(String(name));\n    return this._map.has(name);\n  }\n\n  set(name, value) {\n    name = asciiLowercase(String(name));\n    value = String(value);\n\n    if (!solelyContainsHTTPTokenCodePoints(name)) {\n      throw new Error(`Invalid MIME type parameter name \"${name}\": only HTTP token code points are valid.`);\n    }\n    if (!soleyContainsHTTPQuotedStringTokenCodePoints(value)) {\n      throw new Error(`Invalid MIME type parameter value \"${value}\": only HTTP quoted-string token code points are ` +\n                      `valid.`);\n    }\n\n    return this._map.set(name, value);\n  }\n\n  clear() {\n    this._map.clear();\n  }\n\n  delete(name) {\n    name = asciiLowercase(String(name));\n    return this._map.delete(name);\n  }\n\n  forEach(callbackFn, thisArg) {\n    this._map.forEach(callbackFn, thisArg);\n  }\n\n  keys() {\n    return this._map.keys();\n  }\n\n  values() {\n    return this._map.values();\n  }\n\n  entries() {\n    return this._map.entries();\n  }\n\n  [Symbol.iterator]() {\n    return this._map[Symbol.iterator]();\n  }\n};\n"],"mappings":"AAAA;;;;AACA,MAAM;EACJA,cADI;EAEJC,iCAFI;EAGJC;AAHI,IAIFC,OAAO,CAAC,YAAD,CAJX;;AAMAC,MAAM,CAACC,OAAP,GAAiB,MAAMC,kBAAN,CAAyB;EACxCC,WAAW,CAACC,GAAD,EAAM;IACf,KAAKC,IAAL,GAAYD,GAAZ;EACD;;EAEO,IAAJE,IAAI,GAAG;IACT,OAAO,KAAKD,IAAL,CAAUC,IAAjB;EACD;;EAEDC,GAAG,CAACC,IAAD,EAAO;IACRA,IAAI,GAAGZ,cAAc,CAACa,MAAM,CAACD,IAAD,CAAP,CAArB;IACA,OAAO,KAAKH,IAAL,CAAUE,GAAV,CAAcC,IAAd,CAAP;EACD;;EAEDE,GAAG,CAACF,IAAD,EAAO;IACRA,IAAI,GAAGZ,cAAc,CAACa,MAAM,CAACD,IAAD,CAAP,CAArB;IACA,OAAO,KAAKH,IAAL,CAAUK,GAAV,CAAcF,IAAd,CAAP;EACD;;EAEDG,GAAG,CAACH,IAAD,EAAOI,KAAP,EAAc;IACfJ,IAAI,GAAGZ,cAAc,CAACa,MAAM,CAACD,IAAD,CAAP,CAArB;IACAI,KAAK,GAAGH,MAAM,CAACG,KAAD,CAAd;;IAEA,IAAI,CAACf,iCAAiC,CAACW,IAAD,CAAtC,EAA8C;MAC5C,MAAM,IAAIK,KAAJ,CAAW,qCAAoCL,IAAK,2CAApD,CAAN;IACD;;IACD,IAAI,CAACV,4CAA4C,CAACc,KAAD,CAAjD,EAA0D;MACxD,MAAM,IAAIC,KAAJ,CAAW,sCAAqCD,KAAM,mDAA5C,GACC,QADX,CAAN;IAED;;IAED,OAAO,KAAKP,IAAL,CAAUM,GAAV,CAAcH,IAAd,EAAoBI,KAApB,CAAP;EACD;;EAEDE,KAAK,GAAG;IACN,KAAKT,IAAL,CAAUS,KAAV;EACD;;EAEDC,MAAM,CAACP,IAAD,EAAO;IACXA,IAAI,GAAGZ,cAAc,CAACa,MAAM,CAACD,IAAD,CAAP,CAArB;IACA,OAAO,KAAKH,IAAL,CAAUU,MAAV,CAAiBP,IAAjB,CAAP;EACD;;EAEDQ,OAAO,CAACC,UAAD,EAAaC,OAAb,EAAsB;IAC3B,KAAKb,IAAL,CAAUW,OAAV,CAAkBC,UAAlB,EAA8BC,OAA9B;EACD;;EAEDC,IAAI,GAAG;IACL,OAAO,KAAKd,IAAL,CAAUc,IAAV,EAAP;EACD;;EAEDC,MAAM,GAAG;IACP,OAAO,KAAKf,IAAL,CAAUe,MAAV,EAAP;EACD;;EAEDC,OAAO,GAAG;IACR,OAAO,KAAKhB,IAAL,CAAUgB,OAAV,EAAP;EACD;;EAEe,CAAfC,MAAM,CAACC,QAAQ,IAAI;IAClB,OAAO,KAAKlB,IAAL,CAAUiB,MAAM,CAACC,QAAjB,GAAP;EACD;;AA7DuC,CAA1C"},"metadata":{},"sourceType":"script"}