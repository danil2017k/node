{"ast":null,"code":"\"use strict\";\n\nconst DOMException = require(\"domexception/webidl2js-wrapper\");\n\nconst EventTargetImpl = require(\"../events/EventTarget-impl\").implementation;\n\nconst {\n  simultaneousIterators\n} = require(\"../../utils\");\n\nconst NODE_TYPE = require(\"../node-type\");\n\nconst NODE_DOCUMENT_POSITION = require(\"../node-document-position\");\n\nconst {\n  clone,\n  locateNamespacePrefix,\n  locateNamespace\n} = require(\"../node\");\n\nconst {\n  setAnExistingAttributeValue\n} = require(\"../attributes\");\n\nconst NodeList = require(\"../generated/NodeList\");\n\nconst {\n  nodeRoot,\n  nodeLength,\n  isInclusiveAncestor\n} = require(\"../helpers/node\");\n\nconst {\n  domSymbolTree\n} = require(\"../helpers/internal-constants\");\n\nconst {\n  documentBaseURLSerialized\n} = require(\"../helpers/document-base-url\");\n\nconst {\n  queueTreeMutationRecord\n} = require(\"../helpers/mutation-observers\");\n\nconst {\n  enqueueCECallbackReaction,\n  tryUpgradeElement\n} = require(\"../helpers/custom-elements\");\n\nconst {\n  isShadowRoot,\n  shadowIncludingRoot,\n  assignSlot,\n  assignSlotableForTree,\n  assignSlotable,\n  signalSlotChange,\n  isSlot,\n  shadowIncludingInclusiveDescendantsIterator,\n  shadowIncludingDescendantsIterator\n} = require(\"../helpers/shadow-dom\");\n\nfunction nodeEquals(a, b) {\n  if (a.nodeType !== b.nodeType) {\n    return false;\n  }\n\n  switch (a.nodeType) {\n    case NODE_TYPE.DOCUMENT_TYPE_NODE:\n      if (a.name !== b.name || a.publicId !== b.publicId || a.systemId !== b.systemId) {\n        return false;\n      }\n\n      break;\n\n    case NODE_TYPE.ELEMENT_NODE:\n      if (a._namespaceURI !== b._namespaceURI || a._prefix !== b._prefix || a._localName !== b._localName || a._attributes.length !== b._attributes.length) {\n        return false;\n      }\n\n      break;\n\n    case NODE_TYPE.ATTRIBUTE_NODE:\n      if (a._namespace !== b._namespace || a._localName !== b._localName || a._value !== b._value) {\n        return false;\n      }\n\n      break;\n\n    case NODE_TYPE.PROCESSING_INSTRUCTION_NODE:\n      if (a._target !== b._target || a._data !== b._data) {\n        return false;\n      }\n\n      break;\n\n    case NODE_TYPE.TEXT_NODE:\n    case NODE_TYPE.COMMENT_NODE:\n      if (a._data !== b._data) {\n        return false;\n      }\n\n      break;\n  }\n\n  if (a.nodeType === NODE_TYPE.ELEMENT_NODE && !attributeListsEqual(a, b)) {\n    return false;\n  }\n\n  for (const nodes of simultaneousIterators(domSymbolTree.childrenIterator(a), domSymbolTree.childrenIterator(b))) {\n    if (!nodes[0] || !nodes[1]) {\n      // mismatch in the amount of childNodes\n      return false;\n    }\n\n    if (!nodeEquals(nodes[0], nodes[1])) {\n      return false;\n    }\n  }\n\n  return true;\n} // Needed by https://dom.spec.whatwg.org/#concept-node-equals\n\n\nfunction attributeListsEqual(elementA, elementB) {\n  const listA = elementA._attributeList;\n  const listB = elementB._attributeList;\n  const lengthA = listA.length;\n  const lengthB = listB.length;\n\n  if (lengthA !== lengthB) {\n    return false;\n  }\n\n  for (let i = 0; i < lengthA; ++i) {\n    const attrA = listA[i];\n\n    if (!listB.some(attrB => nodeEquals(attrA, attrB))) {\n      return false;\n    }\n  }\n\n  return true;\n} // https://dom.spec.whatwg.org/#concept-tree-host-including-inclusive-ancestor\n\n\nfunction isHostInclusiveAncestor(nodeImplA, nodeImplB) {\n  for (const ancestor of domSymbolTree.ancestorsIterator(nodeImplB)) {\n    if (ancestor === nodeImplA) {\n      return true;\n    }\n  }\n\n  const rootImplB = nodeRoot(nodeImplB);\n\n  if (rootImplB._host) {\n    return isHostInclusiveAncestor(nodeImplA, rootImplB._host);\n  }\n\n  return false;\n}\n\nclass NodeImpl extends EventTargetImpl {\n  constructor(globalObject, args, privateData) {\n    super(globalObject, args, privateData);\n    domSymbolTree.initialize(this);\n    this._ownerDocument = privateData.ownerDocument;\n    this._childNodesList = null;\n    this._childrenList = null;\n    this._version = 0;\n    this._memoizedQueries = {};\n    this._registeredObserverList = [];\n    this._referencedRanges = new Set();\n  }\n\n  _getTheParent() {\n    if (this._assignedSlot) {\n      return this._assignedSlot;\n    }\n\n    return domSymbolTree.parent(this);\n  }\n\n  get parentNode() {\n    return domSymbolTree.parent(this);\n  }\n\n  getRootNode(options) {\n    return options.composed ? shadowIncludingRoot(this) : nodeRoot(this);\n  }\n\n  get nodeName() {\n    switch (this.nodeType) {\n      case NODE_TYPE.ELEMENT_NODE:\n        return this.tagName;\n\n      case NODE_TYPE.ATTRIBUTE_NODE:\n        return this._qualifiedName;\n\n      case NODE_TYPE.TEXT_NODE:\n        return \"#text\";\n\n      case NODE_TYPE.CDATA_SECTION_NODE:\n        return \"#cdata-section\";\n\n      case NODE_TYPE.PROCESSING_INSTRUCTION_NODE:\n        return this.target;\n\n      case NODE_TYPE.COMMENT_NODE:\n        return \"#comment\";\n\n      case NODE_TYPE.DOCUMENT_NODE:\n        return \"#document\";\n\n      case NODE_TYPE.DOCUMENT_TYPE_NODE:\n        return this.name;\n\n      case NODE_TYPE.DOCUMENT_FRAGMENT_NODE:\n        return \"#document-fragment\";\n    } // should never happen\n\n\n    return null;\n  }\n\n  get firstChild() {\n    return domSymbolTree.firstChild(this);\n  } // https://dom.spec.whatwg.org/#connected\n  // https://dom.spec.whatwg.org/#dom-node-isconnected\n\n\n  get isConnected() {\n    const root = shadowIncludingRoot(this);\n    return root && root.nodeType === NODE_TYPE.DOCUMENT_NODE;\n  }\n\n  get ownerDocument() {\n    return this.nodeType === NODE_TYPE.DOCUMENT_NODE ? null : this._ownerDocument;\n  }\n\n  get lastChild() {\n    return domSymbolTree.lastChild(this);\n  }\n\n  get childNodes() {\n    if (!this._childNodesList) {\n      this._childNodesList = NodeList.createImpl(this._globalObject, [], {\n        element: this,\n        query: () => domSymbolTree.childrenToArray(this)\n      });\n    } else {\n      this._childNodesList._update();\n    }\n\n    return this._childNodesList;\n  }\n\n  get nextSibling() {\n    return domSymbolTree.nextSibling(this);\n  }\n\n  get previousSibling() {\n    return domSymbolTree.previousSibling(this);\n  }\n\n  _modified() {\n    this._version++;\n\n    for (const ancestor of domSymbolTree.ancestorsIterator(this)) {\n      ancestor._version++;\n    }\n\n    if (this._childrenList) {\n      this._childrenList._update();\n    }\n\n    if (this._childNodesList) {\n      this._childNodesList._update();\n    }\n\n    this._clearMemoizedQueries();\n  }\n\n  _childTextContentChangeSteps() {// Default: do nothing\n  }\n\n  _clearMemoizedQueries() {\n    this._memoizedQueries = {};\n    const myParent = domSymbolTree.parent(this);\n\n    if (myParent) {\n      myParent._clearMemoizedQueries();\n    }\n  }\n\n  _descendantRemoved(parent, child) {\n    const myParent = domSymbolTree.parent(this);\n\n    if (myParent) {\n      myParent._descendantRemoved(parent, child);\n    }\n  }\n\n  _descendantAdded(parent, child) {\n    const myParent = domSymbolTree.parent(this);\n\n    if (myParent) {\n      myParent._descendantAdded(parent, child);\n    }\n  }\n\n  _attach() {\n    this._attached = true;\n\n    for (const child of domSymbolTree.childrenIterator(this)) {\n      if (child._attach) {\n        child._attach();\n      }\n    }\n  }\n\n  _detach() {\n    this._attached = false;\n\n    if (this._ownerDocument && this._ownerDocument._lastFocusedElement === this) {\n      this._ownerDocument._lastFocusedElement = null;\n    }\n\n    for (const child of domSymbolTree.childrenIterator(this)) {\n      if (child._detach) {\n        child._detach();\n      }\n    }\n  }\n\n  hasChildNodes() {\n    return domSymbolTree.hasChildren(this);\n  } // https://dom.spec.whatwg.org/#dom-node-normalize\n\n\n  normalize() {\n    // It is important to use a treeToArray instead of a treeToIterator here, because the\n    // treeToIterator doesn't support tree mutation in the middle of the traversal.\n    for (const node of domSymbolTree.treeToArray(this)) {\n      const parentNode = domSymbolTree.parent(node);\n\n      if (parentNode === null || node.nodeType !== NODE_TYPE.TEXT_NODE) {\n        continue;\n      }\n\n      let length = nodeLength(node);\n\n      if (length === 0) {\n        parentNode._remove(node);\n\n        continue;\n      }\n\n      const continuousExclusiveTextNodes = [];\n\n      for (const currentNode of domSymbolTree.previousSiblingsIterator(node)) {\n        if (currentNode.nodeType !== NODE_TYPE.TEXT_NODE) {\n          break;\n        }\n\n        continuousExclusiveTextNodes.unshift(currentNode);\n      }\n\n      for (const currentNode of domSymbolTree.nextSiblingsIterator(node)) {\n        if (currentNode.nodeType !== NODE_TYPE.TEXT_NODE) {\n          break;\n        }\n\n        continuousExclusiveTextNodes.push(currentNode);\n      }\n\n      const data = continuousExclusiveTextNodes.reduce((d, n) => d + n._data, \"\");\n      node.replaceData(length, 0, data);\n      let currentNode = domSymbolTree.nextSibling(node);\n\n      while (currentNode && currentNode.nodeType === NODE_TYPE.TEXT_NODE) {\n        const currentNodeIndex = domSymbolTree.index(currentNode);\n\n        for (const range of node._referencedRanges) {\n          const {\n            _start,\n            _end\n          } = range;\n\n          if (_start.node === currentNode) {\n            range._setLiveRangeStart(node, _start.offset + length);\n          }\n\n          if (_end.node === currentNode) {\n            range._setLiveRangeEnd(node, _end.offset + length);\n          }\n        }\n\n        for (const range of parentNode._referencedRanges) {\n          const {\n            _start,\n            _end\n          } = range;\n\n          if (_start.node === parentNode && _start.offset === currentNodeIndex) {\n            range._setLiveRangeStart(node, length);\n          }\n\n          if (_end.node === parentNode && _end.offset === currentNodeIndex) {\n            range._setLiveRangeEnd(node, length);\n          }\n        }\n\n        length += nodeLength(currentNode);\n        currentNode = domSymbolTree.nextSibling(currentNode);\n      }\n\n      for (const continuousExclusiveTextNode of continuousExclusiveTextNodes) {\n        parentNode._remove(continuousExclusiveTextNode);\n      }\n    }\n  }\n\n  get parentElement() {\n    const parentNode = domSymbolTree.parent(this);\n    return parentNode !== null && parentNode.nodeType === NODE_TYPE.ELEMENT_NODE ? parentNode : null;\n  }\n\n  get baseURI() {\n    return documentBaseURLSerialized(this._ownerDocument);\n  }\n\n  compareDocumentPosition(other) {\n    // Let node1 be other and node2 be the context object.\n    let node1 = other;\n    let node2 = this;\n    let attr1 = null;\n    let attr2 = null;\n\n    if (node1.nodeType === NODE_TYPE.ATTRIBUTE_NODE) {\n      attr1 = node1;\n      node1 = attr1._element;\n    }\n\n    if (node2.nodeType === NODE_TYPE.ATTRIBUTE_NODE) {\n      attr2 = node2;\n      node2 = attr2._element;\n\n      if (attr1 !== null && node1 !== null && node2 === node1) {\n        for (const attr of node2._attributeList) {\n          if (nodeEquals(attr, attr1)) {\n            return NODE_DOCUMENT_POSITION.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC | NODE_DOCUMENT_POSITION.DOCUMENT_POSITION_PRECEDING;\n          }\n\n          if (nodeEquals(attr, attr2)) {\n            return NODE_DOCUMENT_POSITION.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC | NODE_DOCUMENT_POSITION.DOCUMENT_POSITION_FOLLOWING;\n          }\n        }\n      }\n    }\n\n    const result = domSymbolTree.compareTreePosition(node2, node1); // “If other and reference are not in the same tree, return the result of adding DOCUMENT_POSITION_DISCONNECTED,\n    //  DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC, and either DOCUMENT_POSITION_PRECEDING or\n    // DOCUMENT_POSITION_FOLLOWING, with the constraint that this is to be consistent, together.”\n\n    if (result === NODE_DOCUMENT_POSITION.DOCUMENT_POSITION_DISCONNECTED) {\n      // symbol-tree does not add these bits required by the spec:\n      return NODE_DOCUMENT_POSITION.DOCUMENT_POSITION_DISCONNECTED | NODE_DOCUMENT_POSITION.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC | NODE_DOCUMENT_POSITION.DOCUMENT_POSITION_FOLLOWING;\n    }\n\n    return result;\n  }\n\n  lookupPrefix(namespace) {\n    if (namespace === null || namespace === \"\") {\n      return null;\n    }\n\n    switch (this.nodeType) {\n      case NODE_TYPE.ELEMENT_NODE:\n        {\n          return locateNamespacePrefix(this, namespace);\n        }\n\n      case NODE_TYPE.DOCUMENT_NODE:\n        {\n          return this.documentElement !== null ? locateNamespacePrefix(this.documentElement, namespace) : null;\n        }\n\n      case NODE_TYPE.DOCUMENT_TYPE_NODE:\n      case NODE_TYPE.DOCUMENT_FRAGMENT_NODE:\n        {\n          return null;\n        }\n\n      case NODE_TYPE.ATTRIBUTE_NODE:\n        {\n          return this._element !== null ? locateNamespacePrefix(this._element, namespace) : null;\n        }\n\n      default:\n        {\n          return this.parentElement !== null ? locateNamespacePrefix(this.parentElement, namespace) : null;\n        }\n    }\n  }\n\n  lookupNamespaceURI(prefix) {\n    if (prefix === \"\") {\n      prefix = null;\n    }\n\n    return locateNamespace(this, prefix);\n  }\n\n  isDefaultNamespace(namespace) {\n    if (namespace === \"\") {\n      namespace = null;\n    }\n\n    const defaultNamespace = locateNamespace(this, null);\n    return defaultNamespace === namespace;\n  }\n\n  contains(other) {\n    return isInclusiveAncestor(this, other);\n  }\n\n  isEqualNode(node) {\n    if (node === null) {\n      return false;\n    } // Fast-path, not in the spec\n\n\n    if (this === node) {\n      return true;\n    }\n\n    return nodeEquals(this, node);\n  }\n\n  isSameNode(node) {\n    if (this === node) {\n      return true;\n    }\n\n    return false;\n  }\n\n  cloneNode(deep) {\n    if (isShadowRoot(this)) {\n      throw DOMException.create(this._globalObject, [\"ShadowRoot nodes are not clonable.\", \"NotSupportedError\"]);\n    }\n\n    deep = Boolean(deep);\n    return clone(this, undefined, deep);\n  }\n\n  get nodeValue() {\n    switch (this.nodeType) {\n      case NODE_TYPE.ATTRIBUTE_NODE:\n        {\n          return this._value;\n        }\n\n      case NODE_TYPE.TEXT_NODE:\n      case NODE_TYPE.CDATA_SECTION_NODE: // CDATASection is a subclass of Text\n\n      case NODE_TYPE.PROCESSING_INSTRUCTION_NODE:\n      case NODE_TYPE.COMMENT_NODE:\n        {\n          return this._data;\n        }\n\n      default:\n        {\n          return null;\n        }\n    }\n  }\n\n  set nodeValue(value) {\n    if (value === null) {\n      value = \"\";\n    }\n\n    switch (this.nodeType) {\n      case NODE_TYPE.ATTRIBUTE_NODE:\n        {\n          setAnExistingAttributeValue(this, value);\n          break;\n        }\n\n      case NODE_TYPE.TEXT_NODE:\n      case NODE_TYPE.CDATA_SECTION_NODE: // CDATASection is a subclass of Text\n\n      case NODE_TYPE.PROCESSING_INSTRUCTION_NODE:\n      case NODE_TYPE.COMMENT_NODE:\n        {\n          this.replaceData(0, this.length, value);\n          break;\n        }\n    }\n  } // https://dom.spec.whatwg.org/#dom-node-textcontent\n\n\n  get textContent() {\n    switch (this.nodeType) {\n      case NODE_TYPE.DOCUMENT_FRAGMENT_NODE:\n      case NODE_TYPE.ELEMENT_NODE:\n        {\n          let text = \"\";\n\n          for (const child of domSymbolTree.treeIterator(this)) {\n            if (child.nodeType === NODE_TYPE.TEXT_NODE || child.nodeType === NODE_TYPE.CDATA_SECTION_NODE) {\n              text += child.nodeValue;\n            }\n          }\n\n          return text;\n        }\n\n      case NODE_TYPE.ATTRIBUTE_NODE:\n        {\n          return this._value;\n        }\n\n      case NODE_TYPE.TEXT_NODE:\n      case NODE_TYPE.CDATA_SECTION_NODE: // CDATASection is a subclass of Text\n\n      case NODE_TYPE.PROCESSING_INSTRUCTION_NODE:\n      case NODE_TYPE.COMMENT_NODE:\n        {\n          return this._data;\n        }\n\n      default:\n        {\n          return null;\n        }\n    }\n  }\n\n  set textContent(value) {\n    if (value === null) {\n      value = \"\";\n    }\n\n    switch (this.nodeType) {\n      case NODE_TYPE.DOCUMENT_FRAGMENT_NODE:\n      case NODE_TYPE.ELEMENT_NODE:\n        {\n          // https://dom.spec.whatwg.org/#string-replace-all\n          let nodeImpl = null;\n\n          if (value !== \"\") {\n            nodeImpl = this._ownerDocument.createTextNode(value);\n          }\n\n          this._replaceAll(nodeImpl);\n\n          break;\n        }\n\n      case NODE_TYPE.ATTRIBUTE_NODE:\n        {\n          setAnExistingAttributeValue(this, value);\n          break;\n        }\n\n      case NODE_TYPE.TEXT_NODE:\n      case NODE_TYPE.CDATA_SECTION_NODE: // CDATASection is a subclass of Text\n\n      case NODE_TYPE.PROCESSING_INSTRUCTION_NODE:\n      case NODE_TYPE.COMMENT_NODE:\n        {\n          this.replaceData(0, this.length, value);\n          break;\n        }\n    }\n  } // https://dom.spec.whatwg.org/#dom-node-insertbefore\n\n\n  insertBefore(nodeImpl, childImpl) {\n    return this._preInsert(nodeImpl, childImpl);\n  } // https://dom.spec.whatwg.org/#dom-node-appendchild\n\n\n  appendChild(nodeImpl) {\n    return this._append(nodeImpl);\n  } // https://dom.spec.whatwg.org/#dom-node-replacechild\n\n\n  replaceChild(nodeImpl, childImpl) {\n    return this._replace(nodeImpl, childImpl);\n  } // https://dom.spec.whatwg.org/#dom-node-removechild\n\n\n  removeChild(oldChildImpl) {\n    return this._preRemove(oldChildImpl);\n  } // https://dom.spec.whatwg.org/#concept-node-ensure-pre-insertion-validity\n\n\n  _preInsertValidity(nodeImpl, childImpl) {\n    const {\n      nodeType,\n      nodeName\n    } = nodeImpl;\n    const {\n      nodeType: parentType,\n      nodeName: parentName\n    } = this;\n\n    if (parentType !== NODE_TYPE.DOCUMENT_NODE && parentType !== NODE_TYPE.DOCUMENT_FRAGMENT_NODE && parentType !== NODE_TYPE.ELEMENT_NODE) {\n      throw DOMException.create(this._globalObject, [`Node can't be inserted in a ${parentName} parent.`, \"HierarchyRequestError\"]);\n    }\n\n    if (isHostInclusiveAncestor(nodeImpl, this)) {\n      throw DOMException.create(this._globalObject, [\"The operation would yield an incorrect node tree.\", \"HierarchyRequestError\"]);\n    }\n\n    if (childImpl && domSymbolTree.parent(childImpl) !== this) {\n      throw DOMException.create(this._globalObject, [\"The child can not be found in the parent.\", \"NotFoundError\"]);\n    }\n\n    if (nodeType !== NODE_TYPE.DOCUMENT_FRAGMENT_NODE && nodeType !== NODE_TYPE.DOCUMENT_TYPE_NODE && nodeType !== NODE_TYPE.ELEMENT_NODE && nodeType !== NODE_TYPE.TEXT_NODE && nodeType !== NODE_TYPE.CDATA_SECTION_NODE && // CData section extends from Text\n    nodeType !== NODE_TYPE.PROCESSING_INSTRUCTION_NODE && nodeType !== NODE_TYPE.COMMENT_NODE) {\n      throw DOMException.create(this._globalObject, [`${nodeName} node can't be inserted in parent node.`, \"HierarchyRequestError\"]);\n    }\n\n    if (nodeType === NODE_TYPE.TEXT_NODE && parentType === NODE_TYPE.DOCUMENT_NODE || nodeType === NODE_TYPE.DOCUMENT_TYPE_NODE && parentType !== NODE_TYPE.DOCUMENT_NODE) {\n      throw DOMException.create(this._globalObject, [`${nodeName} node can't be inserted in ${parentName} parent.`, \"HierarchyRequestError\"]);\n    }\n\n    if (parentType === NODE_TYPE.DOCUMENT_NODE) {\n      const nodeChildren = domSymbolTree.childrenToArray(nodeImpl);\n      const parentChildren = domSymbolTree.childrenToArray(this);\n\n      switch (nodeType) {\n        case NODE_TYPE.DOCUMENT_FRAGMENT_NODE:\n          {\n            const nodeChildrenElements = nodeChildren.filter(child => child.nodeType === NODE_TYPE.ELEMENT_NODE);\n\n            if (nodeChildrenElements.length > 1) {\n              throw DOMException.create(this._globalObject, [`Invalid insertion of ${nodeName} node in ${parentName} node.`, \"HierarchyRequestError\"]);\n            }\n\n            const hasNodeTextChildren = nodeChildren.some(child => child.nodeType === NODE_TYPE.TEXT_NODE);\n\n            if (hasNodeTextChildren) {\n              throw DOMException.create(this._globalObject, [`Invalid insertion of ${nodeName} node in ${parentName} node.`, \"HierarchyRequestError\"]);\n            }\n\n            if (nodeChildrenElements.length === 1 && (parentChildren.some(child => child.nodeType === NODE_TYPE.ELEMENT_NODE) || childImpl && childImpl.nodeType === NODE_TYPE.DOCUMENT_TYPE_NODE || childImpl && domSymbolTree.nextSibling(childImpl) && domSymbolTree.nextSibling(childImpl).nodeType === NODE_TYPE.DOCUMENT_TYPE_NODE)) {\n              throw DOMException.create(this._globalObject, [`Invalid insertion of ${nodeName} node in ${parentName} node.`, \"HierarchyRequestError\"]);\n            }\n\n            break;\n          }\n\n        case NODE_TYPE.ELEMENT_NODE:\n          if (parentChildren.some(child => child.nodeType === NODE_TYPE.ELEMENT_NODE) || childImpl && childImpl.nodeType === NODE_TYPE.DOCUMENT_TYPE_NODE || childImpl && domSymbolTree.nextSibling(childImpl) && domSymbolTree.nextSibling(childImpl).nodeType === NODE_TYPE.DOCUMENT_TYPE_NODE) {\n            throw DOMException.create(this._globalObject, [`Invalid insertion of ${nodeName} node in ${parentName} node.`, \"HierarchyRequestError\"]);\n          }\n\n          break;\n\n        case NODE_TYPE.DOCUMENT_TYPE_NODE:\n          if (parentChildren.some(child => child.nodeType === NODE_TYPE.DOCUMENT_TYPE_NODE) || childImpl && domSymbolTree.previousSibling(childImpl) && domSymbolTree.previousSibling(childImpl).nodeType === NODE_TYPE.ELEMENT_NODE || !childImpl && parentChildren.some(child => child.nodeType === NODE_TYPE.ELEMENT_NODE)) {\n            throw DOMException.create(this._globalObject, [`Invalid insertion of ${nodeName} node in ${parentName} node.`, \"HierarchyRequestError\"]);\n          }\n\n          break;\n      }\n    }\n  } // https://dom.spec.whatwg.org/#concept-node-pre-insert\n\n\n  _preInsert(nodeImpl, childImpl) {\n    this._preInsertValidity(nodeImpl, childImpl);\n\n    let referenceChildImpl = childImpl;\n\n    if (referenceChildImpl === nodeImpl) {\n      referenceChildImpl = domSymbolTree.nextSibling(nodeImpl);\n    }\n\n    this._ownerDocument._adoptNode(nodeImpl);\n\n    this._insert(nodeImpl, referenceChildImpl);\n\n    return nodeImpl;\n  } // https://dom.spec.whatwg.org/#concept-node-insert\n\n\n  _insert(nodeImpl, childImpl, suppressObservers) {\n    const count = nodeImpl.nodeType === NODE_TYPE.DOCUMENT_FRAGMENT_NODE ? domSymbolTree.childrenCount(nodeImpl) : 1;\n\n    if (childImpl) {\n      const childIndex = domSymbolTree.index(childImpl);\n\n      for (const range of this._referencedRanges) {\n        const {\n          _start,\n          _end\n        } = range;\n\n        if (_start.offset > childIndex) {\n          range._setLiveRangeStart(this, _start.offset + count);\n        }\n\n        if (_end.offset > childIndex) {\n          range._setLiveRangeEnd(this, _end.offset + count);\n        }\n      }\n    }\n\n    const nodesImpl = nodeImpl.nodeType === NODE_TYPE.DOCUMENT_FRAGMENT_NODE ? domSymbolTree.childrenToArray(nodeImpl) : [nodeImpl];\n\n    if (nodeImpl.nodeType === NODE_TYPE.DOCUMENT_FRAGMENT_NODE) {\n      let grandChildImpl;\n\n      while (grandChildImpl = domSymbolTree.firstChild(nodeImpl)) {\n        nodeImpl._remove(grandChildImpl, true);\n      }\n    }\n\n    if (nodeImpl.nodeType === NODE_TYPE.DOCUMENT_FRAGMENT_NODE) {\n      queueTreeMutationRecord(nodeImpl, [], nodesImpl, null, null);\n    }\n\n    const previousChildImpl = childImpl ? domSymbolTree.previousSibling(childImpl) : domSymbolTree.lastChild(this);\n    let isConnected;\n\n    for (const node of nodesImpl) {\n      if (!childImpl) {\n        domSymbolTree.appendChild(this, node);\n      } else {\n        domSymbolTree.insertBefore(childImpl, node);\n      }\n\n      if (this.nodeType === NODE_TYPE.ELEMENT_NODE && this._shadowRoot !== null && (node.nodeType === NODE_TYPE.ELEMENT_NODE || node.nodeType === NODE_TYPE.TEXT_NODE)) {\n        assignSlot(node);\n      }\n\n      this._modified();\n\n      if (node.nodeType === NODE_TYPE.TEXT_NODE || node.nodeType === NODE_TYPE.CDATA_SECTION_NODE) {\n        this._childTextContentChangeSteps();\n      }\n\n      if (isSlot(this) && this._assignedNodes.length === 0 && isShadowRoot(nodeRoot(this))) {\n        signalSlotChange(this);\n      }\n\n      const root = nodeRoot(node);\n\n      if (isShadowRoot(root)) {\n        assignSlotableForTree(root);\n      }\n\n      if (this._attached && nodeImpl._attach) {\n        node._attach();\n      }\n\n      this._descendantAdded(this, node);\n\n      if (isConnected === undefined) {\n        isConnected = node.isConnected;\n      }\n\n      if (isConnected) {\n        for (const inclusiveDescendant of shadowIncludingInclusiveDescendantsIterator(node)) {\n          if (inclusiveDescendant._ceState === \"custom\") {\n            enqueueCECallbackReaction(inclusiveDescendant, \"connectedCallback\", []);\n          } else {\n            tryUpgradeElement(inclusiveDescendant);\n          }\n        }\n      }\n    }\n\n    if (!suppressObservers) {\n      queueTreeMutationRecord(this, nodesImpl, [], previousChildImpl, childImpl);\n    }\n  } // https://dom.spec.whatwg.org/#concept-node-append\n\n\n  _append(nodeImpl) {\n    return this._preInsert(nodeImpl, null);\n  } // https://dom.spec.whatwg.org/#concept-node-replace\n\n\n  _replace(nodeImpl, childImpl) {\n    const {\n      nodeType,\n      nodeName\n    } = nodeImpl;\n    const {\n      nodeType: parentType,\n      nodeName: parentName\n    } = this; // Note: This section differs from the pre-insert validation algorithm.\n\n    if (parentType !== NODE_TYPE.DOCUMENT_NODE && parentType !== NODE_TYPE.DOCUMENT_FRAGMENT_NODE && parentType !== NODE_TYPE.ELEMENT_NODE) {\n      throw DOMException.create(this._globalObject, [`Node can't be inserted in a ${parentName} parent.`, \"HierarchyRequestError\"]);\n    }\n\n    if (isHostInclusiveAncestor(nodeImpl, this)) {\n      throw DOMException.create(this._globalObject, [\"The operation would yield an incorrect node tree.\", \"HierarchyRequestError\"]);\n    }\n\n    if (childImpl && domSymbolTree.parent(childImpl) !== this) {\n      throw DOMException.create(this._globalObject, [\"The child can not be found in the parent.\", \"NotFoundError\"]);\n    }\n\n    if (nodeType !== NODE_TYPE.DOCUMENT_FRAGMENT_NODE && nodeType !== NODE_TYPE.DOCUMENT_TYPE_NODE && nodeType !== NODE_TYPE.ELEMENT_NODE && nodeType !== NODE_TYPE.TEXT_NODE && nodeType !== NODE_TYPE.CDATA_SECTION_NODE && // CData section extends from Text\n    nodeType !== NODE_TYPE.PROCESSING_INSTRUCTION_NODE && nodeType !== NODE_TYPE.COMMENT_NODE) {\n      throw DOMException.create(this._globalObject, [`${nodeName} node can't be inserted in parent node.`, \"HierarchyRequestError\"]);\n    }\n\n    if (nodeType === NODE_TYPE.TEXT_NODE && parentType === NODE_TYPE.DOCUMENT_NODE || nodeType === NODE_TYPE.DOCUMENT_TYPE_NODE && parentType !== NODE_TYPE.DOCUMENT_NODE) {\n      throw DOMException.create(this._globalObject, [`${nodeName} node can't be inserted in ${parentName} parent.`, \"HierarchyRequestError\"]);\n    }\n\n    if (parentType === NODE_TYPE.DOCUMENT_NODE) {\n      const nodeChildren = domSymbolTree.childrenToArray(nodeImpl);\n      const parentChildren = domSymbolTree.childrenToArray(this);\n\n      switch (nodeType) {\n        case NODE_TYPE.DOCUMENT_FRAGMENT_NODE:\n          {\n            const nodeChildrenElements = nodeChildren.filter(child => child.nodeType === NODE_TYPE.ELEMENT_NODE);\n\n            if (nodeChildrenElements.length > 1) {\n              throw DOMException.create(this._globalObject, [`Invalid insertion of ${nodeName} node in ${parentName} node.`, \"HierarchyRequestError\"]);\n            }\n\n            const hasNodeTextChildren = nodeChildren.some(child => child.nodeType === NODE_TYPE.TEXT_NODE);\n\n            if (hasNodeTextChildren) {\n              throw DOMException.create(this._globalObject, [`Invalid insertion of ${nodeName} node in ${parentName} node.`, \"HierarchyRequestError\"]);\n            }\n\n            const parentChildElements = parentChildren.filter(child => child.nodeType === NODE_TYPE.ELEMENT_NODE);\n\n            if (nodeChildrenElements.length === 1 && (parentChildElements.length === 1 && parentChildElements[0] !== childImpl || childImpl && domSymbolTree.nextSibling(childImpl) && domSymbolTree.nextSibling(childImpl).nodeType === NODE_TYPE.DOCUMENT_TYPE_NODE)) {\n              throw DOMException.create(this._globalObject, [`Invalid insertion of ${nodeName} node in ${parentName} node.`, \"HierarchyRequestError\"]);\n            }\n\n            break;\n          }\n\n        case NODE_TYPE.ELEMENT_NODE:\n          if (parentChildren.some(child => child.nodeType === NODE_TYPE.ELEMENT_NODE && child !== childImpl) || childImpl && domSymbolTree.nextSibling(childImpl) && domSymbolTree.nextSibling(childImpl).nodeType === NODE_TYPE.DOCUMENT_TYPE_NODE) {\n            throw DOMException.create(this._globalObject, [`Invalid insertion of ${nodeName} node in ${parentName} node.`, \"HierarchyRequestError\"]);\n          }\n\n          break;\n\n        case NODE_TYPE.DOCUMENT_TYPE_NODE:\n          if (parentChildren.some(child => child.nodeType === NODE_TYPE.DOCUMENT_TYPE_NODE && child !== childImpl) || childImpl && domSymbolTree.previousSibling(childImpl) && domSymbolTree.previousSibling(childImpl).nodeType === NODE_TYPE.ELEMENT_NODE) {\n            throw DOMException.create(this._globalObject, [`Invalid insertion of ${nodeName} node in ${parentName} node.`, \"HierarchyRequestError\"]);\n          }\n\n          break;\n      }\n    }\n\n    let referenceChildImpl = domSymbolTree.nextSibling(childImpl);\n\n    if (referenceChildImpl === nodeImpl) {\n      referenceChildImpl = domSymbolTree.nextSibling(nodeImpl);\n    }\n\n    const previousSiblingImpl = domSymbolTree.previousSibling(childImpl);\n\n    this._ownerDocument._adoptNode(nodeImpl);\n\n    let removedNodesImpl = [];\n\n    if (domSymbolTree.parent(childImpl)) {\n      removedNodesImpl = [childImpl];\n\n      this._remove(childImpl, true);\n    }\n\n    const nodesImpl = nodeImpl.nodeType === NODE_TYPE.DOCUMENT_FRAGMENT_NODE ? domSymbolTree.childrenToArray(nodeImpl) : [nodeImpl];\n\n    this._insert(nodeImpl, referenceChildImpl, true);\n\n    queueTreeMutationRecord(this, nodesImpl, removedNodesImpl, previousSiblingImpl, referenceChildImpl);\n    return childImpl;\n  } // https://dom.spec.whatwg.org/#concept-node-replace-all\n\n\n  _replaceAll(nodeImpl) {\n    if (nodeImpl !== null) {\n      this._ownerDocument._adoptNode(nodeImpl);\n    }\n\n    const removedNodesImpl = domSymbolTree.childrenToArray(this);\n    let addedNodesImpl;\n\n    if (nodeImpl === null) {\n      addedNodesImpl = [];\n    } else if (nodeImpl.nodeType === NODE_TYPE.DOCUMENT_FRAGMENT_NODE) {\n      addedNodesImpl = domSymbolTree.childrenToArray(nodeImpl);\n    } else {\n      addedNodesImpl = [nodeImpl];\n    }\n\n    for (const childImpl of domSymbolTree.childrenIterator(this)) {\n      this._remove(childImpl, true);\n    }\n\n    if (nodeImpl !== null) {\n      this._insert(nodeImpl, null, true);\n    }\n\n    if (addedNodesImpl.length > 0 || removedNodesImpl.length > 0) {\n      queueTreeMutationRecord(this, addedNodesImpl, removedNodesImpl, null, null);\n    }\n  } // https://dom.spec.whatwg.org/#concept-node-pre-remove\n\n\n  _preRemove(childImpl) {\n    if (domSymbolTree.parent(childImpl) !== this) {\n      throw DOMException.create(this._globalObject, [\"The node to be removed is not a child of this node.\", \"NotFoundError\"]);\n    }\n\n    this._remove(childImpl);\n\n    return childImpl;\n  } // https://dom.spec.whatwg.org/#concept-node-remove\n\n\n  _remove(nodeImpl, suppressObservers) {\n    const index = domSymbolTree.index(nodeImpl);\n\n    for (const descendant of domSymbolTree.treeIterator(nodeImpl)) {\n      for (const range of descendant._referencedRanges) {\n        const {\n          _start,\n          _end\n        } = range;\n\n        if (_start.node === descendant) {\n          range._setLiveRangeStart(this, index);\n        }\n\n        if (_end.node === descendant) {\n          range._setLiveRangeEnd(this, index);\n        }\n      }\n    }\n\n    for (const range of this._referencedRanges) {\n      const {\n        _start,\n        _end\n      } = range;\n\n      if (_start.node === this && _start.offset > index) {\n        range._setLiveRangeStart(this, _start.offset - 1);\n      }\n\n      if (_end.node === this && _end.offset > index) {\n        range._setLiveRangeEnd(this, _end.offset - 1);\n      }\n    }\n\n    if (this._ownerDocument) {\n      this._ownerDocument._runPreRemovingSteps(nodeImpl);\n    }\n\n    const oldPreviousSiblingImpl = domSymbolTree.previousSibling(nodeImpl);\n    const oldNextSiblingImpl = domSymbolTree.nextSibling(nodeImpl);\n    domSymbolTree.remove(nodeImpl);\n\n    if (nodeImpl._assignedSlot) {\n      assignSlotable(nodeImpl._assignedSlot);\n    }\n\n    if (isSlot(this) && this._assignedNodes.length === 0 && isShadowRoot(nodeRoot(this))) {\n      signalSlotChange(this);\n    }\n\n    let hasSlotDescendant = isSlot(nodeImpl);\n\n    if (!hasSlotDescendant) {\n      for (const child of domSymbolTree.treeIterator(nodeImpl)) {\n        if (isSlot(child)) {\n          hasSlotDescendant = true;\n          break;\n        }\n      }\n    }\n\n    if (hasSlotDescendant) {\n      assignSlotableForTree(nodeRoot(this));\n      assignSlotableForTree(nodeImpl);\n    }\n\n    this._modified();\n\n    nodeImpl._detach();\n\n    this._descendantRemoved(this, nodeImpl);\n\n    if (this.isConnected) {\n      if (nodeImpl._ceState === \"custom\") {\n        enqueueCECallbackReaction(nodeImpl, \"disconnectedCallback\", []);\n      }\n\n      for (const descendantImpl of shadowIncludingDescendantsIterator(nodeImpl)) {\n        if (descendantImpl._ceState === \"custom\") {\n          enqueueCECallbackReaction(descendantImpl, \"disconnectedCallback\", []);\n        }\n      }\n    }\n\n    if (!suppressObservers) {\n      queueTreeMutationRecord(this, [], [nodeImpl], oldPreviousSiblingImpl, oldNextSiblingImpl);\n    }\n\n    if (nodeImpl.nodeType === NODE_TYPE.TEXT_NODE) {\n      this._childTextContentChangeSteps();\n    }\n  }\n\n}\n\nmodule.exports = {\n  implementation: NodeImpl\n};","map":{"version":3,"names":["DOMException","require","EventTargetImpl","implementation","simultaneousIterators","NODE_TYPE","NODE_DOCUMENT_POSITION","clone","locateNamespacePrefix","locateNamespace","setAnExistingAttributeValue","NodeList","nodeRoot","nodeLength","isInclusiveAncestor","domSymbolTree","documentBaseURLSerialized","queueTreeMutationRecord","enqueueCECallbackReaction","tryUpgradeElement","isShadowRoot","shadowIncludingRoot","assignSlot","assignSlotableForTree","assignSlotable","signalSlotChange","isSlot","shadowIncludingInclusiveDescendantsIterator","shadowIncludingDescendantsIterator","nodeEquals","a","b","nodeType","DOCUMENT_TYPE_NODE","name","publicId","systemId","ELEMENT_NODE","_namespaceURI","_prefix","_localName","_attributes","length","ATTRIBUTE_NODE","_namespace","_value","PROCESSING_INSTRUCTION_NODE","_target","_data","TEXT_NODE","COMMENT_NODE","attributeListsEqual","nodes","childrenIterator","elementA","elementB","listA","_attributeList","listB","lengthA","lengthB","i","attrA","some","attrB","isHostInclusiveAncestor","nodeImplA","nodeImplB","ancestor","ancestorsIterator","rootImplB","_host","NodeImpl","constructor","globalObject","args","privateData","initialize","_ownerDocument","ownerDocument","_childNodesList","_childrenList","_version","_memoizedQueries","_registeredObserverList","_referencedRanges","Set","_getTheParent","_assignedSlot","parent","parentNode","getRootNode","options","composed","nodeName","tagName","_qualifiedName","CDATA_SECTION_NODE","target","DOCUMENT_NODE","DOCUMENT_FRAGMENT_NODE","firstChild","isConnected","root","lastChild","childNodes","createImpl","_globalObject","element","query","childrenToArray","_update","nextSibling","previousSibling","_modified","_clearMemoizedQueries","_childTextContentChangeSteps","myParent","_descendantRemoved","child","_descendantAdded","_attach","_attached","_detach","_lastFocusedElement","hasChildNodes","hasChildren","normalize","node","treeToArray","_remove","continuousExclusiveTextNodes","currentNode","previousSiblingsIterator","unshift","nextSiblingsIterator","push","data","reduce","d","n","replaceData","currentNodeIndex","index","range","_start","_end","_setLiveRangeStart","offset","_setLiveRangeEnd","continuousExclusiveTextNode","parentElement","baseURI","compareDocumentPosition","other","node1","node2","attr1","attr2","_element","attr","DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC","DOCUMENT_POSITION_PRECEDING","DOCUMENT_POSITION_FOLLOWING","result","compareTreePosition","DOCUMENT_POSITION_DISCONNECTED","lookupPrefix","namespace","documentElement","lookupNamespaceURI","prefix","isDefaultNamespace","defaultNamespace","contains","isEqualNode","isSameNode","cloneNode","deep","create","Boolean","undefined","nodeValue","value","textContent","text","treeIterator","nodeImpl","createTextNode","_replaceAll","insertBefore","childImpl","_preInsert","appendChild","_append","replaceChild","_replace","removeChild","oldChildImpl","_preRemove","_preInsertValidity","parentType","parentName","nodeChildren","parentChildren","nodeChildrenElements","filter","hasNodeTextChildren","referenceChildImpl","_adoptNode","_insert","suppressObservers","count","childrenCount","childIndex","nodesImpl","grandChildImpl","previousChildImpl","_shadowRoot","_assignedNodes","inclusiveDescendant","_ceState","parentChildElements","previousSiblingImpl","removedNodesImpl","addedNodesImpl","descendant","_runPreRemovingSteps","oldPreviousSiblingImpl","oldNextSiblingImpl","remove","hasSlotDescendant","descendantImpl","module","exports"],"sources":["C:/Users/Danil/Desktop/project1/node_modules/jsdom/lib/jsdom/living/nodes/Node-impl.js"],"sourcesContent":["\"use strict\";\n\nconst DOMException = require(\"domexception/webidl2js-wrapper\");\n\nconst EventTargetImpl = require(\"../events/EventTarget-impl\").implementation;\nconst { simultaneousIterators } = require(\"../../utils\");\nconst NODE_TYPE = require(\"../node-type\");\nconst NODE_DOCUMENT_POSITION = require(\"../node-document-position\");\nconst { clone, locateNamespacePrefix, locateNamespace } = require(\"../node\");\nconst { setAnExistingAttributeValue } = require(\"../attributes\");\n\nconst NodeList = require(\"../generated/NodeList\");\n\nconst { nodeRoot, nodeLength, isInclusiveAncestor } = require(\"../helpers/node\");\nconst { domSymbolTree } = require(\"../helpers/internal-constants\");\nconst { documentBaseURLSerialized } = require(\"../helpers/document-base-url\");\nconst { queueTreeMutationRecord } = require(\"../helpers/mutation-observers\");\nconst { enqueueCECallbackReaction, tryUpgradeElement } = require(\"../helpers/custom-elements\");\nconst {\n  isShadowRoot, shadowIncludingRoot, assignSlot, assignSlotableForTree, assignSlotable, signalSlotChange, isSlot,\n  shadowIncludingInclusiveDescendantsIterator, shadowIncludingDescendantsIterator\n} = require(\"../helpers/shadow-dom\");\n\nfunction nodeEquals(a, b) {\n  if (a.nodeType !== b.nodeType) {\n    return false;\n  }\n\n  switch (a.nodeType) {\n    case NODE_TYPE.DOCUMENT_TYPE_NODE:\n      if (a.name !== b.name || a.publicId !== b.publicId ||\n          a.systemId !== b.systemId) {\n        return false;\n      }\n      break;\n    case NODE_TYPE.ELEMENT_NODE:\n      if (a._namespaceURI !== b._namespaceURI || a._prefix !== b._prefix || a._localName !== b._localName ||\n          a._attributes.length !== b._attributes.length) {\n        return false;\n      }\n      break;\n    case NODE_TYPE.ATTRIBUTE_NODE:\n      if (a._namespace !== b._namespace || a._localName !== b._localName || a._value !== b._value) {\n        return false;\n      }\n      break;\n    case NODE_TYPE.PROCESSING_INSTRUCTION_NODE:\n      if (a._target !== b._target || a._data !== b._data) {\n        return false;\n      }\n      break;\n    case NODE_TYPE.TEXT_NODE:\n    case NODE_TYPE.COMMENT_NODE:\n      if (a._data !== b._data) {\n        return false;\n      }\n      break;\n  }\n\n  if (a.nodeType === NODE_TYPE.ELEMENT_NODE && !attributeListsEqual(a, b)) {\n    return false;\n  }\n\n  for (const nodes of simultaneousIterators(domSymbolTree.childrenIterator(a), domSymbolTree.childrenIterator(b))) {\n    if (!nodes[0] || !nodes[1]) {\n      // mismatch in the amount of childNodes\n      return false;\n    }\n\n    if (!nodeEquals(nodes[0], nodes[1])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n// Needed by https://dom.spec.whatwg.org/#concept-node-equals\nfunction attributeListsEqual(elementA, elementB) {\n  const listA = elementA._attributeList;\n  const listB = elementB._attributeList;\n\n  const lengthA = listA.length;\n  const lengthB = listB.length;\n\n  if (lengthA !== lengthB) {\n    return false;\n  }\n\n  for (let i = 0; i < lengthA; ++i) {\n    const attrA = listA[i];\n\n    if (!listB.some(attrB => nodeEquals(attrA, attrB))) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n// https://dom.spec.whatwg.org/#concept-tree-host-including-inclusive-ancestor\nfunction isHostInclusiveAncestor(nodeImplA, nodeImplB) {\n  for (const ancestor of domSymbolTree.ancestorsIterator(nodeImplB)) {\n    if (ancestor === nodeImplA) {\n      return true;\n    }\n  }\n\n  const rootImplB = nodeRoot(nodeImplB);\n  if (rootImplB._host) {\n    return isHostInclusiveAncestor(nodeImplA, rootImplB._host);\n  }\n\n  return false;\n}\n\nclass NodeImpl extends EventTargetImpl {\n  constructor(globalObject, args, privateData) {\n    super(globalObject, args, privateData);\n\n    domSymbolTree.initialize(this);\n\n    this._ownerDocument = privateData.ownerDocument;\n\n    this._childNodesList = null;\n    this._childrenList = null;\n    this._version = 0;\n    this._memoizedQueries = {};\n    this._registeredObserverList = [];\n    this._referencedRanges = new Set();\n  }\n\n  _getTheParent() {\n    if (this._assignedSlot) {\n      return this._assignedSlot;\n    }\n\n    return domSymbolTree.parent(this);\n  }\n\n  get parentNode() {\n    return domSymbolTree.parent(this);\n  }\n\n  getRootNode(options) {\n    return options.composed ? shadowIncludingRoot(this) : nodeRoot(this);\n  }\n\n  get nodeName() {\n    switch (this.nodeType) {\n      case NODE_TYPE.ELEMENT_NODE:\n        return this.tagName;\n      case NODE_TYPE.ATTRIBUTE_NODE:\n        return this._qualifiedName;\n      case NODE_TYPE.TEXT_NODE:\n        return \"#text\";\n      case NODE_TYPE.CDATA_SECTION_NODE:\n        return \"#cdata-section\";\n      case NODE_TYPE.PROCESSING_INSTRUCTION_NODE:\n        return this.target;\n      case NODE_TYPE.COMMENT_NODE:\n        return \"#comment\";\n      case NODE_TYPE.DOCUMENT_NODE:\n        return \"#document\";\n      case NODE_TYPE.DOCUMENT_TYPE_NODE:\n        return this.name;\n      case NODE_TYPE.DOCUMENT_FRAGMENT_NODE:\n        return \"#document-fragment\";\n    }\n\n    // should never happen\n    return null;\n  }\n\n  get firstChild() {\n    return domSymbolTree.firstChild(this);\n  }\n\n  // https://dom.spec.whatwg.org/#connected\n  // https://dom.spec.whatwg.org/#dom-node-isconnected\n  get isConnected() {\n    const root = shadowIncludingRoot(this);\n    return root && root.nodeType === NODE_TYPE.DOCUMENT_NODE;\n  }\n\n  get ownerDocument() {\n    return this.nodeType === NODE_TYPE.DOCUMENT_NODE ? null : this._ownerDocument;\n  }\n\n  get lastChild() {\n    return domSymbolTree.lastChild(this);\n  }\n\n  get childNodes() {\n    if (!this._childNodesList) {\n      this._childNodesList = NodeList.createImpl(this._globalObject, [], {\n        element: this,\n        query: () => domSymbolTree.childrenToArray(this)\n      });\n    } else {\n      this._childNodesList._update();\n    }\n\n    return this._childNodesList;\n  }\n\n  get nextSibling() {\n    return domSymbolTree.nextSibling(this);\n  }\n\n  get previousSibling() {\n    return domSymbolTree.previousSibling(this);\n  }\n\n  _modified() {\n    this._version++;\n    for (const ancestor of domSymbolTree.ancestorsIterator(this)) {\n      ancestor._version++;\n    }\n\n    if (this._childrenList) {\n      this._childrenList._update();\n    }\n    if (this._childNodesList) {\n      this._childNodesList._update();\n    }\n    this._clearMemoizedQueries();\n  }\n\n  _childTextContentChangeSteps() {\n    // Default: do nothing\n  }\n\n  _clearMemoizedQueries() {\n    this._memoizedQueries = {};\n    const myParent = domSymbolTree.parent(this);\n    if (myParent) {\n      myParent._clearMemoizedQueries();\n    }\n  }\n\n  _descendantRemoved(parent, child) {\n    const myParent = domSymbolTree.parent(this);\n    if (myParent) {\n      myParent._descendantRemoved(parent, child);\n    }\n  }\n\n  _descendantAdded(parent, child) {\n    const myParent = domSymbolTree.parent(this);\n    if (myParent) {\n      myParent._descendantAdded(parent, child);\n    }\n  }\n\n  _attach() {\n    this._attached = true;\n\n    for (const child of domSymbolTree.childrenIterator(this)) {\n      if (child._attach) {\n        child._attach();\n      }\n    }\n  }\n\n  _detach() {\n    this._attached = false;\n\n    if (this._ownerDocument && this._ownerDocument._lastFocusedElement === this) {\n      this._ownerDocument._lastFocusedElement = null;\n    }\n\n    for (const child of domSymbolTree.childrenIterator(this)) {\n      if (child._detach) {\n        child._detach();\n      }\n    }\n  }\n\n  hasChildNodes() {\n    return domSymbolTree.hasChildren(this);\n  }\n\n  // https://dom.spec.whatwg.org/#dom-node-normalize\n  normalize() {\n    // It is important to use a treeToArray instead of a treeToIterator here, because the\n    // treeToIterator doesn't support tree mutation in the middle of the traversal.\n    for (const node of domSymbolTree.treeToArray(this)) {\n      const parentNode = domSymbolTree.parent(node);\n      if (parentNode === null || node.nodeType !== NODE_TYPE.TEXT_NODE) {\n        continue;\n      }\n\n      let length = nodeLength(node);\n\n      if (length === 0) {\n        parentNode._remove(node);\n        continue;\n      }\n\n      const continuousExclusiveTextNodes = [];\n\n      for (const currentNode of domSymbolTree.previousSiblingsIterator(node)) {\n        if (currentNode.nodeType !== NODE_TYPE.TEXT_NODE) {\n          break;\n        }\n\n        continuousExclusiveTextNodes.unshift(currentNode);\n      }\n      for (const currentNode of domSymbolTree.nextSiblingsIterator(node)) {\n        if (currentNode.nodeType !== NODE_TYPE.TEXT_NODE) {\n          break;\n        }\n\n        continuousExclusiveTextNodes.push(currentNode);\n      }\n\n      const data = continuousExclusiveTextNodes.reduce((d, n) => d + n._data, \"\");\n      node.replaceData(length, 0, data);\n\n      let currentNode = domSymbolTree.nextSibling(node);\n      while (currentNode && currentNode.nodeType === NODE_TYPE.TEXT_NODE) {\n        const currentNodeIndex = domSymbolTree.index(currentNode);\n\n        for (const range of node._referencedRanges) {\n          const { _start, _end } = range;\n\n          if (_start.node === currentNode) {\n            range._setLiveRangeStart(node, _start.offset + length);\n          }\n          if (_end.node === currentNode) {\n            range._setLiveRangeEnd(node, _end.offset + length);\n          }\n        }\n\n        for (const range of parentNode._referencedRanges) {\n          const { _start, _end } = range;\n\n          if (_start.node === parentNode && _start.offset === currentNodeIndex) {\n            range._setLiveRangeStart(node, length);\n          }\n          if (_end.node === parentNode && _end.offset === currentNodeIndex) {\n            range._setLiveRangeEnd(node, length);\n          }\n        }\n\n        length += nodeLength(currentNode);\n        currentNode = domSymbolTree.nextSibling(currentNode);\n      }\n\n      for (const continuousExclusiveTextNode of continuousExclusiveTextNodes) {\n        parentNode._remove(continuousExclusiveTextNode);\n      }\n    }\n  }\n\n  get parentElement() {\n    const parentNode = domSymbolTree.parent(this);\n    return parentNode !== null && parentNode.nodeType === NODE_TYPE.ELEMENT_NODE ? parentNode : null;\n  }\n\n  get baseURI() {\n    return documentBaseURLSerialized(this._ownerDocument);\n  }\n\n  compareDocumentPosition(other) {\n    // Let node1 be other and node2 be the context object.\n    let node1 = other;\n    let node2 = this;\n\n    let attr1 = null;\n    let attr2 = null;\n\n    if (node1.nodeType === NODE_TYPE.ATTRIBUTE_NODE) {\n      attr1 = node1;\n      node1 = attr1._element;\n    }\n\n    if (node2.nodeType === NODE_TYPE.ATTRIBUTE_NODE) {\n      attr2 = node2;\n      node2 = attr2._element;\n\n      if (attr1 !== null && node1 !== null && node2 === node1) {\n        for (const attr of node2._attributeList) {\n          if (nodeEquals(attr, attr1)) {\n            return NODE_DOCUMENT_POSITION.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC |\n              NODE_DOCUMENT_POSITION.DOCUMENT_POSITION_PRECEDING;\n          }\n\n          if (nodeEquals(attr, attr2)) {\n            return NODE_DOCUMENT_POSITION.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC |\n              NODE_DOCUMENT_POSITION.DOCUMENT_POSITION_FOLLOWING;\n          }\n        }\n      }\n    }\n\n    const result = domSymbolTree.compareTreePosition(node2, node1);\n\n    // “If other and reference are not in the same tree, return the result of adding DOCUMENT_POSITION_DISCONNECTED,\n    //  DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC, and either DOCUMENT_POSITION_PRECEDING or\n    // DOCUMENT_POSITION_FOLLOWING, with the constraint that this is to be consistent, together.”\n    if (result === NODE_DOCUMENT_POSITION.DOCUMENT_POSITION_DISCONNECTED) {\n      // symbol-tree does not add these bits required by the spec:\n      return NODE_DOCUMENT_POSITION.DOCUMENT_POSITION_DISCONNECTED |\n        NODE_DOCUMENT_POSITION.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC |\n        NODE_DOCUMENT_POSITION.DOCUMENT_POSITION_FOLLOWING;\n    }\n\n    return result;\n  }\n\n  lookupPrefix(namespace) {\n    if (namespace === null || namespace === \"\") {\n      return null;\n    }\n\n    switch (this.nodeType) {\n      case NODE_TYPE.ELEMENT_NODE: {\n        return locateNamespacePrefix(this, namespace);\n      }\n      case NODE_TYPE.DOCUMENT_NODE: {\n        return this.documentElement !== null ? locateNamespacePrefix(this.documentElement, namespace) : null;\n      }\n      case NODE_TYPE.DOCUMENT_TYPE_NODE:\n      case NODE_TYPE.DOCUMENT_FRAGMENT_NODE: {\n        return null;\n      }\n      case NODE_TYPE.ATTRIBUTE_NODE: {\n        return this._element !== null ? locateNamespacePrefix(this._element, namespace) : null;\n      }\n      default: {\n        return this.parentElement !== null ? locateNamespacePrefix(this.parentElement, namespace) : null;\n      }\n    }\n  }\n\n  lookupNamespaceURI(prefix) {\n    if (prefix === \"\") {\n      prefix = null;\n    }\n\n    return locateNamespace(this, prefix);\n  }\n\n  isDefaultNamespace(namespace) {\n    if (namespace === \"\") {\n      namespace = null;\n    }\n\n    const defaultNamespace = locateNamespace(this, null);\n    return defaultNamespace === namespace;\n  }\n\n  contains(other) {\n    return isInclusiveAncestor(this, other);\n  }\n\n  isEqualNode(node) {\n    if (node === null) {\n      return false;\n    }\n\n    // Fast-path, not in the spec\n    if (this === node) {\n      return true;\n    }\n\n    return nodeEquals(this, node);\n  }\n\n  isSameNode(node) {\n    if (this === node) {\n      return true;\n    }\n\n    return false;\n  }\n\n  cloneNode(deep) {\n    if (isShadowRoot(this)) {\n      throw DOMException.create(this._globalObject, [\"ShadowRoot nodes are not clonable.\", \"NotSupportedError\"]);\n    }\n\n    deep = Boolean(deep);\n\n    return clone(this, undefined, deep);\n  }\n\n  get nodeValue() {\n    switch (this.nodeType) {\n      case NODE_TYPE.ATTRIBUTE_NODE: {\n        return this._value;\n      }\n      case NODE_TYPE.TEXT_NODE:\n      case NODE_TYPE.CDATA_SECTION_NODE: // CDATASection is a subclass of Text\n      case NODE_TYPE.PROCESSING_INSTRUCTION_NODE:\n      case NODE_TYPE.COMMENT_NODE: {\n        return this._data;\n      }\n      default: {\n        return null;\n      }\n    }\n  }\n\n  set nodeValue(value) {\n    if (value === null) {\n      value = \"\";\n    }\n\n    switch (this.nodeType) {\n      case NODE_TYPE.ATTRIBUTE_NODE: {\n        setAnExistingAttributeValue(this, value);\n        break;\n      }\n      case NODE_TYPE.TEXT_NODE:\n      case NODE_TYPE.CDATA_SECTION_NODE: // CDATASection is a subclass of Text\n      case NODE_TYPE.PROCESSING_INSTRUCTION_NODE:\n      case NODE_TYPE.COMMENT_NODE: {\n        this.replaceData(0, this.length, value);\n        break;\n      }\n    }\n  }\n\n  // https://dom.spec.whatwg.org/#dom-node-textcontent\n  get textContent() {\n    switch (this.nodeType) {\n      case NODE_TYPE.DOCUMENT_FRAGMENT_NODE:\n      case NODE_TYPE.ELEMENT_NODE: {\n        let text = \"\";\n        for (const child of domSymbolTree.treeIterator(this)) {\n          if (child.nodeType === NODE_TYPE.TEXT_NODE || child.nodeType === NODE_TYPE.CDATA_SECTION_NODE) {\n            text += child.nodeValue;\n          }\n        }\n        return text;\n      }\n\n      case NODE_TYPE.ATTRIBUTE_NODE: {\n        return this._value;\n      }\n\n      case NODE_TYPE.TEXT_NODE:\n      case NODE_TYPE.CDATA_SECTION_NODE: // CDATASection is a subclass of Text\n      case NODE_TYPE.PROCESSING_INSTRUCTION_NODE:\n      case NODE_TYPE.COMMENT_NODE: {\n        return this._data;\n      }\n\n      default: {\n        return null;\n      }\n    }\n  }\n  set textContent(value) {\n    if (value === null) {\n      value = \"\";\n    }\n\n    switch (this.nodeType) {\n      case NODE_TYPE.DOCUMENT_FRAGMENT_NODE:\n      case NODE_TYPE.ELEMENT_NODE: {\n        // https://dom.spec.whatwg.org/#string-replace-all\n        let nodeImpl = null;\n\n        if (value !== \"\") {\n          nodeImpl = this._ownerDocument.createTextNode(value);\n        }\n\n        this._replaceAll(nodeImpl);\n        break;\n      }\n\n      case NODE_TYPE.ATTRIBUTE_NODE: {\n        setAnExistingAttributeValue(this, value);\n        break;\n      }\n\n      case NODE_TYPE.TEXT_NODE:\n      case NODE_TYPE.CDATA_SECTION_NODE: // CDATASection is a subclass of Text\n      case NODE_TYPE.PROCESSING_INSTRUCTION_NODE:\n      case NODE_TYPE.COMMENT_NODE: {\n        this.replaceData(0, this.length, value);\n        break;\n      }\n    }\n  }\n\n  // https://dom.spec.whatwg.org/#dom-node-insertbefore\n  insertBefore(nodeImpl, childImpl) {\n    return this._preInsert(nodeImpl, childImpl);\n  }\n\n  // https://dom.spec.whatwg.org/#dom-node-appendchild\n  appendChild(nodeImpl) {\n    return this._append(nodeImpl);\n  }\n\n  // https://dom.spec.whatwg.org/#dom-node-replacechild\n  replaceChild(nodeImpl, childImpl) {\n    return this._replace(nodeImpl, childImpl);\n  }\n\n  // https://dom.spec.whatwg.org/#dom-node-removechild\n  removeChild(oldChildImpl) {\n    return this._preRemove(oldChildImpl);\n  }\n\n  // https://dom.spec.whatwg.org/#concept-node-ensure-pre-insertion-validity\n  _preInsertValidity(nodeImpl, childImpl) {\n    const { nodeType, nodeName } = nodeImpl;\n    const { nodeType: parentType, nodeName: parentName } = this;\n\n    if (\n      parentType !== NODE_TYPE.DOCUMENT_NODE &&\n      parentType !== NODE_TYPE.DOCUMENT_FRAGMENT_NODE &&\n      parentType !== NODE_TYPE.ELEMENT_NODE\n    ) {\n      throw DOMException.create(this._globalObject, [\n        `Node can't be inserted in a ${parentName} parent.`,\n        \"HierarchyRequestError\"\n      ]);\n    }\n\n    if (isHostInclusiveAncestor(nodeImpl, this)) {\n      throw DOMException.create(this._globalObject, [\n        \"The operation would yield an incorrect node tree.\",\n        \"HierarchyRequestError\"\n      ]);\n    }\n\n    if (childImpl && domSymbolTree.parent(childImpl) !== this) {\n      throw DOMException.create(this._globalObject, [\n        \"The child can not be found in the parent.\",\n        \"NotFoundError\"\n      ]);\n    }\n\n    if (\n      nodeType !== NODE_TYPE.DOCUMENT_FRAGMENT_NODE &&\n      nodeType !== NODE_TYPE.DOCUMENT_TYPE_NODE &&\n      nodeType !== NODE_TYPE.ELEMENT_NODE &&\n      nodeType !== NODE_TYPE.TEXT_NODE &&\n      nodeType !== NODE_TYPE.CDATA_SECTION_NODE && // CData section extends from Text\n      nodeType !== NODE_TYPE.PROCESSING_INSTRUCTION_NODE &&\n      nodeType !== NODE_TYPE.COMMENT_NODE\n    ) {\n      throw DOMException.create(this._globalObject, [\n        `${nodeName} node can't be inserted in parent node.`,\n        \"HierarchyRequestError\"\n      ]);\n    }\n\n    if (\n      (nodeType === NODE_TYPE.TEXT_NODE && parentType === NODE_TYPE.DOCUMENT_NODE) ||\n      (nodeType === NODE_TYPE.DOCUMENT_TYPE_NODE && parentType !== NODE_TYPE.DOCUMENT_NODE)\n    ) {\n      throw DOMException.create(this._globalObject, [\n        `${nodeName} node can't be inserted in ${parentName} parent.`,\n        \"HierarchyRequestError\"\n      ]);\n    }\n\n    if (parentType === NODE_TYPE.DOCUMENT_NODE) {\n      const nodeChildren = domSymbolTree.childrenToArray(nodeImpl);\n      const parentChildren = domSymbolTree.childrenToArray(this);\n\n      switch (nodeType) {\n        case NODE_TYPE.DOCUMENT_FRAGMENT_NODE: {\n          const nodeChildrenElements = nodeChildren.filter(child => child.nodeType === NODE_TYPE.ELEMENT_NODE);\n          if (nodeChildrenElements.length > 1) {\n            throw DOMException.create(this._globalObject, [\n              `Invalid insertion of ${nodeName} node in ${parentName} node.`,\n              \"HierarchyRequestError\"\n            ]);\n          }\n\n          const hasNodeTextChildren = nodeChildren.some(child => child.nodeType === NODE_TYPE.TEXT_NODE);\n          if (hasNodeTextChildren) {\n            throw DOMException.create(this._globalObject, [\n              `Invalid insertion of ${nodeName} node in ${parentName} node.`,\n              \"HierarchyRequestError\"\n            ]);\n          }\n\n          if (\n            nodeChildrenElements.length === 1 &&\n            (\n              parentChildren.some(child => child.nodeType === NODE_TYPE.ELEMENT_NODE) ||\n              (childImpl && childImpl.nodeType === NODE_TYPE.DOCUMENT_TYPE_NODE) ||\n              (\n                childImpl &&\n                domSymbolTree.nextSibling(childImpl) &&\n                domSymbolTree.nextSibling(childImpl).nodeType === NODE_TYPE.DOCUMENT_TYPE_NODE\n              )\n            )\n          ) {\n            throw DOMException.create(this._globalObject, [\n              `Invalid insertion of ${nodeName} node in ${parentName} node.`,\n              \"HierarchyRequestError\"\n            ]);\n          }\n          break;\n        }\n\n        case NODE_TYPE.ELEMENT_NODE:\n          if (\n            parentChildren.some(child => child.nodeType === NODE_TYPE.ELEMENT_NODE) ||\n            (childImpl && childImpl.nodeType === NODE_TYPE.DOCUMENT_TYPE_NODE) ||\n            (\n              childImpl &&\n              domSymbolTree.nextSibling(childImpl) &&\n              domSymbolTree.nextSibling(childImpl).nodeType === NODE_TYPE.DOCUMENT_TYPE_NODE\n            )\n          ) {\n            throw DOMException.create(this._globalObject, [\n              `Invalid insertion of ${nodeName} node in ${parentName} node.`,\n              \"HierarchyRequestError\"\n            ]);\n          }\n          break;\n\n        case NODE_TYPE.DOCUMENT_TYPE_NODE:\n          if (\n            parentChildren.some(child => child.nodeType === NODE_TYPE.DOCUMENT_TYPE_NODE) ||\n            (\n              childImpl &&\n              domSymbolTree.previousSibling(childImpl) &&\n              domSymbolTree.previousSibling(childImpl).nodeType === NODE_TYPE.ELEMENT_NODE\n            ) ||\n            (!childImpl && parentChildren.some(child => child.nodeType === NODE_TYPE.ELEMENT_NODE))\n          ) {\n            throw DOMException.create(this._globalObject, [\n              `Invalid insertion of ${nodeName} node in ${parentName} node.`,\n              \"HierarchyRequestError\"\n            ]);\n          }\n          break;\n      }\n    }\n  }\n\n  // https://dom.spec.whatwg.org/#concept-node-pre-insert\n  _preInsert(nodeImpl, childImpl) {\n    this._preInsertValidity(nodeImpl, childImpl);\n\n    let referenceChildImpl = childImpl;\n    if (referenceChildImpl === nodeImpl) {\n      referenceChildImpl = domSymbolTree.nextSibling(nodeImpl);\n    }\n\n    this._ownerDocument._adoptNode(nodeImpl);\n\n    this._insert(nodeImpl, referenceChildImpl);\n\n    return nodeImpl;\n  }\n\n  // https://dom.spec.whatwg.org/#concept-node-insert\n  _insert(nodeImpl, childImpl, suppressObservers) {\n    const count = nodeImpl.nodeType === NODE_TYPE.DOCUMENT_FRAGMENT_NODE ?\n        domSymbolTree.childrenCount(nodeImpl) :\n        1;\n\n    if (childImpl) {\n      const childIndex = domSymbolTree.index(childImpl);\n\n      for (const range of this._referencedRanges) {\n        const { _start, _end } = range;\n\n        if (_start.offset > childIndex) {\n          range._setLiveRangeStart(this, _start.offset + count);\n        }\n\n        if (_end.offset > childIndex) {\n          range._setLiveRangeEnd(this, _end.offset + count);\n        }\n      }\n    }\n\n    const nodesImpl = nodeImpl.nodeType === NODE_TYPE.DOCUMENT_FRAGMENT_NODE ?\n      domSymbolTree.childrenToArray(nodeImpl) :\n      [nodeImpl];\n\n    if (nodeImpl.nodeType === NODE_TYPE.DOCUMENT_FRAGMENT_NODE) {\n      let grandChildImpl;\n      while ((grandChildImpl = domSymbolTree.firstChild(nodeImpl))) {\n        nodeImpl._remove(grandChildImpl, true);\n      }\n    }\n\n    if (nodeImpl.nodeType === NODE_TYPE.DOCUMENT_FRAGMENT_NODE) {\n      queueTreeMutationRecord(nodeImpl, [], nodesImpl, null, null);\n    }\n\n    const previousChildImpl = childImpl ?\n      domSymbolTree.previousSibling(childImpl) :\n      domSymbolTree.lastChild(this);\n\n    let isConnected;\n\n    for (const node of nodesImpl) {\n      if (!childImpl) {\n        domSymbolTree.appendChild(this, node);\n      } else {\n        domSymbolTree.insertBefore(childImpl, node);\n      }\n\n      if (\n        (this.nodeType === NODE_TYPE.ELEMENT_NODE && this._shadowRoot !== null) &&\n        (node.nodeType === NODE_TYPE.ELEMENT_NODE || node.nodeType === NODE_TYPE.TEXT_NODE)\n      ) {\n        assignSlot(node);\n      }\n\n      this._modified();\n\n      if (node.nodeType === NODE_TYPE.TEXT_NODE ||\n          node.nodeType === NODE_TYPE.CDATA_SECTION_NODE) {\n        this._childTextContentChangeSteps();\n      }\n\n      if (isSlot(this) && this._assignedNodes.length === 0 && isShadowRoot(nodeRoot(this))) {\n        signalSlotChange(this);\n      }\n\n      const root = nodeRoot(node);\n      if (isShadowRoot(root)) {\n        assignSlotableForTree(root);\n      }\n\n      if (this._attached && nodeImpl._attach) {\n        node._attach();\n      }\n\n      this._descendantAdded(this, node);\n\n      if (isConnected === undefined) {\n        isConnected = node.isConnected;\n      }\n\n      if (isConnected) {\n        for (const inclusiveDescendant of shadowIncludingInclusiveDescendantsIterator(node)) {\n          if (inclusiveDescendant._ceState === \"custom\") {\n            enqueueCECallbackReaction(inclusiveDescendant, \"connectedCallback\", []);\n          } else {\n            tryUpgradeElement(inclusiveDescendant);\n          }\n        }\n      }\n    }\n\n    if (!suppressObservers) {\n      queueTreeMutationRecord(this, nodesImpl, [], previousChildImpl, childImpl);\n    }\n  }\n\n  // https://dom.spec.whatwg.org/#concept-node-append\n  _append(nodeImpl) {\n    return this._preInsert(nodeImpl, null);\n  }\n\n  // https://dom.spec.whatwg.org/#concept-node-replace\n  _replace(nodeImpl, childImpl) {\n    const { nodeType, nodeName } = nodeImpl;\n    const { nodeType: parentType, nodeName: parentName } = this;\n\n    // Note: This section differs from the pre-insert validation algorithm.\n    if (\n      parentType !== NODE_TYPE.DOCUMENT_NODE &&\n      parentType !== NODE_TYPE.DOCUMENT_FRAGMENT_NODE &&\n      parentType !== NODE_TYPE.ELEMENT_NODE\n    ) {\n      throw DOMException.create(this._globalObject, [\n        `Node can't be inserted in a ${parentName} parent.`,\n        \"HierarchyRequestError\"\n      ]);\n    }\n\n    if (isHostInclusiveAncestor(nodeImpl, this)) {\n      throw DOMException.create(this._globalObject, [\n        \"The operation would yield an incorrect node tree.\",\n        \"HierarchyRequestError\"\n      ]);\n    }\n\n    if (childImpl && domSymbolTree.parent(childImpl) !== this) {\n      throw DOMException.create(this._globalObject, [\n        \"The child can not be found in the parent.\",\n        \"NotFoundError\"\n      ]);\n    }\n\n    if (\n      nodeType !== NODE_TYPE.DOCUMENT_FRAGMENT_NODE &&\n      nodeType !== NODE_TYPE.DOCUMENT_TYPE_NODE &&\n      nodeType !== NODE_TYPE.ELEMENT_NODE &&\n      nodeType !== NODE_TYPE.TEXT_NODE &&\n      nodeType !== NODE_TYPE.CDATA_SECTION_NODE && // CData section extends from Text\n      nodeType !== NODE_TYPE.PROCESSING_INSTRUCTION_NODE &&\n      nodeType !== NODE_TYPE.COMMENT_NODE\n    ) {\n      throw DOMException.create(this._globalObject, [\n        `${nodeName} node can't be inserted in parent node.`,\n        \"HierarchyRequestError\"\n      ]);\n    }\n\n    if (\n      (nodeType === NODE_TYPE.TEXT_NODE && parentType === NODE_TYPE.DOCUMENT_NODE) ||\n      (nodeType === NODE_TYPE.DOCUMENT_TYPE_NODE && parentType !== NODE_TYPE.DOCUMENT_NODE)\n    ) {\n      throw DOMException.create(this._globalObject, [\n        `${nodeName} node can't be inserted in ${parentName} parent.`,\n        \"HierarchyRequestError\"\n      ]);\n    }\n\n    if (parentType === NODE_TYPE.DOCUMENT_NODE) {\n      const nodeChildren = domSymbolTree.childrenToArray(nodeImpl);\n      const parentChildren = domSymbolTree.childrenToArray(this);\n\n      switch (nodeType) {\n        case NODE_TYPE.DOCUMENT_FRAGMENT_NODE: {\n          const nodeChildrenElements = nodeChildren.filter(child => child.nodeType === NODE_TYPE.ELEMENT_NODE);\n          if (nodeChildrenElements.length > 1) {\n            throw DOMException.create(this._globalObject, [\n              `Invalid insertion of ${nodeName} node in ${parentName} node.`,\n              \"HierarchyRequestError\"\n            ]);\n          }\n\n          const hasNodeTextChildren = nodeChildren.some(child => child.nodeType === NODE_TYPE.TEXT_NODE);\n          if (hasNodeTextChildren) {\n            throw DOMException.create(this._globalObject, [\n              `Invalid insertion of ${nodeName} node in ${parentName} node.`,\n              \"HierarchyRequestError\"\n            ]);\n          }\n\n\n          const parentChildElements = parentChildren.filter(child => child.nodeType === NODE_TYPE.ELEMENT_NODE);\n          if (\n            nodeChildrenElements.length === 1 &&\n            (\n              (parentChildElements.length === 1 && parentChildElements[0] !== childImpl) ||\n              (\n                childImpl &&\n                domSymbolTree.nextSibling(childImpl) &&\n                domSymbolTree.nextSibling(childImpl).nodeType === NODE_TYPE.DOCUMENT_TYPE_NODE\n              )\n            )\n          ) {\n            throw DOMException.create(this._globalObject, [\n              `Invalid insertion of ${nodeName} node in ${parentName} node.`,\n              \"HierarchyRequestError\"\n            ]);\n          }\n          break;\n        }\n\n        case NODE_TYPE.ELEMENT_NODE:\n          if (\n            parentChildren.some(child => child.nodeType === NODE_TYPE.ELEMENT_NODE && child !== childImpl) ||\n            (\n              childImpl &&\n              domSymbolTree.nextSibling(childImpl) &&\n              domSymbolTree.nextSibling(childImpl).nodeType === NODE_TYPE.DOCUMENT_TYPE_NODE\n            )\n          ) {\n            throw DOMException.create(this._globalObject, [\n              `Invalid insertion of ${nodeName} node in ${parentName} node.`,\n              \"HierarchyRequestError\"\n            ]);\n          }\n          break;\n\n        case NODE_TYPE.DOCUMENT_TYPE_NODE:\n          if (\n            parentChildren.some(child => child.nodeType === NODE_TYPE.DOCUMENT_TYPE_NODE && child !== childImpl) ||\n            (\n              childImpl &&\n              domSymbolTree.previousSibling(childImpl) &&\n              domSymbolTree.previousSibling(childImpl).nodeType === NODE_TYPE.ELEMENT_NODE\n            )\n          ) {\n            throw DOMException.create(this._globalObject, [\n              `Invalid insertion of ${nodeName} node in ${parentName} node.`,\n              \"HierarchyRequestError\"\n            ]);\n          }\n          break;\n      }\n    }\n\n    let referenceChildImpl = domSymbolTree.nextSibling(childImpl);\n    if (referenceChildImpl === nodeImpl) {\n      referenceChildImpl = domSymbolTree.nextSibling(nodeImpl);\n    }\n\n    const previousSiblingImpl = domSymbolTree.previousSibling(childImpl);\n\n    this._ownerDocument._adoptNode(nodeImpl);\n\n    let removedNodesImpl = [];\n\n    if (domSymbolTree.parent(childImpl)) {\n      removedNodesImpl = [childImpl];\n      this._remove(childImpl, true);\n    }\n\n    const nodesImpl = nodeImpl.nodeType === NODE_TYPE.DOCUMENT_FRAGMENT_NODE ?\n      domSymbolTree.childrenToArray(nodeImpl) :\n      [nodeImpl];\n\n    this._insert(nodeImpl, referenceChildImpl, true);\n\n    queueTreeMutationRecord(this, nodesImpl, removedNodesImpl, previousSiblingImpl, referenceChildImpl);\n\n    return childImpl;\n  }\n\n  // https://dom.spec.whatwg.org/#concept-node-replace-all\n  _replaceAll(nodeImpl) {\n    if (nodeImpl !== null) {\n      this._ownerDocument._adoptNode(nodeImpl);\n    }\n\n    const removedNodesImpl = domSymbolTree.childrenToArray(this);\n\n    let addedNodesImpl;\n    if (nodeImpl === null) {\n      addedNodesImpl = [];\n    } else if (nodeImpl.nodeType === NODE_TYPE.DOCUMENT_FRAGMENT_NODE) {\n      addedNodesImpl = domSymbolTree.childrenToArray(nodeImpl);\n    } else {\n      addedNodesImpl = [nodeImpl];\n    }\n\n    for (const childImpl of domSymbolTree.childrenIterator(this)) {\n      this._remove(childImpl, true);\n    }\n\n    if (nodeImpl !== null) {\n      this._insert(nodeImpl, null, true);\n    }\n\n    if (addedNodesImpl.length > 0 || removedNodesImpl.length > 0) {\n      queueTreeMutationRecord(this, addedNodesImpl, removedNodesImpl, null, null);\n    }\n  }\n\n  // https://dom.spec.whatwg.org/#concept-node-pre-remove\n  _preRemove(childImpl) {\n    if (domSymbolTree.parent(childImpl) !== this) {\n      throw DOMException.create(this._globalObject, [\n        \"The node to be removed is not a child of this node.\",\n        \"NotFoundError\"\n      ]);\n    }\n\n    this._remove(childImpl);\n\n    return childImpl;\n  }\n\n  // https://dom.spec.whatwg.org/#concept-node-remove\n  _remove(nodeImpl, suppressObservers) {\n    const index = domSymbolTree.index(nodeImpl);\n\n    for (const descendant of domSymbolTree.treeIterator(nodeImpl)) {\n      for (const range of descendant._referencedRanges) {\n        const { _start, _end } = range;\n\n        if (_start.node === descendant) {\n          range._setLiveRangeStart(this, index);\n        }\n\n        if (_end.node === descendant) {\n          range._setLiveRangeEnd(this, index);\n        }\n      }\n    }\n\n    for (const range of this._referencedRanges) {\n      const { _start, _end } = range;\n\n      if (_start.node === this && _start.offset > index) {\n        range._setLiveRangeStart(this, _start.offset - 1);\n      }\n\n      if (_end.node === this && _end.offset > index) {\n        range._setLiveRangeEnd(this, _end.offset - 1);\n      }\n    }\n\n    if (this._ownerDocument) {\n      this._ownerDocument._runPreRemovingSteps(nodeImpl);\n    }\n\n    const oldPreviousSiblingImpl = domSymbolTree.previousSibling(nodeImpl);\n    const oldNextSiblingImpl = domSymbolTree.nextSibling(nodeImpl);\n\n    domSymbolTree.remove(nodeImpl);\n\n    if (nodeImpl._assignedSlot) {\n      assignSlotable(nodeImpl._assignedSlot);\n    }\n\n    if (isSlot(this) && this._assignedNodes.length === 0 && isShadowRoot(nodeRoot(this))) {\n      signalSlotChange(this);\n    }\n\n    let hasSlotDescendant = isSlot(nodeImpl);\n    if (!hasSlotDescendant) {\n      for (const child of domSymbolTree.treeIterator(nodeImpl)) {\n        if (isSlot(child)) {\n          hasSlotDescendant = true;\n          break;\n        }\n      }\n    }\n\n    if (hasSlotDescendant) {\n      assignSlotableForTree(nodeRoot(this));\n      assignSlotableForTree(nodeImpl);\n    }\n\n    this._modified();\n    nodeImpl._detach();\n    this._descendantRemoved(this, nodeImpl);\n\n    if (this.isConnected) {\n      if (nodeImpl._ceState === \"custom\") {\n        enqueueCECallbackReaction(nodeImpl, \"disconnectedCallback\", []);\n      }\n\n      for (const descendantImpl of shadowIncludingDescendantsIterator(nodeImpl)) {\n        if (descendantImpl._ceState === \"custom\") {\n          enqueueCECallbackReaction(descendantImpl, \"disconnectedCallback\", []);\n        }\n      }\n    }\n\n    if (!suppressObservers) {\n      queueTreeMutationRecord(this, [], [nodeImpl], oldPreviousSiblingImpl, oldNextSiblingImpl);\n    }\n\n    if (nodeImpl.nodeType === NODE_TYPE.TEXT_NODE) {\n      this._childTextContentChangeSteps();\n    }\n  }\n}\n\nmodule.exports = {\n  implementation: NodeImpl\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}