{"ast":null,"code":"\"use strict\";\n\nconst nodeCrypto = require(\"crypto\");\n\nconst DOMException = require(\"domexception/webidl2js-wrapper\"); // https://w3c.github.io/webcrypto/#crypto-interface\n\n\nclass CryptoImpl {\n  constructor(globalObject) {\n    this._globalObject = globalObject;\n  } // https://w3c.github.io/webcrypto/#Crypto-method-getRandomValues\n\n\n  getRandomValues(array) {\n    // Note: this rejects Float32Array, Float64Array and DataView.\n    //\n    // We perform \"instance tests\" by comparing `array.constructor.name` so\n    // that the tests will be successful across realms.\n    const typeName = array.constructor.name;\n\n    if (!(typeName === \"Int8Array\" || typeName === \"Uint8Array\" || typeName === \"Uint8ClampedArray\" || typeName === \"Int16Array\" || typeName === \"Uint16Array\" || typeName === \"Int32Array\" || typeName === \"Uint32Array\" || typeName === \"BigInt64Array\" || typeName === \"BigUint64Array\")) {\n      throw DOMException.create(this._globalObject, [`getRandomValues() only accepts integer typed arrays`, \"TypeMismatchError\"]);\n    }\n\n    if (array.byteLength > 65536) {\n      throw DOMException.create(this._globalObject, [`getRandomValues() cannot generate more than 65536 bytes of random values; ` + `${array.byteLength} bytes were requested`, \"QuotaExceededError\"]);\n    }\n\n    nodeCrypto.randomFillSync(array);\n    return array;\n  }\n\n}\n\nexports.implementation = CryptoImpl;","map":{"version":3,"names":["nodeCrypto","require","DOMException","CryptoImpl","constructor","globalObject","_globalObject","getRandomValues","array","typeName","name","create","byteLength","randomFillSync","exports","implementation"],"sources":["C:/Users/Danil/Desktop/122/node_modules/jsdom/lib/jsdom/living/crypto/Crypto-impl.js"],"sourcesContent":["\"use strict\";\n\nconst nodeCrypto = require(\"crypto\");\nconst DOMException = require(\"domexception/webidl2js-wrapper\");\n\n// https://w3c.github.io/webcrypto/#crypto-interface\nclass CryptoImpl {\n  constructor(globalObject) {\n    this._globalObject = globalObject;\n  }\n\n  // https://w3c.github.io/webcrypto/#Crypto-method-getRandomValues\n  getRandomValues(array) {\n    // Note: this rejects Float32Array, Float64Array and DataView.\n    //\n    // We perform \"instance tests\" by comparing `array.constructor.name` so\n    // that the tests will be successful across realms.\n    const typeName = array.constructor.name;\n    if (!(typeName === \"Int8Array\" ||\n        typeName === \"Uint8Array\" ||\n        typeName === \"Uint8ClampedArray\" ||\n        typeName === \"Int16Array\" ||\n        typeName === \"Uint16Array\" ||\n        typeName === \"Int32Array\" ||\n        typeName === \"Uint32Array\" ||\n        typeName === \"BigInt64Array\" ||\n        typeName === \"BigUint64Array\")) {\n      throw DOMException.create(this._globalObject, [\n        `getRandomValues() only accepts integer typed arrays`,\n        \"TypeMismatchError\"\n      ]);\n    }\n\n    if (array.byteLength > 65536) {\n      throw DOMException.create(this._globalObject, [\n        `getRandomValues() cannot generate more than 65536 bytes of random values; ` +\n        `${array.byteLength} bytes were requested`,\n        \"QuotaExceededError\"\n      ]);\n    }\n\n    nodeCrypto.randomFillSync(array);\n    return array;\n  }\n}\n\nexports.implementation = CryptoImpl;\n"],"mappings":"AAAA;;AAEA,MAAMA,UAAU,GAAGC,OAAO,CAAC,QAAD,CAA1B;;AACA,MAAMC,YAAY,GAAGD,OAAO,CAAC,gCAAD,CAA5B,C,CAEA;;;AACA,MAAME,UAAN,CAAiB;EACfC,WAAW,CAACC,YAAD,EAAe;IACxB,KAAKC,aAAL,GAAqBD,YAArB;EACD,CAHc,CAKf;;;EACAE,eAAe,CAACC,KAAD,EAAQ;IACrB;IACA;IACA;IACA;IACA,MAAMC,QAAQ,GAAGD,KAAK,CAACJ,WAAN,CAAkBM,IAAnC;;IACA,IAAI,EAAED,QAAQ,KAAK,WAAb,IACFA,QAAQ,KAAK,YADX,IAEFA,QAAQ,KAAK,mBAFX,IAGFA,QAAQ,KAAK,YAHX,IAIFA,QAAQ,KAAK,aAJX,IAKFA,QAAQ,KAAK,YALX,IAMFA,QAAQ,KAAK,aANX,IAOFA,QAAQ,KAAK,eAPX,IAQFA,QAAQ,KAAK,gBARb,CAAJ,EAQoC;MAClC,MAAMP,YAAY,CAACS,MAAb,CAAoB,KAAKL,aAAzB,EAAwC,CAC3C,qDAD2C,EAE5C,mBAF4C,CAAxC,CAAN;IAID;;IAED,IAAIE,KAAK,CAACI,UAAN,GAAmB,KAAvB,EAA8B;MAC5B,MAAMV,YAAY,CAACS,MAAb,CAAoB,KAAKL,aAAzB,EAAwC,CAC3C,4EAAD,GACC,GAAEE,KAAK,CAACI,UAAW,uBAFwB,EAG5C,oBAH4C,CAAxC,CAAN;IAKD;;IAEDZ,UAAU,CAACa,cAAX,CAA0BL,KAA1B;IACA,OAAOA,KAAP;EACD;;AArCc;;AAwCjBM,OAAO,CAACC,cAAR,GAAyBZ,UAAzB"},"metadata":{},"sourceType":"script"}