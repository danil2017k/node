{"ast":null,"code":"\"use strict\";\n\nexports.removeLeadingAndTrailingHTTPWhitespace = string => {\n  return string.replace(/^[ \\t\\n\\r]+/u, \"\").replace(/[ \\t\\n\\r]+$/u, \"\");\n};\n\nexports.removeTrailingHTTPWhitespace = string => {\n  return string.replace(/[ \\t\\n\\r]+$/u, \"\");\n};\n\nexports.isHTTPWhitespaceChar = char => {\n  return char === \" \" || char === \"\\t\" || char === \"\\n\" || char === \"\\r\";\n};\n\nexports.solelyContainsHTTPTokenCodePoints = string => {\n  return /^[-!#$%&'*+.^_`|~A-Za-z0-9]*$/u.test(string);\n};\n\nexports.soleyContainsHTTPQuotedStringTokenCodePoints = string => {\n  return /^[\\t\\u0020-\\u007E\\u0080-\\u00FF]*$/u.test(string);\n};\n\nexports.asciiLowercase = string => {\n  return string.replace(/[A-Z]/ug, l => l.toLowerCase());\n}; // This variant only implements it with the extract-value flag set.\n\n\nexports.collectAnHTTPQuotedString = (input, position) => {\n  let value = \"\";\n  position++;\n\n  while (true) {\n    while (position < input.length && input[position] !== \"\\\"\" && input[position] !== \"\\\\\") {\n      value += input[position];\n      ++position;\n    }\n\n    if (position >= input.length) {\n      break;\n    }\n\n    const quoteOrBackslash = input[position];\n    ++position;\n\n    if (quoteOrBackslash === \"\\\\\") {\n      if (position >= input.length) {\n        value += \"\\\\\";\n        break;\n      }\n\n      value += input[position];\n      ++position;\n    } else {\n      break;\n    }\n  }\n\n  return [value, position];\n};","map":{"version":3,"names":["exports","removeLeadingAndTrailingHTTPWhitespace","string","replace","removeTrailingHTTPWhitespace","isHTTPWhitespaceChar","char","solelyContainsHTTPTokenCodePoints","test","soleyContainsHTTPQuotedStringTokenCodePoints","asciiLowercase","l","toLowerCase","collectAnHTTPQuotedString","input","position","value","length","quoteOrBackslash"],"sources":["C:/Users/Danil/Desktop/project1/node_modules/whatwg-mimetype/lib/utils.js"],"sourcesContent":["\"use strict\";\n\nexports.removeLeadingAndTrailingHTTPWhitespace = string => {\n  return string.replace(/^[ \\t\\n\\r]+/u, \"\").replace(/[ \\t\\n\\r]+$/u, \"\");\n};\n\nexports.removeTrailingHTTPWhitespace = string => {\n  return string.replace(/[ \\t\\n\\r]+$/u, \"\");\n};\n\nexports.isHTTPWhitespaceChar = char => {\n  return char === \" \" || char === \"\\t\" || char === \"\\n\" || char === \"\\r\";\n};\n\nexports.solelyContainsHTTPTokenCodePoints = string => {\n  return /^[-!#$%&'*+.^_`|~A-Za-z0-9]*$/u.test(string);\n};\n\nexports.soleyContainsHTTPQuotedStringTokenCodePoints = string => {\n  return /^[\\t\\u0020-\\u007E\\u0080-\\u00FF]*$/u.test(string);\n};\n\nexports.asciiLowercase = string => {\n  return string.replace(/[A-Z]/ug, l => l.toLowerCase());\n};\n\n// This variant only implements it with the extract-value flag set.\nexports.collectAnHTTPQuotedString = (input, position) => {\n  let value = \"\";\n\n  position++;\n\n  while (true) {\n    while (position < input.length && input[position] !== \"\\\"\" && input[position] !== \"\\\\\") {\n      value += input[position];\n      ++position;\n    }\n\n    if (position >= input.length) {\n      break;\n    }\n\n    const quoteOrBackslash = input[position];\n    ++position;\n\n    if (quoteOrBackslash === \"\\\\\") {\n      if (position >= input.length) {\n        value += \"\\\\\";\n        break;\n      }\n\n      value += input[position];\n      ++position;\n    } else {\n      break;\n    }\n  }\n\n  return [value, position];\n};\n"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,sCAAR,GAAiDC,MAAM,IAAI;EACzD,OAAOA,MAAM,CAACC,OAAP,CAAe,cAAf,EAA+B,EAA/B,EAAmCA,OAAnC,CAA2C,cAA3C,EAA2D,EAA3D,CAAP;AACD,CAFD;;AAIAH,OAAO,CAACI,4BAAR,GAAuCF,MAAM,IAAI;EAC/C,OAAOA,MAAM,CAACC,OAAP,CAAe,cAAf,EAA+B,EAA/B,CAAP;AACD,CAFD;;AAIAH,OAAO,CAACK,oBAAR,GAA+BC,IAAI,IAAI;EACrC,OAAOA,IAAI,KAAK,GAAT,IAAgBA,IAAI,KAAK,IAAzB,IAAiCA,IAAI,KAAK,IAA1C,IAAkDA,IAAI,KAAK,IAAlE;AACD,CAFD;;AAIAN,OAAO,CAACO,iCAAR,GAA4CL,MAAM,IAAI;EACpD,OAAO,iCAAiCM,IAAjC,CAAsCN,MAAtC,CAAP;AACD,CAFD;;AAIAF,OAAO,CAACS,4CAAR,GAAuDP,MAAM,IAAI;EAC/D,OAAO,qCAAqCM,IAArC,CAA0CN,MAA1C,CAAP;AACD,CAFD;;AAIAF,OAAO,CAACU,cAAR,GAAyBR,MAAM,IAAI;EACjC,OAAOA,MAAM,CAACC,OAAP,CAAe,SAAf,EAA0BQ,CAAC,IAAIA,CAAC,CAACC,WAAF,EAA/B,CAAP;AACD,CAFD,C,CAIA;;;AACAZ,OAAO,CAACa,yBAAR,GAAoC,CAACC,KAAD,EAAQC,QAAR,KAAqB;EACvD,IAAIC,KAAK,GAAG,EAAZ;EAEAD,QAAQ;;EAER,OAAO,IAAP,EAAa;IACX,OAAOA,QAAQ,GAAGD,KAAK,CAACG,MAAjB,IAA2BH,KAAK,CAACC,QAAD,CAAL,KAAoB,IAA/C,IAAuDD,KAAK,CAACC,QAAD,CAAL,KAAoB,IAAlF,EAAwF;MACtFC,KAAK,IAAIF,KAAK,CAACC,QAAD,CAAd;MACA,EAAEA,QAAF;IACD;;IAED,IAAIA,QAAQ,IAAID,KAAK,CAACG,MAAtB,EAA8B;MAC5B;IACD;;IAED,MAAMC,gBAAgB,GAAGJ,KAAK,CAACC,QAAD,CAA9B;IACA,EAAEA,QAAF;;IAEA,IAAIG,gBAAgB,KAAK,IAAzB,EAA+B;MAC7B,IAAIH,QAAQ,IAAID,KAAK,CAACG,MAAtB,EAA8B;QAC5BD,KAAK,IAAI,IAAT;QACA;MACD;;MAEDA,KAAK,IAAIF,KAAK,CAACC,QAAD,CAAd;MACA,EAAEA,QAAF;IACD,CARD,MAQO;MACL;IACD;EACF;;EAED,OAAO,CAACC,KAAD,EAAQD,QAAR,CAAP;AACD,CAhCD"},"metadata":{},"sourceType":"script"}