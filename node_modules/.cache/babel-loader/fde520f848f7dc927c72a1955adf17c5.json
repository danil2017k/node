{"ast":null,"code":"import ImageViewer from '@/components/ImageViewer.vue';\nimport { mapState, mapGetters, mapActions } from 'vuex';\nexport default {\n  name: 'ViewerOverlay',\n  components: {\n    ImageViewer,\n    Files: () => import('./FilesScroll')\n  },\n  props: {\n    file: {\n      type: Object,\n      required: true\n    },\n    primary: {\n      type: Boolean,\n      required: true\n    },\n    isOwner: Boolean,\n    isWebinar: Boolean,\n    ableToAct: Boolean\n  },\n\n  data() {\n    return {\n      images: [{\n        id: 1,\n        name: '17647200532869870230',\n        selected: true\n      }, {\n        id: 2,\n        name: '3990297129929551095',\n        selected: false\n      }],\n      selectedImage: '17647200532869870230',\n      // file: fileObject,\n      //           {\n      //               case_id: '1',\n      //               id: '101',\n      //               preview: null, \n      // type: \"snapshot\", \n      //               type_data: { rulers: [], marks: [] },\n      //               tileSources: `${publicPath}pyramids/47/WSI/Pyramids/DZ/3990297129929551095.dzi`\n      //           },\n      // primary: true,\n      // isOwner: true,\n      // isWebinar: false,\n      // ableToAct: true,\n      publicPath: 'localhost:8080/',\n      isFilePanelVisible: false,\n      screenshot: {\n        show: false,\n        title: '',\n        saved: false,\n        data: null\n      },\n      timeoutID: null,\n      allPanelsVisible: true // stains: [{}]\n\n    };\n  },\n\n  computed: {\n    isFile() {\n      return !!Object.keys(this.file).length;\n    },\n\n    isSnapshot() {\n      return this.isFile && this.file.type === 'snapshot';\n    },\n\n    ...mapState(['stains']),\n    ...mapGetters(['comparing', 'isMobile'])\n  },\n\n  mounted() {\n    this.checkFilePanelVisibility();\n    document.addEventListener('mousemove', this.showAllPanels);\n    this.showAllPanels();\n    this.hidePanels();\n  },\n\n  beforeDestroy() {\n    document.removeEventListener('mousemove', this.showAllPanels);\n    this.timeoutID = null;\n  },\n\n  watch: {\n    file() {\n      this.checkFilePanelVisibility();\n    }\n\n  },\n  methods: {\n    onKeydown(event) {\n      if (event.key === 'Escape') {\n        this.ableToAct && this.$emit('closeViewer', this.primary);\n      }\n    },\n\n    getStainName(stainId) {\n      return this.file.stains[0];\n    },\n\n    startDownload() {\n      if (this.isImage || this.isPdf) {\n        window.open(`/files/${this.file.name}`, '__blank');\n      }\n    },\n\n    checkFilePanelVisibility() {\n      this.isFilePanelVisible = !this.isFile;\n      this.$bus.$emit('filePanelVisibility', {\n        value: this.isFilePanelVisible,\n        primary: this.primary\n      });\n    },\n\n    toggleFilePanel() {\n      this.isFilePanelVisible = !this.isFilePanelVisible;\n      this.$bus.$emit('filePanelVisibility', {\n        value: this.isFilePanelVisible,\n        primary: this.primary\n      });\n    },\n\n    saveScreenshotToStore() {\n      if (!this.screenshot.saved) {\n        const screenshot = { ...this.screenshot.data\n        };\n        screenshot.title = this.screenshot.title;\n        screenshot.stain = this.screenshot.stain;\n        screenshot.isImage = this.screenshot.isImage;\n        this.saveScreenshot(screenshot);\n        this.screenshot.saved = true;\n        setTimeout(() => {\n          this.hideScreenshotModal();\n        }, 1500);\n      }\n    },\n\n    openScreenshotModal(screenshot, isImage = false) {\n      this.screenshot.isImage = isImage;\n\n      if (this.file.stains.length > 0) {\n        this.screenshot.stain = this.getStainName(this.file.stains[0]);\n        this.$refs.screenshotStain.textContent = this.screenshot.stain;\n      }\n\n      this.screenshot.show = true;\n      this.screenshot.data = screenshot;\n    },\n\n    hideScreenshotModal() {\n      this.screenshot.show = false;\n      setTimeout(() => {\n        this.screenshot.title = '';\n        this.screenshot.saved = false;\n        this.screenshot.data = null;\n        this.$refs.screenshotTitle.textContent = '';\n        this.$refs.screenshotStain.textContent = '';\n      }, 500);\n    },\n\n    updateScreenshotTitle($event) {\n      this.screenshot.title = $event.target.textContent;\n    },\n\n    updateScreenshotStain($event) {\n      this.screenshot.stain = $event.target.textContent;\n    },\n\n    bubbleFilescrollSelect(data) {\n      this.$emit('selectViewerFile', data);\n    },\n\n    showAllPanels() {\n      this.allPanelsVisible = true;\n\n      if (this.timeoutID) {\n        clearTimeout(this.timeoutID);\n      }\n\n      this.hidePanels();\n    },\n\n    hidePanels() {\n      this.timeoutID = setTimeout(() => {\n        if (this.isPdf) {\n          return;\n        }\n\n        this.allPanelsVisible = false;\n      }, 8000);\n    },\n\n    ...mapActions(['setViewerCompareMode', 'saveScreenshot'])\n  }\n};","map":{"version":3,"mappings":"AAwBA;AACA;AAGA;EACAA,qBADA;EAEAC;IACAC,WADA;IAEAC,aACA;EAHA,CAFA;EAQAC;IACAC;MACAC,YADA;MAEAC;IAFA,CADA;IAKAC;MACAF,aADA;MAEAC;IAFA,CALA;IASAE,gBATA;IAUAC,kBAVA;IAWAC;EAXA,CARA;;EAwBAC;IACA;MACAC,SACA;QACAC,KADA;QAEAd,4BAFA;QAGAe;MAHA,CADA,EAMA;QACAD,KADA;QAEAd,2BAFA;QAGAe;MAHA,CANA,CADA;MAaAC,qCAbA;MAcA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACAC,6BA3BA;MA4BAC,yBA5BA;MA6BAC;QACAC,WADA;QAEAC,SAFA;QAGAC,YAHA;QAIAV;MAJA,CA7BA;MAmCAW,eAnCA;MAoCAC,sBApCA,CAqCA;;IArCA;EAuCA,CAhEA;;EAiEAC;IACAC;MACA;IACA,CAHA;;IAIAC;MAEA;IACA,CAPA;;IAQA,uBARA;IASA;EATA,CAjEA;;EA4EAC;IACA;IACAC;IACA;IACA;EACA,CAjFA;;EAkFAC;IACAD;IACA;EACA,CArFA;;EAsFAE;IACA1B;MACA;IACA;;EAHA,CAtFA;EA2FA2B;IACAC;MACA;QACA;MACA;IACA,CALA;;IAMAC;MACA;IACA,CARA;;IASAC;MACA;QACAC;MACA;IACA,CAbA;;IAcAC;MACA;MACA;QAAAC;QAAA9B;MAAA;IACA,CAjBA;;IAkBA+B;MACA;MACA;QAAAD;QAAA9B;MAAA;IACA,CArBA;;IAsBAgC;MACA;QACA;QAAA;QACArB;QACAA;QACAA;QACA;QACA;QACAsB;UACA;QACA,CAFA,EAEA,IAFA;MAGA;IACA,CAlCA;;IAmCAC;MACA;;MACA;QACA;QACA;MACA;;MAEA;MACA;IACA,CA5CA;;IA6CAC;MACA;MACAF;QACA;QACA;QACA;QACA;QACA;MACA,CANA,EAMA,GANA;IAOA,CAtDA;;IAuDAG;MACA;IACA,CAzDA;;IA0DAC;MACA;IACA,CA5DA;;IA6DAC;MACA;IACA,CA/DA;;IAgEAC;MACA;;MACA;QACAC;MACA;;MACA;IACA,CAtEA;;IAuEAC;MACA;QACA;UACA;QACA;;QACA;MACA,CALA,EAKA,IALA;IAMA,CA9EA;;IA+EA;EA/EA;AA3FA","names":["name","components","ImageViewer","Files","props","file","type","required","primary","isOwner","isWebinar","ableToAct","data","images","id","selected","selectedImage","publicPath","isFilePanelVisible","screenshot","show","title","saved","timeoutID","allPanelsVisible","computed","isFile","isSnapshot","mounted","document","beforeDestroy","watch","methods","onKeydown","getStainName","startDownload","window","checkFilePanelVisibility","value","toggleFilePanel","saveScreenshotToStore","setTimeout","openScreenshotModal","hideScreenshotModal","updateScreenshotTitle","updateScreenshotStain","bubbleFilescrollSelect","showAllPanels","clearTimeout","hidePanels"],"sourceRoot":"src/components","sources":["ViewerOverlay.vue"],"sourcesContent":["<template lang=\"html\">\r\n    <div class=\"viewer-item\" :class=\"{'comparing': comparing}\" @touchstart.capture=\"showAllPanels\" @keydown=\"onKeydown($event)\">\r\n        <button v-if=\"ableToAct\" class=\"close\" :class=\"{ 'hidden' : !allPanelsVisible }\" @click=\"ableToAct ? $emit('closeViewer', primary) : void 0\" :title=\"$t('navigation.close')\"></button>\r\n        <ImageViewer :ableToAct=\"true\" :file=\"file\" :images=\"images\" :selectedImage=\"selectedImage\" :isWebinar=\"false\" :panelVisible=\"true\" :primary=\"primary\" />\r\n                <!-- <ImageViewer v-if=\"comparing\" :ableToAct=\"true\" :file=\"file\" :isWebinar=\"false\" :panelVisible=\"true\" :primary=\"false\" /> -->\r\n        <div class=\"infopanel\" :class=\"{ 'hidden' : !allPanelsVisible }\">\r\n            <div class=\"file-info-container\" :class=\"{'webinar-center': !ableToAct}\">\r\n                <button v-if=\"ableToAct\" class=\"download\" :class=\"{'hidden': !isFile || isSnapshot}\" :title=\"$t('case.viewer.download')\" @click=\"startDownload\"><i/></button>\r\n                <div class=\"file-info\">\r\n                    <p class=\"file-info-name\" :class=\"{'active': isFilePanelVisible}\" @click=\"ableToAct ? toggleFilePanel() : void 0\">{{ file.title }}</p>\r\n                    <div class=\"file-stains\" v-if=\"file.stains && file.stains.length\">\r\n                        <div class=\"file-stain\">{{ getStainName(file.stains[0]) }}</div>\r\n                    </div>\r\n                </div>\r\n                <button v-if=\"ableToAct\" class=\"compare \" :class=\"{'hidden': comparing || isMobile}\" @click=\"ableToAct ? setViewerCompareMode() : void 0\" :title=\"$t('case.viewer.compare')\"><i/></button>\r\n            </div>\r\n            <transition name=\"panel\">\r\n                <files v-if=\"isFilePanelVisible\" :selected=\"images.name\" :primary=\"primary\" :ableToAct=\"ableToAct\" :isWebinar=\"isWebinar\" @selectViewerFile=\"bubbleFilescrollSelect\" :images=\"images\" :selectedImage=\"selectedImage\" />\r\n            </transition>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport ImageViewer from '@/components/ImageViewer.vue'\r\nimport { mapState, mapGetters, mapActions } from 'vuex'\r\n\r\n\r\nexport default {\r\n    name: 'ViewerOverlay',\r\n    components: {\r\n        ImageViewer,\r\n        Files: () =>\r\n            import ('./FilesScroll'),\r\n    },\r\n\r\n    props: {\r\n        file: {\r\n            type: Object,\r\n            required: true\r\n        },\r\n        primary: {\r\n            type: Boolean,\r\n            required: true\r\n        },\r\n        isOwner: Boolean,\r\n        isWebinar: Boolean,\r\n        ableToAct: Boolean\r\n    },\r\n\r\n\r\n\r\n    data() {\r\n        return {\r\n            images: [\r\n                {\r\n                    id: 1,\r\n                    name: '17647200532869870230',\r\n                    selected: true\r\n                },\r\n                {\r\n                    id: 2,\r\n                    name: '3990297129929551095',\r\n                    selected: false\r\n                },\r\n            ],\r\n            selectedImage: '17647200532869870230',\r\n            // file: fileObject,\r\n  //           {\r\n  //               case_id: '1',\r\n  //               id: '101',\r\n  //               preview: null, \r\n  // type: \"snapshot\", \r\n  //               type_data: { rulers: [], marks: [] },\r\n  //               tileSources: `${publicPath}pyramids/47/WSI/Pyramids/DZ/3990297129929551095.dzi`\r\n  //           },\r\n            // primary: true,\r\n            // isOwner: true,\r\n            // isWebinar: false,\r\n            // ableToAct: true,\r\n            publicPath: 'localhost:8080/',\r\n            isFilePanelVisible: false,\r\n            screenshot: {\r\n                show: false,\r\n                title: '',\r\n                saved: false,\r\n                data: null\r\n            },\r\n            timeoutID: null,\r\n            allPanelsVisible: true,\r\n            // stains: [{}]\r\n        }\r\n    },\r\n    computed: {\r\n        isFile() {\r\n            return !!Object.keys(this.file).length\r\n        },\r\n        isSnapshot() {\r\n\r\n            return this.isFile && this.file.type === 'snapshot'\r\n        },\r\n        ...mapState(['stains']),\r\n        ...mapGetters(['comparing', 'isMobile'])\r\n    },\r\n    mounted() {\r\n        this.checkFilePanelVisibility()\r\n        document.addEventListener('mousemove', this.showAllPanels)\r\n        this.showAllPanels()\r\n        this.hidePanels()\r\n    },\r\n    beforeDestroy() {\r\n        document.removeEventListener('mousemove', this.showAllPanels)\r\n        this.timeoutID = null\r\n    },\r\n    watch: {\r\n        file() {\r\n            this.checkFilePanelVisibility()\r\n        }\r\n    },\r\n    methods: {\r\n        onKeydown(event) {\r\n            if (event.key === 'Escape') {\r\n                this.ableToAct && this.$emit('closeViewer', this.primary)\r\n            }\r\n        },\r\n        getStainName(stainId) {\r\n            return this.file.stains[0]\r\n        },\r\n        startDownload() {\r\n            if (this.isImage || this.isPdf) {\r\n                window.open(`/files/${this.file.name}`, '__blank')\r\n            }\r\n        },\r\n        checkFilePanelVisibility() {\r\n            this.isFilePanelVisible = !this.isFile\r\n            this.$bus.$emit('filePanelVisibility', { value: this.isFilePanelVisible, primary: this.primary })\r\n        },\r\n        toggleFilePanel() {\r\n            this.isFilePanelVisible = !this.isFilePanelVisible\r\n            this.$bus.$emit('filePanelVisibility', { value: this.isFilePanelVisible, primary: this.primary })\r\n        },\r\n        saveScreenshotToStore() {\r\n            if (!this.screenshot.saved) {\r\n                const screenshot = { ...this.screenshot.data }\r\n                screenshot.title = this.screenshot.title\r\n                screenshot.stain = this.screenshot.stain\r\n                screenshot.isImage = this.screenshot.isImage\r\n                this.saveScreenshot(screenshot)\r\n                this.screenshot.saved = true\r\n                setTimeout(() => {\r\n                    this.hideScreenshotModal()\r\n                }, 1500)\r\n            }\r\n        },\r\n        openScreenshotModal(screenshot, isImage = false) {\r\n            this.screenshot.isImage = isImage\r\n            if (this.file.stains.length > 0) {\r\n                this.screenshot.stain = this.getStainName(this.file.stains[0])\r\n                this.$refs.screenshotStain.textContent = this.screenshot.stain\r\n            }\r\n\r\n            this.screenshot.show = true\r\n            this.screenshot.data = screenshot\r\n        },\r\n        hideScreenshotModal() {\r\n            this.screenshot.show = false\r\n            setTimeout(() => {\r\n                this.screenshot.title = ''\r\n                this.screenshot.saved = false\r\n                this.screenshot.data = null\r\n                this.$refs.screenshotTitle.textContent = ''\r\n                this.$refs.screenshotStain.textContent = ''\r\n            }, 500)\r\n        },\r\n        updateScreenshotTitle($event) {\r\n            this.screenshot.title = $event.target.textContent\r\n        },\r\n        updateScreenshotStain($event) {\r\n            this.screenshot.stain = $event.target.textContent\r\n        },\r\n        bubbleFilescrollSelect(data) {\r\n            this.$emit('selectViewerFile', data)\r\n        },\r\n        showAllPanels() {\r\n            this.allPanelsVisible = true\r\n            if (this.timeoutID) {\r\n                clearTimeout(this.timeoutID)\r\n            }\r\n            this.hidePanels()\r\n        },\r\n        hidePanels() {\r\n            this.timeoutID = setTimeout(() => {\r\n                if (this.isPdf) {\r\n                    return\r\n                }\r\n                this.allPanelsVisible = false\r\n            }, 8000)\r\n        },\r\n        ...mapActions(['setViewerCompareMode', 'saveScreenshot'])\r\n    }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.viewer-item {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: flex-end;\r\n    width: 100%;\r\n    height: 100%;\r\n    position: relative;\r\n    background-color: #000;\r\n    &.comparing {\r\n        width: calc(50% - 3px);\r\n        @media (max-width: 500px) and (orientation: portrait) {\r\n            width: 100%;\r\n        }\r\n    }\r\n}\r\n\r\nbutton {\r\n    background-color: transparent;\r\n    background-repeat: no-repeat;\r\n    background-position: 0 0;\r\n}\r\n\r\n.close {\r\n    background-image: url(/public/images/close.png)!important;\r\n    background-size: 300%;\r\n    width: 40px;\r\n    height: 40px;\r\n    position: absolute;\r\n    top: 15px;\r\n    right: 15px;\r\n    z-index: 6;\r\n    background-size: auto 100%;\r\n    opacity: 1;\r\n    @media (max-width: 600px) {\r\n        width: 30px;\r\n        height: 30px;\r\n    }\r\n    @media (max-width: 400px) {\r\n        right: auto;\r\n        left: 10px;\r\n        top: 10px;\r\n        z-index: 15;\r\n    }\r\n    &:hover {\r\n        background-position: 50% 0;\r\n    }\r\n    &:active {\r\n        background-position: 100% 0;\r\n    }\r\n    &.hidden {\r\n        visibility: hidden;\r\n        opacity: 0;\r\n        transition: opacity 2s, visibility 0s 2s;\r\n    }\r\n}\r\n\r\nbutton {\r\n    .hidden {\r\n        visibility: hidden;\r\n        opacity: 0;\r\n    }\r\n}\r\n\r\n.empty-placeholder {\r\n    color: #fff;\r\n    flex-grow: 1;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    text-align: center;\r\n}\r\n\r\n.infopanel {\r\n    width: 100%;\r\n    background-color: rgb(8, 8, 125);\r\n    display: flex;\r\n    flex-direction: column-reverse;\r\n    justify-content: center;\r\n    flex-grow: 0;\r\n    position: relative;\r\n    z-index: 5;\r\n    opacity: 1;\r\n    &.hidden {\r\n        visibility: hidden;\r\n        opacity: 0;\r\n        transition: opacity 2s, visibility 0s 2s;\r\n    }\r\n}\r\n\r\n.hidden {\r\n    display: inherit !important;\r\n}\r\n\r\n.file-info-container {\r\n    width: 100%;\r\n    display: inline-flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    padding: 10px 0;\r\n    min-height: 60px;\r\n    &.webinar-center {\r\n        justify-content: center;\r\n        & .file-info-name::after {\r\n            display: none;\r\n        }\r\n    }\r\n}\r\n\r\n.file-info-name {\r\n    color: #fff;\r\n    margin: 0;\r\n    text-align: center;\r\n    width: 100%;\r\n    cursor: pointer;\r\n    user-select: none;\r\n    &::after {\r\n        content: '';\r\n        display: inline-block;\r\n        width: 12px;\r\n        height: 8px;\r\n        margin-left: 10px; // background-image: url(/static/icons/toggle-chooser.svg);\r\n        transform: rotate(180deg);\r\n        transition: transform .2s ease-out;\r\n    }\r\n    &:hover::after {\r\n        background-position: -12px 0;\r\n    }\r\n    &:active::after {\r\n        background-position: -24px 0;\r\n    }\r\n    &.active::after {\r\n        transform: rotate(0deg);\r\n    }\r\n}\r\n\r\n.panel-enter-active,\r\n.panel-leave-active {\r\n    transition: all .3s ease;\r\n}\r\n\r\n.panel-enter,\r\n.panel-leave-to {\r\n    height: 0px !important;\r\n    opacity: 0;\r\n}\r\n\r\n.panel-enter-to,\r\n.panel-leave {\r\n    height: 134px !important;\r\n    opacity: 1;\r\n}\r\n\r\n.file-info {\r\n    width: calc(100% - 120px);\r\n}\r\n\r\n.file-stains {\r\n    display: inline-flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: 100%;\r\n    max-width: 100%;\r\n    margin-top: 5px;\r\n}\r\n\r\n.file-stain {\r\n    color: #fff;\r\n    margin-right: 5px;\r\n    background-color: rgb(12, 12, 163);\r\n    padding: 2px 10px;\r\n    border-radius: 15px;\r\n    user-select: none;\r\n    cursor: default;\r\n    max-width: calc(25% - 5px);\r\n    white-space: nowrap;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n    flex-grow: 1;\r\n    text-align: center;\r\n    &:last-of-type {\r\n        margin-right: 0;\r\n    }\r\n}\r\n\r\nbutton,\r\na {\r\n    background-color: transparent;\r\n    background-repeat: no-repeat;\r\n    background-position: 0 0;\r\n    &.hidden {\r\n        visibility: hidden;\r\n    }\r\n}\r\n\r\n.download {\r\n    width: 60px;\r\n    height: 60px;\r\n    & i {\r\n        display: inline-block;\r\n        width: 18px;\r\n        height: 30px; // background-image: url(/static/icons/download.svg);\r\n    }\r\n    &:hover i {\r\n        background-position: -18px 0;\r\n    }\r\n    &:active i {\r\n        background-position: -36px 0;\r\n    }\r\n}\r\n\r\n.compare {\r\n    width: 60px;\r\n    height: 60px;\r\n    & i {\r\n        display: inline-block;\r\n        width: 40px;\r\n        height: 30px; // background-image: url(/static/icons/compare.svg);\r\n    }\r\n    &:hover i {\r\n        background-position: -40px 0;\r\n    }\r\n    &:active i {\r\n        background-position: -80px 0;\r\n    }\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}