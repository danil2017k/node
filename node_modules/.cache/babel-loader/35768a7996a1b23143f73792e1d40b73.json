{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\nconst MIMETypeParameters = require(\"./mime-type-parameters.js\");\n\nconst parse = require(\"./parser.js\");\n\nconst serialize = require(\"./serializer.js\");\n\nconst {\n  asciiLowercase,\n  solelyContainsHTTPTokenCodePoints\n} = require(\"./utils.js\");\n\nmodule.exports = class MIMEType {\n  constructor(string) {\n    string = String(string);\n    const result = parse(string);\n\n    if (result === null) {\n      throw new Error(`Could not parse MIME type string \"${string}\"`);\n    }\n\n    this._type = result.type;\n    this._subtype = result.subtype;\n    this._parameters = new MIMETypeParameters(result.parameters);\n  }\n\n  static parse(string) {\n    try {\n      return new this(string);\n    } catch (e) {\n      return null;\n    }\n  }\n\n  get essence() {\n    return `${this.type}/${this.subtype}`;\n  }\n\n  get type() {\n    return this._type;\n  }\n\n  set type(value) {\n    value = asciiLowercase(String(value));\n\n    if (value.length === 0) {\n      throw new Error(\"Invalid type: must be a non-empty string\");\n    }\n\n    if (!solelyContainsHTTPTokenCodePoints(value)) {\n      throw new Error(`Invalid type ${value}: must contain only HTTP token code points`);\n    }\n\n    this._type = value;\n  }\n\n  get subtype() {\n    return this._subtype;\n  }\n\n  set subtype(value) {\n    value = asciiLowercase(String(value));\n\n    if (value.length === 0) {\n      throw new Error(\"Invalid subtype: must be a non-empty string\");\n    }\n\n    if (!solelyContainsHTTPTokenCodePoints(value)) {\n      throw new Error(`Invalid subtype ${value}: must contain only HTTP token code points`);\n    }\n\n    this._subtype = value;\n  }\n\n  get parameters() {\n    return this._parameters;\n  }\n\n  toString() {\n    // The serialize function works on both \"MIME type records\" (i.e. the results of parse) and on this class, since\n    // this class's interface is identical.\n    return serialize(this);\n  }\n\n  isJavaScript({\n    prohibitParameters = false\n  } = {}) {\n    switch (this._type) {\n      case \"text\":\n        {\n          switch (this._subtype) {\n            case \"ecmascript\":\n            case \"javascript\":\n            case \"javascript1.0\":\n            case \"javascript1.1\":\n            case \"javascript1.2\":\n            case \"javascript1.3\":\n            case \"javascript1.4\":\n            case \"javascript1.5\":\n            case \"jscript\":\n            case \"livescript\":\n            case \"x-ecmascript\":\n            case \"x-javascript\":\n              {\n                return !prohibitParameters || this._parameters.size === 0;\n              }\n\n            default:\n              {\n                return false;\n              }\n          }\n        }\n\n      case \"application\":\n        {\n          switch (this._subtype) {\n            case \"ecmascript\":\n            case \"javascript\":\n            case \"x-ecmascript\":\n            case \"x-javascript\":\n              {\n                return !prohibitParameters || this._parameters.size === 0;\n              }\n\n            default:\n              {\n                return false;\n              }\n          }\n        }\n\n      default:\n        {\n          return false;\n        }\n    }\n  }\n\n  isXML() {\n    return this._subtype === \"xml\" && (this._type === \"text\" || this._type === \"application\") || this._subtype.endsWith(\"+xml\");\n  }\n\n  isHTML() {\n    return this._subtype === \"html\" && this._type === \"text\";\n  }\n\n};","map":{"version":3,"names":["MIMETypeParameters","require","parse","serialize","asciiLowercase","solelyContainsHTTPTokenCodePoints","module","exports","MIMEType","constructor","string","String","result","Error","_type","type","_subtype","subtype","_parameters","parameters","e","essence","value","length","toString","isJavaScript","prohibitParameters","size","isXML","endsWith","isHTML"],"sources":["C:/Users/Danil/Desktop/122/node_modules/whatwg-mimetype/lib/mime-type.js"],"sourcesContent":["\"use strict\";\nconst MIMETypeParameters = require(\"./mime-type-parameters.js\");\nconst parse = require(\"./parser.js\");\nconst serialize = require(\"./serializer.js\");\nconst {\n  asciiLowercase,\n  solelyContainsHTTPTokenCodePoints\n} = require(\"./utils.js\");\n\nmodule.exports = class MIMEType {\n  constructor(string) {\n    string = String(string);\n    const result = parse(string);\n    if (result === null) {\n      throw new Error(`Could not parse MIME type string \"${string}\"`);\n    }\n\n    this._type = result.type;\n    this._subtype = result.subtype;\n    this._parameters = new MIMETypeParameters(result.parameters);\n  }\n\n  static parse(string) {\n    try {\n      return new this(string);\n    } catch (e) {\n      return null;\n    }\n  }\n\n  get essence() {\n    return `${this.type}/${this.subtype}`;\n  }\n\n  get type() {\n    return this._type;\n  }\n\n  set type(value) {\n    value = asciiLowercase(String(value));\n\n    if (value.length === 0) {\n      throw new Error(\"Invalid type: must be a non-empty string\");\n    }\n    if (!solelyContainsHTTPTokenCodePoints(value)) {\n      throw new Error(`Invalid type ${value}: must contain only HTTP token code points`);\n    }\n\n    this._type = value;\n  }\n\n  get subtype() {\n    return this._subtype;\n  }\n\n  set subtype(value) {\n    value = asciiLowercase(String(value));\n\n    if (value.length === 0) {\n      throw new Error(\"Invalid subtype: must be a non-empty string\");\n    }\n    if (!solelyContainsHTTPTokenCodePoints(value)) {\n      throw new Error(`Invalid subtype ${value}: must contain only HTTP token code points`);\n    }\n\n    this._subtype = value;\n  }\n\n  get parameters() {\n    return this._parameters;\n  }\n\n  toString() {\n    // The serialize function works on both \"MIME type records\" (i.e. the results of parse) and on this class, since\n    // this class's interface is identical.\n    return serialize(this);\n  }\n\n  isJavaScript({ prohibitParameters = false } = {}) {\n    switch (this._type) {\n      case \"text\": {\n        switch (this._subtype) {\n          case \"ecmascript\":\n          case \"javascript\":\n          case \"javascript1.0\":\n          case \"javascript1.1\":\n          case \"javascript1.2\":\n          case \"javascript1.3\":\n          case \"javascript1.4\":\n          case \"javascript1.5\":\n          case \"jscript\":\n          case \"livescript\":\n          case \"x-ecmascript\":\n          case \"x-javascript\": {\n            return !prohibitParameters || this._parameters.size === 0;\n          }\n          default: {\n            return false;\n          }\n        }\n      }\n      case \"application\": {\n        switch (this._subtype) {\n          case \"ecmascript\":\n          case \"javascript\":\n          case \"x-ecmascript\":\n          case \"x-javascript\": {\n            return !prohibitParameters || this._parameters.size === 0;\n          }\n          default: {\n            return false;\n          }\n        }\n      }\n      default: {\n        return false;\n      }\n    }\n  }\n  isXML() {\n    return (this._subtype === \"xml\" && (this._type === \"text\" || this._type === \"application\")) ||\n           this._subtype.endsWith(\"+xml\");\n  }\n  isHTML() {\n    return this._subtype === \"html\" && this._type === \"text\";\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}