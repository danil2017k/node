{"ast":null,"code":"\"use strict\";\n\nconst {\n  domSymbolTree\n} = require(\"../helpers/internal-constants\");\n\nconst {\n  filter,\n  FILTER_ACCEPT\n} = require(\"./helpers\");\n\nexports.implementation = class NodeIteratorImpl {\n  constructor(globalObject, args, privateData) {\n    this._active = false;\n    this.root = privateData.root;\n    this.whatToShow = privateData.whatToShow;\n    this.filter = privateData.filter;\n    this._referenceNode = this.root;\n    this._pointerBeforeReferenceNode = true;\n    this._globalObject = globalObject;\n  }\n\n  get referenceNode() {\n    return this._referenceNode;\n  }\n\n  get pointerBeforeReferenceNode() {\n    return this._pointerBeforeReferenceNode;\n  }\n\n  nextNode() {\n    return this._traverse(\"next\");\n  }\n\n  previousNode() {\n    return this._traverse(\"previous\");\n  }\n\n  detach() {// Intentionally do nothing, per spec.\n  } // Called by Documents.\n\n\n  _preRemovingSteps(toBeRemovedNode) {\n    // Second clause is https://github.com/whatwg/dom/issues/496\n    if (!toBeRemovedNode.contains(this._referenceNode) || toBeRemovedNode === this.root) {\n      return;\n    }\n\n    if (this._pointerBeforeReferenceNode) {\n      let next = null;\n      let candidateForNext = domSymbolTree.following(toBeRemovedNode, {\n        skipChildren: true\n      });\n\n      while (candidateForNext !== null) {\n        if (this.root.contains(candidateForNext)) {\n          next = candidateForNext;\n          break;\n        }\n\n        candidateForNext = domSymbolTree.following(candidateForNext, {\n          skipChildren: true\n        });\n      }\n\n      if (next !== null) {\n        this._referenceNode = next;\n        return;\n      }\n\n      this._pointerBeforeReferenceNode = false;\n    }\n\n    const {\n      previousSibling\n    } = toBeRemovedNode;\n    this._referenceNode = previousSibling === null ? toBeRemovedNode.parentNode : domSymbolTree.lastInclusiveDescendant(toBeRemovedNode.previousSibling);\n  }\n\n  _traverse(direction) {\n    let node = this._referenceNode;\n    let beforeNode = this._pointerBeforeReferenceNode;\n\n    while (true) {\n      if (direction === \"next\") {\n        if (!beforeNode) {\n          node = domSymbolTree.following(node, {\n            root: this.root\n          });\n\n          if (!node) {\n            return null;\n          }\n        }\n\n        beforeNode = false;\n      } else if (direction === \"previous\") {\n        if (beforeNode) {\n          node = domSymbolTree.preceding(node, {\n            root: this.root\n          });\n\n          if (!node) {\n            return null;\n          }\n        }\n\n        beforeNode = true;\n      }\n\n      const result = filter(this, node);\n\n      if (result === FILTER_ACCEPT) {\n        break;\n      }\n    }\n\n    this._referenceNode = node;\n    this._pointerBeforeReferenceNode = beforeNode;\n    return node;\n  }\n\n};","map":{"version":3,"names":["domSymbolTree","require","filter","FILTER_ACCEPT","exports","implementation","NodeIteratorImpl","constructor","globalObject","args","privateData","_active","root","whatToShow","_referenceNode","_pointerBeforeReferenceNode","_globalObject","referenceNode","pointerBeforeReferenceNode","nextNode","_traverse","previousNode","detach","_preRemovingSteps","toBeRemovedNode","contains","next","candidateForNext","following","skipChildren","previousSibling","parentNode","lastInclusiveDescendant","direction","node","beforeNode","preceding","result"],"sources":["C:/Users/Danil/Desktop/project1/node_modules/jsdom/lib/jsdom/living/traversal/NodeIterator-impl.js"],"sourcesContent":["\"use strict\";\nconst { domSymbolTree } = require(\"../helpers/internal-constants\");\nconst { filter, FILTER_ACCEPT } = require(\"./helpers\");\n\nexports.implementation = class NodeIteratorImpl {\n  constructor(globalObject, args, privateData) {\n    this._active = false;\n    this.root = privateData.root;\n    this.whatToShow = privateData.whatToShow;\n    this.filter = privateData.filter;\n\n    this._referenceNode = this.root;\n    this._pointerBeforeReferenceNode = true;\n\n    this._globalObject = globalObject;\n  }\n\n  get referenceNode() {\n    return this._referenceNode;\n  }\n\n  get pointerBeforeReferenceNode() {\n    return this._pointerBeforeReferenceNode;\n  }\n\n  nextNode() {\n    return this._traverse(\"next\");\n  }\n\n  previousNode() {\n    return this._traverse(\"previous\");\n  }\n\n  detach() {\n    // Intentionally do nothing, per spec.\n  }\n\n  // Called by Documents.\n  _preRemovingSteps(toBeRemovedNode) {\n    // Second clause is https://github.com/whatwg/dom/issues/496\n    if (!toBeRemovedNode.contains(this._referenceNode) || toBeRemovedNode === this.root) {\n      return;\n    }\n\n    if (this._pointerBeforeReferenceNode) {\n      let next = null;\n      let candidateForNext = domSymbolTree.following(toBeRemovedNode, { skipChildren: true });\n      while (candidateForNext !== null) {\n        if (this.root.contains(candidateForNext)) {\n          next = candidateForNext;\n          break;\n        }\n        candidateForNext = domSymbolTree.following(candidateForNext, { skipChildren: true });\n      }\n\n      if (next !== null) {\n        this._referenceNode = next;\n        return;\n      }\n\n      this._pointerBeforeReferenceNode = false;\n    }\n\n    const { previousSibling } = toBeRemovedNode;\n    this._referenceNode = previousSibling === null ?\n                          toBeRemovedNode.parentNode :\n                          domSymbolTree.lastInclusiveDescendant(toBeRemovedNode.previousSibling);\n  }\n\n  _traverse(direction) {\n    let node = this._referenceNode;\n    let beforeNode = this._pointerBeforeReferenceNode;\n\n    while (true) {\n      if (direction === \"next\") {\n        if (!beforeNode) {\n          node = domSymbolTree.following(node, { root: this.root });\n\n          if (!node) {\n            return null;\n          }\n        }\n\n        beforeNode = false;\n      } else if (direction === \"previous\") {\n        if (beforeNode) {\n          node = domSymbolTree.preceding(node, { root: this.root });\n\n          if (!node) {\n            return null;\n          }\n        }\n\n        beforeNode = true;\n      }\n\n      const result = filter(this, node);\n      if (result === FILTER_ACCEPT) {\n        break;\n      }\n    }\n\n    this._referenceNode = node;\n    this._pointerBeforeReferenceNode = beforeNode;\n    return node;\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}