{"ast":null,"code":"\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\n\nconst utils = require(\"./utils.js\");\n\nconst BlobPropertyBag = require(\"./BlobPropertyBag.js\");\n\nconst implSymbol = utils.implSymbol;\nconst ctorRegistrySymbol = utils.ctorRegistrySymbol;\nconst interfaceName = \"Blob\";\n\nexports.is = value => {\n  return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;\n};\n\nexports.isImpl = value => {\n  return utils.isObject(value) && value instanceof Impl.implementation;\n};\n\nexports.convert = (globalObject, value, {\n  context = \"The provided value\"\n} = {}) => {\n  if (exports.is(value)) {\n    return utils.implForWrapper(value);\n  }\n\n  throw new globalObject.TypeError(`${context} is not of type 'Blob'.`);\n};\n\nfunction makeWrapper(globalObject, newTarget) {\n  let proto;\n\n  if (newTarget !== undefined) {\n    proto = newTarget.prototype;\n  }\n\n  if (!utils.isObject(proto)) {\n    proto = globalObject[ctorRegistrySymbol][\"Blob\"].prototype;\n  }\n\n  return Object.create(proto);\n}\n\nexports.create = (globalObject, constructorArgs, privateData) => {\n  const wrapper = makeWrapper(globalObject);\n  return exports.setup(wrapper, globalObject, constructorArgs, privateData);\n};\n\nexports.createImpl = (globalObject, constructorArgs, privateData) => {\n  const wrapper = exports.create(globalObject, constructorArgs, privateData);\n  return utils.implForWrapper(wrapper);\n};\n\nexports._internalSetup = (wrapper, globalObject) => {};\n\nexports.setup = (wrapper, globalObject, constructorArgs = [], privateData = {}) => {\n  privateData.wrapper = wrapper;\n\n  exports._internalSetup(wrapper, globalObject);\n\n  Object.defineProperty(wrapper, implSymbol, {\n    value: new Impl.implementation(globalObject, constructorArgs, privateData),\n    configurable: true\n  });\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n\n  return wrapper;\n};\n\nexports.new = (globalObject, newTarget) => {\n  const wrapper = makeWrapper(globalObject, newTarget);\n\n  exports._internalSetup(wrapper, globalObject);\n\n  Object.defineProperty(wrapper, implSymbol, {\n    value: Object.create(Impl.implementation.prototype),\n    configurable: true\n  });\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n\n  return wrapper[implSymbol];\n};\n\nconst exposed = new Set([\"Window\", \"Worker\"]);\n\nexports.install = (globalObject, globalNames) => {\n  if (!globalNames.some(globalName => exposed.has(globalName))) {\n    return;\n  }\n\n  const ctorRegistry = utils.initCtorRegistry(globalObject);\n\n  class Blob {\n    constructor() {\n      const args = [];\n      {\n        let curArg = arguments[0];\n\n        if (curArg !== undefined) {\n          if (!utils.isObject(curArg)) {\n            throw new globalObject.TypeError(\"Failed to construct 'Blob': parameter 1\" + \" is not an iterable object.\");\n          } else {\n            const V = [];\n            const tmp = curArg;\n\n            for (let nextItem of tmp) {\n              if (exports.is(nextItem)) {\n                nextItem = utils.implForWrapper(nextItem);\n              } else if (utils.isArrayBuffer(nextItem)) {} else if (ArrayBuffer.isView(nextItem)) {} else {\n                nextItem = conversions[\"USVString\"](nextItem, {\n                  context: \"Failed to construct 'Blob': parameter 1\" + \"'s element\",\n                  globals: globalObject\n                });\n              }\n\n              V.push(nextItem);\n            }\n\n            curArg = V;\n          }\n        }\n\n        args.push(curArg);\n      }\n      {\n        let curArg = arguments[1];\n        curArg = BlobPropertyBag.convert(globalObject, curArg, {\n          context: \"Failed to construct 'Blob': parameter 2\"\n        });\n        args.push(curArg);\n      }\n      return exports.setup(Object.create(new.target.prototype), globalObject, args);\n    }\n\n    slice() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'slice' called on an object that is not a valid instance of Blob.\");\n      }\n\n      const args = [];\n      {\n        let curArg = arguments[0];\n\n        if (curArg !== undefined) {\n          curArg = conversions[\"long long\"](curArg, {\n            context: \"Failed to execute 'slice' on 'Blob': parameter 1\",\n            globals: globalObject,\n            clamp: true\n          });\n        }\n\n        args.push(curArg);\n      }\n      {\n        let curArg = arguments[1];\n\n        if (curArg !== undefined) {\n          curArg = conversions[\"long long\"](curArg, {\n            context: \"Failed to execute 'slice' on 'Blob': parameter 2\",\n            globals: globalObject,\n            clamp: true\n          });\n        }\n\n        args.push(curArg);\n      }\n      {\n        let curArg = arguments[2];\n\n        if (curArg !== undefined) {\n          curArg = conversions[\"DOMString\"](curArg, {\n            context: \"Failed to execute 'slice' on 'Blob': parameter 3\",\n            globals: globalObject\n          });\n        }\n\n        args.push(curArg);\n      }\n      return utils.tryWrapperForImpl(esValue[implSymbol].slice(...args));\n    }\n\n    get size() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'get size' called on an object that is not a valid instance of Blob.\");\n      }\n\n      return esValue[implSymbol][\"size\"];\n    }\n\n    get type() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'get type' called on an object that is not a valid instance of Blob.\");\n      }\n\n      return esValue[implSymbol][\"type\"];\n    }\n\n  }\n\n  Object.defineProperties(Blob.prototype, {\n    slice: {\n      enumerable: true\n    },\n    size: {\n      enumerable: true\n    },\n    type: {\n      enumerable: true\n    },\n    [Symbol.toStringTag]: {\n      value: \"Blob\",\n      configurable: true\n    }\n  });\n  ctorRegistry[interfaceName] = Blob;\n  Object.defineProperty(globalObject, interfaceName, {\n    configurable: true,\n    writable: true,\n    value: Blob\n  });\n};\n\nconst Impl = require(\"../file-api/Blob-impl.js\");","map":{"version":3,"names":["conversions","require","utils","BlobPropertyBag","implSymbol","ctorRegistrySymbol","interfaceName","exports","is","value","isObject","hasOwn","Impl","implementation","isImpl","convert","globalObject","context","implForWrapper","TypeError","makeWrapper","newTarget","proto","undefined","prototype","Object","create","constructorArgs","privateData","wrapper","setup","createImpl","_internalSetup","defineProperty","configurable","wrapperSymbol","init","new","exposed","Set","install","globalNames","some","globalName","has","ctorRegistry","initCtorRegistry","Blob","constructor","args","curArg","arguments","V","tmp","nextItem","isArrayBuffer","ArrayBuffer","isView","globals","push","target","slice","esValue","clamp","tryWrapperForImpl","size","type","defineProperties","enumerable","Symbol","toStringTag","writable"],"sources":["C:/Users/Danil/Desktop/122/node_modules/jsdom/lib/jsdom/living/generated/Blob.js"],"sourcesContent":["\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\nconst utils = require(\"./utils.js\");\n\nconst BlobPropertyBag = require(\"./BlobPropertyBag.js\");\nconst implSymbol = utils.implSymbol;\nconst ctorRegistrySymbol = utils.ctorRegistrySymbol;\n\nconst interfaceName = \"Blob\";\n\nexports.is = value => {\n  return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;\n};\nexports.isImpl = value => {\n  return utils.isObject(value) && value instanceof Impl.implementation;\n};\nexports.convert = (globalObject, value, { context = \"The provided value\" } = {}) => {\n  if (exports.is(value)) {\n    return utils.implForWrapper(value);\n  }\n  throw new globalObject.TypeError(`${context} is not of type 'Blob'.`);\n};\n\nfunction makeWrapper(globalObject, newTarget) {\n  let proto;\n  if (newTarget !== undefined) {\n    proto = newTarget.prototype;\n  }\n\n  if (!utils.isObject(proto)) {\n    proto = globalObject[ctorRegistrySymbol][\"Blob\"].prototype;\n  }\n\n  return Object.create(proto);\n}\n\nexports.create = (globalObject, constructorArgs, privateData) => {\n  const wrapper = makeWrapper(globalObject);\n  return exports.setup(wrapper, globalObject, constructorArgs, privateData);\n};\n\nexports.createImpl = (globalObject, constructorArgs, privateData) => {\n  const wrapper = exports.create(globalObject, constructorArgs, privateData);\n  return utils.implForWrapper(wrapper);\n};\n\nexports._internalSetup = (wrapper, globalObject) => {};\n\nexports.setup = (wrapper, globalObject, constructorArgs = [], privateData = {}) => {\n  privateData.wrapper = wrapper;\n\n  exports._internalSetup(wrapper, globalObject);\n  Object.defineProperty(wrapper, implSymbol, {\n    value: new Impl.implementation(globalObject, constructorArgs, privateData),\n    configurable: true\n  });\n\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n  return wrapper;\n};\n\nexports.new = (globalObject, newTarget) => {\n  const wrapper = makeWrapper(globalObject, newTarget);\n\n  exports._internalSetup(wrapper, globalObject);\n  Object.defineProperty(wrapper, implSymbol, {\n    value: Object.create(Impl.implementation.prototype),\n    configurable: true\n  });\n\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n  return wrapper[implSymbol];\n};\n\nconst exposed = new Set([\"Window\", \"Worker\"]);\n\nexports.install = (globalObject, globalNames) => {\n  if (!globalNames.some(globalName => exposed.has(globalName))) {\n    return;\n  }\n\n  const ctorRegistry = utils.initCtorRegistry(globalObject);\n  class Blob {\n    constructor() {\n      const args = [];\n      {\n        let curArg = arguments[0];\n        if (curArg !== undefined) {\n          if (!utils.isObject(curArg)) {\n            throw new globalObject.TypeError(\"Failed to construct 'Blob': parameter 1\" + \" is not an iterable object.\");\n          } else {\n            const V = [];\n            const tmp = curArg;\n            for (let nextItem of tmp) {\n              if (exports.is(nextItem)) {\n                nextItem = utils.implForWrapper(nextItem);\n              } else if (utils.isArrayBuffer(nextItem)) {\n              } else if (ArrayBuffer.isView(nextItem)) {\n              } else {\n                nextItem = conversions[\"USVString\"](nextItem, {\n                  context: \"Failed to construct 'Blob': parameter 1\" + \"'s element\",\n                  globals: globalObject\n                });\n              }\n              V.push(nextItem);\n            }\n            curArg = V;\n          }\n        }\n        args.push(curArg);\n      }\n      {\n        let curArg = arguments[1];\n        curArg = BlobPropertyBag.convert(globalObject, curArg, { context: \"Failed to construct 'Blob': parameter 2\" });\n        args.push(curArg);\n      }\n      return exports.setup(Object.create(new.target.prototype), globalObject, args);\n    }\n\n    slice() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'slice' called on an object that is not a valid instance of Blob.\");\n      }\n      const args = [];\n      {\n        let curArg = arguments[0];\n        if (curArg !== undefined) {\n          curArg = conversions[\"long long\"](curArg, {\n            context: \"Failed to execute 'slice' on 'Blob': parameter 1\",\n            globals: globalObject,\n            clamp: true\n          });\n        }\n        args.push(curArg);\n      }\n      {\n        let curArg = arguments[1];\n        if (curArg !== undefined) {\n          curArg = conversions[\"long long\"](curArg, {\n            context: \"Failed to execute 'slice' on 'Blob': parameter 2\",\n            globals: globalObject,\n            clamp: true\n          });\n        }\n        args.push(curArg);\n      }\n      {\n        let curArg = arguments[2];\n        if (curArg !== undefined) {\n          curArg = conversions[\"DOMString\"](curArg, {\n            context: \"Failed to execute 'slice' on 'Blob': parameter 3\",\n            globals: globalObject\n          });\n        }\n        args.push(curArg);\n      }\n      return utils.tryWrapperForImpl(esValue[implSymbol].slice(...args));\n    }\n\n    get size() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'get size' called on an object that is not a valid instance of Blob.\");\n      }\n\n      return esValue[implSymbol][\"size\"];\n    }\n\n    get type() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'get type' called on an object that is not a valid instance of Blob.\");\n      }\n\n      return esValue[implSymbol][\"type\"];\n    }\n  }\n  Object.defineProperties(Blob.prototype, {\n    slice: { enumerable: true },\n    size: { enumerable: true },\n    type: { enumerable: true },\n    [Symbol.toStringTag]: { value: \"Blob\", configurable: true }\n  });\n  ctorRegistry[interfaceName] = Blob;\n\n  Object.defineProperty(globalObject, interfaceName, {\n    configurable: true,\n    writable: true,\n    value: Blob\n  });\n};\n\nconst Impl = require(\"../file-api/Blob-impl.js\");\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}