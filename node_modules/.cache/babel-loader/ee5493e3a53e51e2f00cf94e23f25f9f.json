{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nimport { Container } from \"../../ContainerBase/index\";\nimport { checkWithinAccessParams } from \"../../../utils/checkParams\";\nimport TreeNode from './TreeNode';\n\nvar TreeBaseContainer =\n/** @class */\nfunction (_super) {\n  __extends(TreeBaseContainer, _super);\n\n  function TreeBaseContainer(cmp) {\n    if (cmp === void 0) {\n      cmp = function (x, y) {\n        if (x < y) return -1;\n        if (x > y) return 1;\n        return 0;\n      };\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this.root = undefined;\n    _this.header = new TreeNode();\n\n    _this.inOrderTraversal = function (curNode, callback) {\n      if (curNode === undefined) return false;\n\n      var ifReturn = _this.inOrderTraversal(curNode.left, callback);\n\n      if (ifReturn) return true;\n      if (callback(curNode)) return true;\n      return _this.inOrderTraversal(curNode.right, callback);\n    };\n\n    _this.cmp = cmp;\n    return _this;\n  }\n\n  TreeBaseContainer.prototype._lowerBound = function (curNode, key) {\n    var resNode;\n\n    while (curNode) {\n      var cmpResult = this.cmp(curNode.key, key);\n\n      if (cmpResult < 0) {\n        curNode = curNode.right;\n      } else if (cmpResult > 0) {\n        resNode = curNode;\n        curNode = curNode.left;\n      } else return curNode;\n    }\n\n    return resNode === undefined ? this.header : resNode;\n  };\n\n  TreeBaseContainer.prototype._upperBound = function (curNode, key) {\n    var resNode;\n\n    while (curNode) {\n      var cmpResult = this.cmp(curNode.key, key);\n\n      if (cmpResult <= 0) {\n        curNode = curNode.right;\n      } else if (cmpResult > 0) {\n        resNode = curNode;\n        curNode = curNode.left;\n      }\n    }\n\n    return resNode === undefined ? this.header : resNode;\n  };\n\n  TreeBaseContainer.prototype._reverseLowerBound = function (curNode, key) {\n    var resNode;\n\n    while (curNode) {\n      var cmpResult = this.cmp(curNode.key, key);\n\n      if (cmpResult < 0) {\n        resNode = curNode;\n        curNode = curNode.right;\n      } else if (cmpResult > 0) {\n        curNode = curNode.left;\n      } else return curNode;\n    }\n\n    return resNode === undefined ? this.header : resNode;\n  };\n\n  TreeBaseContainer.prototype._reverseUpperBound = function (curNode, key) {\n    var resNode;\n\n    while (curNode) {\n      var cmpResult = this.cmp(curNode.key, key);\n\n      if (cmpResult < 0) {\n        resNode = curNode;\n        curNode = curNode.right;\n      } else if (cmpResult >= 0) {\n        curNode = curNode.left;\n      }\n    }\n\n    return resNode === undefined ? this.header : resNode;\n  };\n\n  TreeBaseContainer.prototype.eraseNodeSelfBalance = function (curNode) {\n    while (true) {\n      var parentNode = curNode.parent;\n      if (parentNode === this.header) return;\n\n      if (curNode.color === TreeNode.RED) {\n        curNode.color = TreeNode.BLACK;\n        return;\n      }\n\n      if (curNode === parentNode.left) {\n        var brother = parentNode.right;\n\n        if (brother.color === TreeNode.RED) {\n          brother.color = TreeNode.BLACK;\n          parentNode.color = TreeNode.RED;\n\n          if (parentNode === this.root) {\n            this.root = parentNode.rotateLeft();\n          } else parentNode.rotateLeft();\n        } else if (brother.color === TreeNode.BLACK) {\n          if (brother.right && brother.right.color === TreeNode.RED) {\n            brother.color = parentNode.color;\n            parentNode.color = TreeNode.BLACK;\n            brother.right.color = TreeNode.BLACK;\n\n            if (parentNode === this.root) {\n              this.root = parentNode.rotateLeft();\n            } else parentNode.rotateLeft();\n\n            return;\n          } else if (brother.left && brother.left.color === TreeNode.RED) {\n            brother.color = TreeNode.RED;\n            brother.left.color = TreeNode.BLACK;\n            brother.rotateRight();\n          } else {\n            brother.color = TreeNode.RED;\n            curNode = parentNode;\n          }\n        }\n      } else {\n        var brother = parentNode.left;\n\n        if (brother.color === TreeNode.RED) {\n          brother.color = TreeNode.BLACK;\n          parentNode.color = TreeNode.RED;\n\n          if (parentNode === this.root) {\n            this.root = parentNode.rotateRight();\n          } else parentNode.rotateRight();\n        } else {\n          if (brother.left && brother.left.color === TreeNode.RED) {\n            brother.color = parentNode.color;\n            parentNode.color = TreeNode.BLACK;\n            brother.left.color = TreeNode.BLACK;\n\n            if (parentNode === this.root) {\n              this.root = parentNode.rotateRight();\n            } else parentNode.rotateRight();\n\n            return;\n          } else if (brother.right && brother.right.color === TreeNode.RED) {\n            brother.color = TreeNode.RED;\n            brother.right.color = TreeNode.BLACK;\n            brother.rotateLeft();\n          } else {\n            brother.color = TreeNode.RED;\n            curNode = parentNode;\n          }\n        }\n      }\n    }\n  };\n\n  TreeBaseContainer.prototype.eraseNode = function (curNode) {\n    var _a, _b;\n\n    if (this.length === 1) {\n      this.clear();\n      return this.header;\n    }\n\n    var swapNode = curNode;\n\n    while (swapNode.left || swapNode.right) {\n      if (swapNode.right) {\n        swapNode = swapNode.right;\n\n        while (swapNode.left) swapNode = swapNode.left;\n      } else if (swapNode.left) {\n        swapNode = swapNode.left;\n      }\n\n      _a = __read([swapNode.key, curNode.key], 2), curNode.key = _a[0], swapNode.key = _a[1];\n      _b = __read([swapNode.value, curNode.value], 2), curNode.value = _b[0], swapNode.value = _b[1];\n      curNode = swapNode;\n    }\n\n    if (this.header.left === swapNode) {\n      this.header.left = swapNode.parent;\n    } else if (this.header.right === swapNode) {\n      this.header.right = swapNode.parent;\n    }\n\n    this.eraseNodeSelfBalance(swapNode);\n    swapNode.remove();\n    this.length -= 1;\n    this.root.color = TreeNode.BLACK;\n  };\n\n  TreeBaseContainer.prototype.insertNodeSelfBalance = function (curNode) {\n    while (true) {\n      var parentNode = curNode.parent;\n      if (parentNode.color === TreeNode.BLACK) return;\n      var grandParent = parentNode.parent;\n\n      if (parentNode === grandParent.left) {\n        var uncle = grandParent.right;\n\n        if (uncle && uncle.color === TreeNode.RED) {\n          uncle.color = parentNode.color = TreeNode.BLACK;\n          if (grandParent === this.root) return;\n          grandParent.color = TreeNode.RED;\n          curNode = grandParent;\n          continue;\n        } else if (curNode === parentNode.right) {\n          curNode.color = TreeNode.BLACK;\n          if (curNode.left) curNode.left.parent = parentNode;\n          if (curNode.right) curNode.right.parent = grandParent;\n          parentNode.right = curNode.left;\n          grandParent.left = curNode.right;\n          curNode.left = parentNode;\n          curNode.right = grandParent;\n\n          if (grandParent === this.root) {\n            this.root = curNode;\n            this.header.parent = curNode;\n          } else {\n            var GP = grandParent.parent;\n\n            if (GP.left === grandParent) {\n              GP.left = curNode;\n            } else GP.right = curNode;\n          }\n\n          curNode.parent = grandParent.parent;\n          parentNode.parent = curNode;\n          grandParent.parent = curNode;\n        } else {\n          parentNode.color = TreeNode.BLACK;\n\n          if (grandParent === this.root) {\n            this.root = grandParent.rotateRight();\n          } else grandParent.rotateRight();\n        }\n\n        grandParent.color = TreeNode.RED;\n      } else {\n        var uncle = grandParent.left;\n\n        if (uncle && uncle.color === TreeNode.RED) {\n          uncle.color = parentNode.color = TreeNode.BLACK;\n          if (grandParent === this.root) return;\n          grandParent.color = TreeNode.RED;\n          curNode = grandParent;\n          continue;\n        } else if (curNode === parentNode.left) {\n          curNode.color = TreeNode.BLACK;\n          if (curNode.left) curNode.left.parent = grandParent;\n          if (curNode.right) curNode.right.parent = parentNode;\n          grandParent.right = curNode.left;\n          parentNode.left = curNode.right;\n          curNode.left = grandParent;\n          curNode.right = parentNode;\n\n          if (grandParent === this.root) {\n            this.root = curNode;\n            this.header.parent = curNode;\n          } else {\n            var GP = grandParent.parent;\n\n            if (GP.left === grandParent) {\n              GP.left = curNode;\n            } else GP.right = curNode;\n          }\n\n          curNode.parent = grandParent.parent;\n          parentNode.parent = curNode;\n          grandParent.parent = curNode;\n        } else {\n          parentNode.color = TreeNode.BLACK;\n\n          if (grandParent === this.root) {\n            this.root = grandParent.rotateLeft();\n          } else grandParent.rotateLeft();\n        }\n\n        grandParent.color = TreeNode.RED;\n      }\n\n      return;\n    }\n  };\n\n  TreeBaseContainer.prototype.findElementNode = function (curNode, key) {\n    while (curNode) {\n      var cmpResult = this.cmp(curNode.key, key);\n\n      if (cmpResult < 0) {\n        curNode = curNode.right;\n      } else if (cmpResult > 0) {\n        curNode = curNode.left;\n      } else return curNode;\n    }\n\n    return curNode;\n  };\n\n  TreeBaseContainer.prototype.set = function (key, value) {\n    if (this.root === undefined) {\n      this.length += 1;\n      this.root = new TreeNode(key, value);\n      this.root.color = TreeNode.BLACK;\n      this.root.parent = this.header;\n      this.header.parent = this.root;\n      this.header.left = this.root;\n      this.header.right = this.root;\n      return;\n    }\n\n    var curNode;\n    var minNode = this.header.left;\n    var compareToMin = this.cmp(minNode.key, key);\n\n    if (compareToMin === 0) {\n      minNode.value = value;\n      return;\n    } else if (compareToMin > 0) {\n      minNode.left = new TreeNode(key, value);\n      minNode.left.parent = minNode;\n      curNode = minNode.left;\n      this.header.left = curNode;\n    } else {\n      var maxNode = this.header.right;\n      var compareToMax = this.cmp(maxNode.key, key);\n\n      if (compareToMax === 0) {\n        maxNode.value = value;\n        return;\n      } else if (compareToMax < 0) {\n        maxNode.right = new TreeNode(key, value);\n        maxNode.right.parent = maxNode;\n        curNode = maxNode.right;\n        this.header.right = curNode;\n      } else {\n        curNode = this.root;\n\n        while (true) {\n          var cmpResult = this.cmp(curNode.key, key);\n\n          if (cmpResult > 0) {\n            if (curNode.left === undefined) {\n              curNode.left = new TreeNode(key, value);\n              curNode.left.parent = curNode;\n              curNode = curNode.left;\n              break;\n            }\n\n            curNode = curNode.left;\n          } else if (cmpResult < 0) {\n            if (curNode.right === undefined) {\n              curNode.right = new TreeNode(key, value);\n              curNode.right.parent = curNode;\n              curNode = curNode.right;\n              break;\n            }\n\n            curNode = curNode.right;\n          } else {\n            curNode.value = value;\n            return;\n          }\n        }\n      }\n    }\n\n    this.length += 1;\n    this.insertNodeSelfBalance(curNode);\n  };\n\n  TreeBaseContainer.prototype.clear = function () {\n    this.length = 0;\n    this.root = undefined;\n    this.header.parent = undefined;\n    this.header.left = this.header.right = undefined;\n  };\n\n  TreeBaseContainer.prototype.eraseElementByPos = function (pos) {\n    var _this = this;\n\n    checkWithinAccessParams(pos, 0, this.length - 1);\n    var index = 0;\n    this.inOrderTraversal(this.root, function (curNode) {\n      if (pos === index) {\n        _this.eraseNode(curNode);\n\n        return true;\n      }\n\n      index += 1;\n      return false;\n    });\n  };\n  /**\n   * Removes the elements of the specified key.\n   */\n\n\n  TreeBaseContainer.prototype.eraseElementByKey = function (key) {\n    if (!this.length) return;\n    var curNode = this.findElementNode(this.root, key);\n    if (curNode === undefined) return;\n    this.eraseNode(curNode);\n  };\n  /**\n   * @return An iterator point to the next iterator.\n   * Removes element by iterator.\n   */\n\n\n  TreeBaseContainer.prototype.eraseElementByIterator = function (iter) {\n    // @ts-ignore\n    var node = iter.node;\n\n    if (node === this.header) {\n      throw new RangeError('Invalid iterator');\n    }\n\n    if (node.right === undefined) {\n      iter = iter.next();\n    }\n\n    this.eraseNode(node);\n    return iter;\n  };\n  /**\n   * @return The height of the RB-tree.\n   */\n\n\n  TreeBaseContainer.prototype.getHeight = function () {\n    if (!this.length) return 0;\n\n    var traversal = function (curNode) {\n      if (!curNode) return 1;\n      return Math.max(traversal(curNode.left), traversal(curNode.right)) + 1;\n    };\n\n    return traversal(this.root);\n  };\n\n  return TreeBaseContainer;\n}(Container);\n\nexport default TreeBaseContainer;","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","__read","o","n","m","Symbol","iterator","i","r","ar","e","next","done","push","value","error","Container","checkWithinAccessParams","TreeNode","TreeBaseContainer","_super","cmp","x","y","_this","root","undefined","header","inOrderTraversal","curNode","callback","ifReturn","left","right","_lowerBound","key","resNode","cmpResult","_upperBound","_reverseLowerBound","_reverseUpperBound","eraseNodeSelfBalance","parentNode","parent","color","RED","BLACK","brother","rotateLeft","rotateRight","eraseNode","_a","_b","length","clear","swapNode","remove","insertNodeSelfBalance","grandParent","uncle","GP","findElementNode","set","minNode","compareToMin","maxNode","compareToMax","eraseElementByPos","pos","index","eraseElementByKey","eraseElementByIterator","iter","node","RangeError","getHeight","traversal","Math","max"],"sources":["C:/Users/Danil/Desktop/project1/node_modules/js-sdsl/dist/esm/container/TreeContainer/Base/TreeBaseContainer.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nimport { Container } from \"../../ContainerBase/index\";\nimport { checkWithinAccessParams } from \"../../../utils/checkParams\";\nimport TreeNode from './TreeNode';\nvar TreeBaseContainer = /** @class */ (function (_super) {\n    __extends(TreeBaseContainer, _super);\n    function TreeBaseContainer(cmp) {\n        if (cmp === void 0) { cmp = function (x, y) {\n            if (x < y)\n                return -1;\n            if (x > y)\n                return 1;\n            return 0;\n        }; }\n        var _this = _super.call(this) || this;\n        _this.root = undefined;\n        _this.header = new TreeNode();\n        _this.inOrderTraversal = function (curNode, callback) {\n            if (curNode === undefined)\n                return false;\n            var ifReturn = _this.inOrderTraversal(curNode.left, callback);\n            if (ifReturn)\n                return true;\n            if (callback(curNode))\n                return true;\n            return _this.inOrderTraversal(curNode.right, callback);\n        };\n        _this.cmp = cmp;\n        return _this;\n    }\n    TreeBaseContainer.prototype._lowerBound = function (curNode, key) {\n        var resNode;\n        while (curNode) {\n            var cmpResult = this.cmp(curNode.key, key);\n            if (cmpResult < 0) {\n                curNode = curNode.right;\n            }\n            else if (cmpResult > 0) {\n                resNode = curNode;\n                curNode = curNode.left;\n            }\n            else\n                return curNode;\n        }\n        return resNode === undefined ? this.header : resNode;\n    };\n    TreeBaseContainer.prototype._upperBound = function (curNode, key) {\n        var resNode;\n        while (curNode) {\n            var cmpResult = this.cmp(curNode.key, key);\n            if (cmpResult <= 0) {\n                curNode = curNode.right;\n            }\n            else if (cmpResult > 0) {\n                resNode = curNode;\n                curNode = curNode.left;\n            }\n        }\n        return resNode === undefined ? this.header : resNode;\n    };\n    TreeBaseContainer.prototype._reverseLowerBound = function (curNode, key) {\n        var resNode;\n        while (curNode) {\n            var cmpResult = this.cmp(curNode.key, key);\n            if (cmpResult < 0) {\n                resNode = curNode;\n                curNode = curNode.right;\n            }\n            else if (cmpResult > 0) {\n                curNode = curNode.left;\n            }\n            else\n                return curNode;\n        }\n        return resNode === undefined ? this.header : resNode;\n    };\n    TreeBaseContainer.prototype._reverseUpperBound = function (curNode, key) {\n        var resNode;\n        while (curNode) {\n            var cmpResult = this.cmp(curNode.key, key);\n            if (cmpResult < 0) {\n                resNode = curNode;\n                curNode = curNode.right;\n            }\n            else if (cmpResult >= 0) {\n                curNode = curNode.left;\n            }\n        }\n        return resNode === undefined ? this.header : resNode;\n    };\n    TreeBaseContainer.prototype.eraseNodeSelfBalance = function (curNode) {\n        while (true) {\n            var parentNode = curNode.parent;\n            if (parentNode === this.header)\n                return;\n            if (curNode.color === TreeNode.RED) {\n                curNode.color = TreeNode.BLACK;\n                return;\n            }\n            if (curNode === parentNode.left) {\n                var brother = parentNode.right;\n                if (brother.color === TreeNode.RED) {\n                    brother.color = TreeNode.BLACK;\n                    parentNode.color = TreeNode.RED;\n                    if (parentNode === this.root) {\n                        this.root = parentNode.rotateLeft();\n                    }\n                    else\n                        parentNode.rotateLeft();\n                }\n                else if (brother.color === TreeNode.BLACK) {\n                    if (brother.right && brother.right.color === TreeNode.RED) {\n                        brother.color = parentNode.color;\n                        parentNode.color = TreeNode.BLACK;\n                        brother.right.color = TreeNode.BLACK;\n                        if (parentNode === this.root) {\n                            this.root = parentNode.rotateLeft();\n                        }\n                        else\n                            parentNode.rotateLeft();\n                        return;\n                    }\n                    else if (brother.left && brother.left.color === TreeNode.RED) {\n                        brother.color = TreeNode.RED;\n                        brother.left.color = TreeNode.BLACK;\n                        brother.rotateRight();\n                    }\n                    else {\n                        brother.color = TreeNode.RED;\n                        curNode = parentNode;\n                    }\n                }\n            }\n            else {\n                var brother = parentNode.left;\n                if (brother.color === TreeNode.RED) {\n                    brother.color = TreeNode.BLACK;\n                    parentNode.color = TreeNode.RED;\n                    if (parentNode === this.root) {\n                        this.root = parentNode.rotateRight();\n                    }\n                    else\n                        parentNode.rotateRight();\n                }\n                else {\n                    if (brother.left && brother.left.color === TreeNode.RED) {\n                        brother.color = parentNode.color;\n                        parentNode.color = TreeNode.BLACK;\n                        brother.left.color = TreeNode.BLACK;\n                        if (parentNode === this.root) {\n                            this.root = parentNode.rotateRight();\n                        }\n                        else\n                            parentNode.rotateRight();\n                        return;\n                    }\n                    else if (brother.right && brother.right.color === TreeNode.RED) {\n                        brother.color = TreeNode.RED;\n                        brother.right.color = TreeNode.BLACK;\n                        brother.rotateLeft();\n                    }\n                    else {\n                        brother.color = TreeNode.RED;\n                        curNode = parentNode;\n                    }\n                }\n            }\n        }\n    };\n    TreeBaseContainer.prototype.eraseNode = function (curNode) {\n        var _a, _b;\n        if (this.length === 1) {\n            this.clear();\n            return this.header;\n        }\n        var swapNode = curNode;\n        while (swapNode.left || swapNode.right) {\n            if (swapNode.right) {\n                swapNode = swapNode.right;\n                while (swapNode.left)\n                    swapNode = swapNode.left;\n            }\n            else if (swapNode.left) {\n                swapNode = swapNode.left;\n            }\n            _a = __read([swapNode.key, curNode.key], 2), curNode.key = _a[0], swapNode.key = _a[1];\n            _b = __read([swapNode.value, curNode.value], 2), curNode.value = _b[0], swapNode.value = _b[1];\n            curNode = swapNode;\n        }\n        if (this.header.left === swapNode) {\n            this.header.left = swapNode.parent;\n        }\n        else if (this.header.right === swapNode) {\n            this.header.right = swapNode.parent;\n        }\n        this.eraseNodeSelfBalance(swapNode);\n        swapNode.remove();\n        this.length -= 1;\n        this.root.color = TreeNode.BLACK;\n    };\n    TreeBaseContainer.prototype.insertNodeSelfBalance = function (curNode) {\n        while (true) {\n            var parentNode = curNode.parent;\n            if (parentNode.color === TreeNode.BLACK)\n                return;\n            var grandParent = parentNode.parent;\n            if (parentNode === grandParent.left) {\n                var uncle = grandParent.right;\n                if (uncle && uncle.color === TreeNode.RED) {\n                    uncle.color = parentNode.color = TreeNode.BLACK;\n                    if (grandParent === this.root)\n                        return;\n                    grandParent.color = TreeNode.RED;\n                    curNode = grandParent;\n                    continue;\n                }\n                else if (curNode === parentNode.right) {\n                    curNode.color = TreeNode.BLACK;\n                    if (curNode.left)\n                        curNode.left.parent = parentNode;\n                    if (curNode.right)\n                        curNode.right.parent = grandParent;\n                    parentNode.right = curNode.left;\n                    grandParent.left = curNode.right;\n                    curNode.left = parentNode;\n                    curNode.right = grandParent;\n                    if (grandParent === this.root) {\n                        this.root = curNode;\n                        this.header.parent = curNode;\n                    }\n                    else {\n                        var GP = grandParent.parent;\n                        if (GP.left === grandParent) {\n                            GP.left = curNode;\n                        }\n                        else\n                            GP.right = curNode;\n                    }\n                    curNode.parent = grandParent.parent;\n                    parentNode.parent = curNode;\n                    grandParent.parent = curNode;\n                }\n                else {\n                    parentNode.color = TreeNode.BLACK;\n                    if (grandParent === this.root) {\n                        this.root = grandParent.rotateRight();\n                    }\n                    else\n                        grandParent.rotateRight();\n                }\n                grandParent.color = TreeNode.RED;\n            }\n            else {\n                var uncle = grandParent.left;\n                if (uncle && uncle.color === TreeNode.RED) {\n                    uncle.color = parentNode.color = TreeNode.BLACK;\n                    if (grandParent === this.root)\n                        return;\n                    grandParent.color = TreeNode.RED;\n                    curNode = grandParent;\n                    continue;\n                }\n                else if (curNode === parentNode.left) {\n                    curNode.color = TreeNode.BLACK;\n                    if (curNode.left)\n                        curNode.left.parent = grandParent;\n                    if (curNode.right)\n                        curNode.right.parent = parentNode;\n                    grandParent.right = curNode.left;\n                    parentNode.left = curNode.right;\n                    curNode.left = grandParent;\n                    curNode.right = parentNode;\n                    if (grandParent === this.root) {\n                        this.root = curNode;\n                        this.header.parent = curNode;\n                    }\n                    else {\n                        var GP = grandParent.parent;\n                        if (GP.left === grandParent) {\n                            GP.left = curNode;\n                        }\n                        else\n                            GP.right = curNode;\n                    }\n                    curNode.parent = grandParent.parent;\n                    parentNode.parent = curNode;\n                    grandParent.parent = curNode;\n                }\n                else {\n                    parentNode.color = TreeNode.BLACK;\n                    if (grandParent === this.root) {\n                        this.root = grandParent.rotateLeft();\n                    }\n                    else\n                        grandParent.rotateLeft();\n                }\n                grandParent.color = TreeNode.RED;\n            }\n            return;\n        }\n    };\n    TreeBaseContainer.prototype.findElementNode = function (curNode, key) {\n        while (curNode) {\n            var cmpResult = this.cmp(curNode.key, key);\n            if (cmpResult < 0) {\n                curNode = curNode.right;\n            }\n            else if (cmpResult > 0) {\n                curNode = curNode.left;\n            }\n            else\n                return curNode;\n        }\n        return curNode;\n    };\n    TreeBaseContainer.prototype.set = function (key, value) {\n        if (this.root === undefined) {\n            this.length += 1;\n            this.root = new TreeNode(key, value);\n            this.root.color = TreeNode.BLACK;\n            this.root.parent = this.header;\n            this.header.parent = this.root;\n            this.header.left = this.root;\n            this.header.right = this.root;\n            return;\n        }\n        var curNode;\n        var minNode = this.header.left;\n        var compareToMin = this.cmp(minNode.key, key);\n        if (compareToMin === 0) {\n            minNode.value = value;\n            return;\n        }\n        else if (compareToMin > 0) {\n            minNode.left = new TreeNode(key, value);\n            minNode.left.parent = minNode;\n            curNode = minNode.left;\n            this.header.left = curNode;\n        }\n        else {\n            var maxNode = this.header.right;\n            var compareToMax = this.cmp(maxNode.key, key);\n            if (compareToMax === 0) {\n                maxNode.value = value;\n                return;\n            }\n            else if (compareToMax < 0) {\n                maxNode.right = new TreeNode(key, value);\n                maxNode.right.parent = maxNode;\n                curNode = maxNode.right;\n                this.header.right = curNode;\n            }\n            else {\n                curNode = this.root;\n                while (true) {\n                    var cmpResult = this.cmp(curNode.key, key);\n                    if (cmpResult > 0) {\n                        if (curNode.left === undefined) {\n                            curNode.left = new TreeNode(key, value);\n                            curNode.left.parent = curNode;\n                            curNode = curNode.left;\n                            break;\n                        }\n                        curNode = curNode.left;\n                    }\n                    else if (cmpResult < 0) {\n                        if (curNode.right === undefined) {\n                            curNode.right = new TreeNode(key, value);\n                            curNode.right.parent = curNode;\n                            curNode = curNode.right;\n                            break;\n                        }\n                        curNode = curNode.right;\n                    }\n                    else {\n                        curNode.value = value;\n                        return;\n                    }\n                }\n            }\n        }\n        this.length += 1;\n        this.insertNodeSelfBalance(curNode);\n    };\n    TreeBaseContainer.prototype.clear = function () {\n        this.length = 0;\n        this.root = undefined;\n        this.header.parent = undefined;\n        this.header.left = this.header.right = undefined;\n    };\n    TreeBaseContainer.prototype.eraseElementByPos = function (pos) {\n        var _this = this;\n        checkWithinAccessParams(pos, 0, this.length - 1);\n        var index = 0;\n        this.inOrderTraversal(this.root, function (curNode) {\n            if (pos === index) {\n                _this.eraseNode(curNode);\n                return true;\n            }\n            index += 1;\n            return false;\n        });\n    };\n    /**\n     * Removes the elements of the specified key.\n     */\n    TreeBaseContainer.prototype.eraseElementByKey = function (key) {\n        if (!this.length)\n            return;\n        var curNode = this.findElementNode(this.root, key);\n        if (curNode === undefined)\n            return;\n        this.eraseNode(curNode);\n    };\n    /**\n     * @return An iterator point to the next iterator.\n     * Removes element by iterator.\n     */\n    TreeBaseContainer.prototype.eraseElementByIterator = function (iter) {\n        // @ts-ignore\n        var node = iter.node;\n        if (node === this.header) {\n            throw new RangeError('Invalid iterator');\n        }\n        if (node.right === undefined) {\n            iter = iter.next();\n        }\n        this.eraseNode(node);\n        return iter;\n    };\n    /**\n     * @return The height of the RB-tree.\n     */\n    TreeBaseContainer.prototype.getHeight = function () {\n        if (!this.length)\n            return 0;\n        var traversal = function (curNode) {\n            if (!curNode)\n                return 1;\n            return Math.max(traversal(curNode.left), traversal(curNode.right)) + 1;\n        };\n        return traversal(this.root);\n    };\n    return TreeBaseContainer;\n}(Container));\nexport default TreeBaseContainer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}